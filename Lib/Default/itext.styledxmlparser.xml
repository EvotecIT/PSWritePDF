<?xml version="1.0"?>
<doc>
    <assembly>
        <name>itext.styledxmlparser</name>
    </assembly>
    <members>
        <member name="F:iText.StyledXmlParser.CommonAttributeConstants.CLASS">
            <summary>The Constant CLASS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.CommonAttributeConstants.DISABLED">
            <summary>The Constant DISABLED.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.CommonAttributeConstants.ID">
            <summary>The Constant ID.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.CommonAttributeConstants.LANG">
            <summary>The Constant LANG.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.CommonAttributeConstants.REL">
            <summary>The Constant REL.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.CommonAttributeConstants.STYLESHEET">
            <summary>The Constant STYLESHEET.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.CssRuleSetComparator">
            <summary>Comparator class used to sort CSS rule set objects.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.CssRuleSetComparator.selectorComparator">
            <summary>The selector comparator.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.CommonCssConstants">
            <summary>
            Class containing possible CSS property keys and values, pseudo element keys,
            units of measurement, and so on.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ALIGN_CONTENT">
            <summary>The Constant ALIGN_CONTENT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ALIGN_ITEMS">
            <summary>The Constant ALIGN_ITEMS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ALIGN_SELF">
            <summary>The Constant ALIGN_SELF.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ATTRIBUTE">
            <summary>The constant ATTRIBUTE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BACKGROUND">
            <summary>The Constant BACKGROUND.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BACKGROUND_ATTACHMENT">
            <summary>The Constant BACKGROUND_ATTACHMENT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BACKGROUND_BLEND_MODE">
            <summary>The Constant BACKGROUND_BLEND_MODE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BACKGROUND_CLIP">
            <summary>The Constant BACKGROUND_CLIP.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BACKGROUND_COLOR">
            <summary>The Constant BACKGROUND_COLOR.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BACKGROUND_IMAGE">
            <summary>The Constant BACKGROUND_IMAGE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BACKGROUND_ORIGIN">
            <summary>The Constant BACKGROUND_ORIGIN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BACKGROUND_POSITION">
            <summary>The Constant BACKGROUND_POSITION.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BACKGROUND_POSITION_X">
            <summary>The Constant BACKGROUND_POSITION_X.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BACKGROUND_POSITION_Y">
            <summary>The Constant BACKGROUND_POSITION_Y.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BACKGROUND_REPEAT">
            <summary>The Constant BACKGROUND_REPEAT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BACKGROUND_SIZE">
            <summary>The Constant BACKGROUND_SIZE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER">
            <summary>The Constant BORDER.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_BOTTOM">
            <summary>The Constant BORDER_BOTTOM.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_BOTTOM_COLOR">
            <summary>The Constant BORDER_BOTTOM_COLOR.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_BOTTOM_LEFT_RADIUS">
            <summary>The Constant BORDER_BOTTOM_LEFT_RADIUS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_BOTTOM_RIGHT_RADIUS">
            <summary>The Constant BORDER_BOTTOM_RIGHT_RADIUS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_BOTTOM_STYLE">
            <summary>The Constant BORDER_BOTTOM_STYLE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_BOTTOM_WIDTH">
            <summary>The Constant BORDER_BOTTOM_WIDTH.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_COLLAPSE">
            <summary>The Constant BORDER_COLLAPSE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_COLOR">
            <summary>The Constant BORDER_COLOR.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_IMAGE">
            <summary>The Constant BORDER_IMAGE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_LEFT">
            <summary>The Constant BORDER_LEFT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_LEFT_COLOR">
            <summary>The Constant BORDER_LEFT_COLOR.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_LEFT_STYLE">
            <summary>The Constant BORDER_LEFT_STYLE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_LEFT_WIDTH">
            <summary>The Constant BORDER_LEFT_WIDTH.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_RADIUS">
            <summary>The Constant BORDER_RADIUS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_RIGHT">
            <summary>The Constant BORDER_RIGHT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_RIGHT_COLOR">
            <summary>The Constant BORDER_RIGHT_COLOR.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_RIGHT_STYLE">
            <summary>The Constant BORDER_RIGHT_STYLE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_RIGHT_WIDTH">
            <summary>The Constant BORDER_RIGHT_WIDTH.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_SPACING">
            <summary>The Constant BORDER_SPACING.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_STYLE">
            <summary>The Constant BORDER_STYLE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_TOP">
            <summary>The Constant BORDER_TOP.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_TOP_COLOR">
            <summary>The Constant BORDER_TOP_COLOR.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_TOP_LEFT_RADIUS">
            <summary>The Constant BORDER_TOP_LEFT_RADIUS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_TOP_RIGHT_RADIUS">
            <summary>The Constant BORDER_TOP_RIGHT_RADIUS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_TOP_STYLE">
            <summary>The Constant BORDER_TOP_STYLE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_TOP_WIDTH">
            <summary>The Constant BORDER_TOP_WIDTH.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_WIDTH">
            <summary>The Constant BORDER_WIDTH.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BOX_SHADOW">
            <summary>The Constant BOX_SHADOW.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BREAK_ALL">
            <summary>The Constant BREAK_ALL.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.CAPTION_SIDE">
            <summary>The Constant CAPTION_SIDE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.COLOR">
            <summary>The Constant COLOR.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.COLOR_DODGE">
            <summary>The Constant COLOR_DODGE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.COLOR_BURN">
            <summary>The Constant COLOR_BURN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.COLUMN_GAP">
            <summary>The Constant COLUMN_GAP.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.DARKEN">
            <summary>The Constant DARKEN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.DIFFERENCE">
            <summary>The Constant DIFFERENCE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.DIRECTION">
            <summary>The Constant DIRECTION.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.DISPLAY">
            <summary>The Constant DISPLAY.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.EMPTY_CELLS">
            <summary>The Constant EMPTY_CELLS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.EXCLUSION">
            <summary>The Constant EXCLUSION.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FLEX">
            <summary>The Constant FLEX.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FLEX_BASIS">
            <summary>The Constant FLEX_BASIS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FLEX_DIRECTION">
            <summary>The Constant FLEX_DIRECTION.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FLEX_GROW">
            <summary>The Constant FLEX_GROW.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FLEX_FLOW">
            <summary>The Constant FLEX_FLOW.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FLEX_SHRINK">
            <summary>The Constant FLEX_SHRINK.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FLEX_WRAP">
            <summary>The Constant FLEX_WRAP.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FLOAT">
            <summary>The Constant FLOAT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FONT">
            <summary>The Constant FONT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FONT_FAMILY">
            <summary>The Constant FONT_FAMILY.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FONT_FEATURE_SETTINGS">
            <summary>The Constant FONT_FEATURE_SETTINGS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FONT_KERNING">
            <summary>The Constant FONT_KERNING.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FONT_LANGUAGE_OVERRIDE">
            <summary>The Constant FONT_LANGUAGE_OVERRIDE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FONT_SIZE">
            <summary>The Constant FONT_SIZE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FONT_SIZE_ADJUST">
            <summary>The Constant FONT_SIZE_ADJUST.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FONT_STRETCH">
            <summary>The Constant FONT_STRETCH.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FONT_STYLE">
            <summary>The Constant FONT_STYLE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FONT_SYNTHESIS">
            <summary>The Constant FONT_SYNTHESIS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FONT_VARIANT">
            <summary>The Constant FONT_VARIANT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FONT_VARIANT_ALTERNATES">
            <summary>The Constant FONT_VARIANT_ALTERNATES.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FONT_VARIANT_CAPS">
            <summary>The Constant FONT_VARIANT_CAPS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FONT_VARIANT_EAST_ASIAN">
            <summary>The Constant FONT_VARIANT_EAST_ASIAN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FONT_VARIANT_LIGATURES">
            <summary>The Constant FONT_VARIANT_LIGATURES.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FONT_VARIANT_NUMERIC">
            <summary>The Constant FONT_VARIANT_NUMERIC.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FONT_VARIANT_POSITION">
            <summary>The Constant FONT_VARIANT_POSITION.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FONT_WEIGHT">
            <summary>The Constant FONT_WEIGHT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.GAP">
            <summary>The Constant GAP.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.HANGING_PUNCTUATION">
            <summary>The Constant HANGING_PUNCTUATION.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.HARD_LIGHT">
            <summary>The Constant HARD_LIGHT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.HUE">
            <summary>The Constant HUE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.HYPHENS">
            <summary>The Constant HYPHENS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.INLINE_BLOCK">
            <summary>The Constant INLINE-BLOCK</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.JUSTIFY_CONTENT">
            <summary>The Constant JUSTIFY_CONTENT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.JUSTIFY_ITEMS">
            <summary>The Constant JUSTIFY_ITEMS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.KEEP_ALL">
            <summary>The Constant KEEP_ALL.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LETTER_SPACING">
            <summary>The Constant LETTER_SPACING.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LINE_HEIGHT">
            <summary>The Constant LINE_HEIGHT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LIST_STYLE">
            <summary>The Constant LIST_STYLE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LIST_STYLE_IMAGE">
            <summary>The Constant LIST_STYLE_IMAGE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LIST_STYLE_POSITION">
            <summary>The Constant LIST_STYLE_POSITION.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LIST_STYLE_TYPE">
            <summary>The Constant LIST_STYLE_TYPE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.MARGIN">
            <summary>The Constant MARGIN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.MARGIN_BOTTOM">
            <summary>The Constant MARGIN_BOTTOM.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.MARGIN_LEFT">
            <summary>The Constant MARGIN_LEFT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.MARGIN_RIGHT">
            <summary>The Constant MARGIN_RIGHT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.MARGIN_TOP">
            <summary>The Constant MARGIN_TOP.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.MIN_HEIGHT">
            <summary>The Constant MIN_HEIGHT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.MULTIPLY">
            <summary>The Constant MULTIPLY.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.OPACITY">
            <summary>The Constant OPACITY.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ORDER">
            <summary>The Constant ORDER.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ORPHANS">
            <summary>The Constant OPRPHANS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.OUTLINE">
            <summary>The Constant OUTLINE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.OUTLINE_COLOR">
            <summary>The Constant OUTLINE_COLOR.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.OUTLINE_STYLE">
            <summary>The Constant OUTLINE_STYLE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.OUTLINE_WIDTH">
            <summary>The Constant OUTLINE_WIDTH.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.OVERFLOW_WRAP">
            <summary>The Constant OVERFLOW_WRAP.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.OVERFLOW">
            <summary>The Constant OVERFLOW.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.PADDING">
            <summary>The Constant PADDING.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.PADDING_BOTTOM">
            <summary>The Constant PADDING_BOTTOM.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.PADDING_LEFT">
            <summary>The Constant PADDING_LEFT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.PADDING_RIGHT">
            <summary>The Constant PADDING_RIGHT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.PADDING_TOP">
            <summary>The Constant PADDING_TOP.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.PAGE_BREAK_AFTER">
            <summary>The Constant PAGE_BREAK_AFTER.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.PAGE_BREAK_BEFORE">
            <summary>The Constant PAGE_BREAK_BEFORE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.PAGE_BREAK_INSIDE">
            <summary>The Constant PAGE_BREAK_INSIDE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.PLACE_ITEMS">
            <summary>The Constant PLACE_ITEMS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.POSITION">
            <summary>The Constant POSITION.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.QUOTES">
            <summary>The Constant QUOTES.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TAB_SIZE">
            <summary>The Constant TAB_SIZE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TEXT_ALIGN">
            <summary>The Constant TEXT_ALIGN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TEXT_ALIGN_LAST">
            <summary>The Constant TEXT_ALIGN_LAST.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TEXT_COMBINE_UPRIGHT">
            <summary>The Constant TEXT_COMBINE_UPRIGHT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TEXT_DECORATION">
            <summary>The Constant TEXT_DECORATION.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TEXT_DECORATION_LINE">
            <summary>The Constant TEXT_DECORATION_LINE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TEXT_DECORATION_STYLE">
            <summary>The Constant TEXT_DECORATION_STYLE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TEXT_DECORATION_COLOR">
            <summary>The Constant TEXT_DECORATION_COLOR.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TEXT_INDENT">
            <summary>The Constant TEXT_INDENT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TEXT_JUSTIFY">
            <summary>The Constant TEXT_JUSTIFY.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TEXT_ORIENTATION">
            <summary>The Constant TEXT_ORIENTATION.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TEXT_SHADOW">
            <summary>The Constant TEXT_SHADOW.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TEXT_TRANSFORM">
            <summary>The Constant TEXT_TRANSFORM.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TEXT_UNDERLINE_POSITION">
            <summary>The Constant TEXT_UNDERLINE_POSITION.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TRANSFORM">
            <summary>The Constant TRANSFORM.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.UNICODE_BIDI">
            <summary>The Constant UNICODE_BIDI.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.VISIBILITY">
            <summary>The Constant VISIBILITY.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.WHITE_SPACE">
            <summary>The Constant WHITE_SPACE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.WIDOWS">
            <summary>The Constant WIDOWS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.WIDTH">
            <summary>The Constant WIDTH.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.HEIGHT">
            <summary>The Constant HEIGHT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.WORDWRAP">
            <summary>The Constant WORDWRAP.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.WORD_BREAK">
            <summary>The Constant WORD_BREAK.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.WORD_SPACING">
            <summary>The Constant WORD_SPACING.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.WRITING_MODE">
            <summary>The Constant WRITING_MODE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ANYWHERE">
            <summary>The Constant ANYWHERE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ALWAYS">
            <summary>The Constant ALWAYS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ARMENIAN">
            <summary>The Constant ARMENIAN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.AVOID">
            <summary>The Constant AVOID.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.AUTO">
            <summary>The Constant AUTO.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BASELINE">
            <summary>The Constant BASELINE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BLINK">
            <summary>The Constant BLINK.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BOLD">
            <summary>The Constant BOLD.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BOLDER">
            <summary>The Constant BOLDER.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_BOX">
            <summary>The Constant BORDER_BOX.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BOTTOM">
            <summary>The Constant BOTTOM.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BREAK_WORD">
            <summary>The Constant BREAK_WORD.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.CAPTION">
            <summary>The Constant CAPTION.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.CENTER">
            <summary>The Constant CENTER.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.CIRCLE">
            <summary>The Constant CIRCLE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.CJK_IDEOGRAPHIC">
            <summary>The Constant CJK_IDEOGRAPHIC.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.CLOSE_QUOTE">
            <summary>The Constant CLOSE_QUOTE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.COLUMN">
            <summary>The Constant COLUMN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.COLUMN_REVERSE">
            <summary>The Constant COLUMN_REVERSE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.CONTAIN">
            <summary>The Constant CONTAIN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.CONTENT">
            <summary>The Constant CONTENT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.CONTENT_BOX">
            <summary>The Constant CONTENT_BOX.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.COVER">
            <summary>The Constant COVER.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.CURRENTCOLOR">
            <summary>The Constant CURRENTCOLOR.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.DASHED">
            <summary>The Constant DASHED.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.DECIMAL">
            <summary>The Constant DECIMAL.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.DECIMAL_LEADING_ZERO">
            <summary>The Constant DECIMAL_LEADING_ZERO.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.DEG">
            <summary>The Constant DEG.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.DISC">
            <summary>The Constant DISC.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.DOTTED">
            <summary>The Constant DOTTED.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.DOUBLE">
            <summary>The Constant DOUBLE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.EACH_LINE">
            <summary>The Constant EACH_LINE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.END">
            <summary>The Constant END.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FIRST">
            <summary>The Constant FIRST.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FIT_CONTENT">
            <summary>The Constant FIT_CONTENT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FIXED">
            <summary>The Constant FIXED.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FLEX_END">
            <summary>The Constant FLEX_END.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FLEX_START">
            <summary>The Constant FLEX_START.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.GEORGIAN">
            <summary>The Constant GEORGIAN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.GRAD">
            <summary>The Constant GRAD.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.GROOVE">
            <summary>The Constant GROOVE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.HANGING">
            <summary>The Constant HANGING.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.HEBREW">
            <summary>The Constant HEBREW.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.HIDDEN">
            <summary>The Constant HIDDEN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.HIRAGANA">
            <summary>The Constant HIRAGANA.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.HIRAGANA_IROHA">
            <summary>The Constant HIRAGANA_IROHA.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ICON">
            <summary>The Constant ICON.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.INHERIT">
            <summary>The Constant INHERIT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.INITIAL">
            <summary>The Constant INITIAL.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.INSET">
            <summary>The Constant INSET.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.INSIDE">
            <summary>The Constant INSIDE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ITALIC">
            <summary>The Constant ITALIC.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LARGE">
            <summary>The Constant LARGE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LARGER">
            <summary>The Constant LARGER.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LAST">
            <summary>The Constant LAST.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LEGACY">
            <summary>The Constant value LEGACY.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LEFT">
            <summary>The Constant LEFT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LIGHTEN">
            <summary>The Constant LIGHTEN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LIGHTER">
            <summary>The Constant LIGHTER.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LINE_THROUGH">
            <summary>The Constant value LINE_THROUGH.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LOCAL">
            <summary>The Constant LOCAL.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LOWER_ALPHA">
            <summary>The Constant LOWER_ALPHA.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LOWER_GREEK">
            <summary>The Constant LOWER_GREEK.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LOWER_LATIN">
            <summary>The Constant LOWER_LATIN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LOWER_ROMAN">
            <summary>The Constant LOWER_ROMAN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LUMINOSITY">
            <summary>The Constant LUMINOSITY.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.MANUAL">
            <summary>The Constant MANUAL.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.MATRIX">
            <summary>The Constant MATRIX.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.MEDIUM">
            <summary>The Constant MEDIUM.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.MENU">
            <summary>The Constant MENU.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.MAX_CONTENT">
            <summary>The Constant MAX_CONTENT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.MIN_CONTENT">
            <summary>The Constant MIN_CONTENT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.MESSAGE_BOX">
            <summary>The Constant MESSAGE_BOX.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.NOWRAP">
            <summary>The Constant NOWRAP.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.NO_OPEN_QUOTE">
            <summary>The Constant NO_OPEN_QUOTE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.NO_CLOSE_QUOTE">
            <summary>The Constant NO_CLOSE_QUOTE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.NO_REPEAT">
            <summary>The Constant NO_REPEAT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.NONE">
            <summary>The Constant NONE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.NORMAL">
            <summary>The Constant NORMAL.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.OBLIQUE">
            <summary>The Constant OBLIQUE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.OPEN_QUOTE">
            <summary>The Constant OPEN_QUOTE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.OUTSIDE">
            <summary>The Constant OUTSIDE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.OUTSET">
            <summary>The Constant OUTSET.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.OVERLAY">
            <summary>The Constant value OVERLAY.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.OVERLINE">
            <summary>The Constant value OVERLINE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.PADDING_BOX">
            <summary>The Constant PADDING_BOX.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.RAD">
            <summary>The Constant RAD.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.REPEAT">
            <summary>The Constant REPEAT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.REPEAT_X">
            <summary>The Constant REPEAT_X.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.REPEAT_Y">
            <summary>The Constant REPEAT_Y.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.RIDGE">
            <summary>The Constant RIDGE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.RIGHT">
            <summary>The Constant RIGHT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ROTATE">
            <summary>The Constant ROTATE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ROUND">
            <summary>The Constant ROUND.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ROW">
            <summary>The Constant ROW.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ROW_GAP">
            <summary>The Constant ROW_GAP.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ROW_REVERSE">
            <summary>The Constant ROW_REVERSE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SAFE">
            <summary>The Constant SAFE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SATURATION">
            <summary>The Constant SATURATION.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SCALE">
            <summary>The Constant SCALE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SCALE_X">
            <summary>The Constant SCALE_X.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SCALE_Y">
            <summary>The Constant SCALE_Y.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SCREEN">
            <summary>The Constant SCREEN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SCROLL">
            <summary>The Constant SCROLL.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SELF_END">
            <summary>The Constant value SELF_END.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SELF_START">
            <summary>The Constant SELF_START.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SKEW">
            <summary>The Constant SKEW.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SKEW_X">
            <summary>The Constant SKEW_X.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SKEW_Y">
            <summary>The Constant SKEW_Y.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SMALL">
            <summary>The Constant SMALL.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SMALL_CAPS">
            <summary>The Constant SMALL_CAPS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SMALL_CAPTION">
            <summary>The Constant SMALL_CAPTION.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SMALLER">
            <summary>The Constant SMALLER.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SOFT_LIGHT">
            <summary>The Constant SOFT_LIGHT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SOLID">
            <summary>The Constant SOLID.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SPACE">
            <summary>The Constant SPACE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SPACE_AROUND">
            <summary>The Constant SPACE_AROUND.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SPACE_BETWEEN">
            <summary>The Constant SPACE_BETWEEN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SPACE_EVENLY">
            <summary>The Constant SPACE_EVENLY.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.SQUARE">
            <summary>The Constant SQUARE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.START">
            <summary>The Constant START.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.STATIC">
            <summary>The Constant STATIC.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.STATUS_BAR">
            <summary>The Constant STATUS_BAR.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.STRETCH">
            <summary>The Constant STRETCH.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.STRING">
            <summary>The Constant STRING.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.THICK">
            <summary>The Constant THICK.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.THIN">
            <summary>The Constant THIN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TOP">
            <summary>The Constant TOP.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TRANSLATE">
            <summary>The Constant TRANSLATE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TRANSLATE_X">
            <summary>The Constant TRANSLATE_X.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TRANSLATE_Y">
            <summary>The Constant TRANSLATE_Y.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TRANSPARENT">
            <summary>The Constant TRANSPARENT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.UNDEFINED_NAME">
            <summary>The Constant UNDEFINED_NAME.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.UNDERLINE">
            <summary>The Constant value UNDERLINE</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.UNSAFE">
            <summary>The Constant UNSAFE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.UNSET">
            <summary>The Constant value UNSET.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.UPPER_ALPHA">
            <summary>The Constant UPPER_ALPHA.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.UPPER_LATIN">
            <summary>The Constant UPPER_LATIN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.UPPER_ROMAN">
            <summary>The Constant UPPER_ROMAN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.VISIBLE">
            <summary>The Constant value VISIBLE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.WAVY">
            <summary>The Constant value WAVY.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.WRAP">
            <summary>The Constant WRAP.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.WRAP_REVERSE">
            <summary>The Constant WRAP_REVERSE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.X_LARGE">
            <summary>The Constant X_LARGE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.X_SMALL">
            <summary>The Constant X_SMALL.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.XX_LARGE">
            <summary>The Constant XX_LARGE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.XX_SMALL">
            <summary>The Constant XX_SMALL.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BACKGROUND_SIZE_VALUES">
            <summary>The Constant BACKGROUND_SIZE_VALUES.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BACKGROUND_ORIGIN_OR_CLIP_VALUES">
            <summary>The Constant BACKGROUND_ORIGIN_OR_CLIP_VALUES.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BACKGROUND_REPEAT_VALUES">
            <summary>The Constant BACKGROUND_REPEAT_VALUES.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BACKGROUND_ATTACHMENT_VALUES">
            <summary>The Constant BACKGROUND_ATTACHMENT_VALUES.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BACKGROUND_POSITION_VALUES">
            <summary>The Constant BACKGROUND_POSITION_VALUES.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BACKGROUND_POSITION_X_VALUES">
            <summary>The Constant BACKGROUND_POSITION_X_VALUES.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BACKGROUND_POSITION_Y_VALUES">
            <summary>The Constant BACKGROUND_POSITION_Y_VALUES.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_WIDTH_VALUES">
            <summary>The Constant BORDER_WIDTH_VALUES.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BORDER_STYLE_VALUES">
            <summary>The Constant BORDER_STYLE_VALUES.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.BLEND_MODE_VALUES">
            <summary>The Constant BLEND_MODE_VALUES.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FONT_ABSOLUTE_SIZE_KEYWORDS_VALUES">
            <summary>The Constant FONT_ABSOLUTE_SIZE_KEYWORDS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.METRIC_MEASUREMENTS_VALUES">
            <summary>The Constant METRIC_MEASUREMENTS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ACTIVE">
            <summary>The Constant ACTIVE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.CHECKED">
            <summary>The Constant CHECKED.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.DISABLED">
            <summary>The Constant DISABLED.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.EMPTY">
            <summary>The Constant EMPTY.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ENABLED">
            <summary>The Constant ENABLED.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FIRST_CHILD">
            <summary>The Constant FIRST_CHILD.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FIRST_OF_TYPE">
            <summary>The Constant FIRST_OF_TYPE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.FOCUS">
            <summary>The Constant FOCUS.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.HOVER">
            <summary>The Constant HOVER.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.IN_RANGE">
            <summary>The Constant IN_RANGE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.INVALID">
            <summary>The Constant INVALID.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LANG">
            <summary>The Constant LANG.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LAST_CHILD">
            <summary>The Constant LAST_CHILD.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LAST_OF_TYPE">
            <summary>The Constant LAST_OF_TYPE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.LINK">
            <summary>The Constant LINK.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.NTH_CHILD">
            <summary>The Constant NTH_CHILD.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.NOT">
            <summary>The Constant NOT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.NTH_LAST_CHILD">
            <summary>The Constant NTH_LAST_CHILD.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.NTH_LAST_OF_TYPE">
            <summary>The Constant NTH_LAST_OF_TYPE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.NTH_OF_TYPE">
            <summary>The Constant NTH_OF_TYPE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ONLY_OF_TYPE">
            <summary>The Constant ONLY_OF_TYPE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ONLY_CHILD">
            <summary>The Constant ONLY_CHILD.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.OPTIONAL">
            <summary>The Constant OPTIONAL.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.OUT_OF_RANGE">
            <summary>The Constant OUT_OF_RANGE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.READ_ONLY">
            <summary>The Constant READ_ONLY.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.READ_WRITE">
            <summary>The Constant READ_WRITE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.REQUIRED">
            <summary>The Constant REQUIRED.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.ROOT">
            <summary>The Constant ROOT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.TARGET">
            <summary>The Constant TARGET.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.URL">
            <summary>The Constant URL.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.VALID">
            <summary>The Constant VALID.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.VISITED">
            <summary>The Constant VISITED.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.CM">
            <summary>The Constant CM.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.EM">
            <summary>The Constant EM.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.EX">
            <summary>The Constant EX.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.IN">
            <summary>The Constant IN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.MM">
            <summary>The Constant MM.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.PC">
            <summary>The Constant PC.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.PERCENTAGE">
            <summary>The Constant PERCENTAGE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.PT">
            <summary>The Constant PT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.PX">
            <summary>The Constant PX.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.REM">
            <summary>The Constant REM.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.Q">
            <summary>The Constant Q.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.DPCM">
            <summary>The Constant DPCM.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.DPI">
            <summary>The Constant DPI.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CommonCssConstants.DPPX">
            <summary>The Constant DPPX.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.CssAtRule">
            <summary>Abstract superclass for all CSS at-rules (rules in CSS that start with an @ sign).</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssAtRule.ruleName">
            <summary>The rule name.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssAtRule.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.CssAtRule"/>
            instance.
            </summary>
            <param name="ruleName">the rule name</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssAtRule.GetRuleName">
            <summary>Gets the rule name.</summary>
            <returns>the rule name</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.CssContextNode">
            <summary>The CSS context node.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssContextNode.childNodes">
            <summary>The child nodes.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssContextNode.parentNode">
            <summary>The parent node.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssContextNode.styles">
            <summary>The styles.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssContextNode.#ctor(iText.StyledXmlParser.Node.INode)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.CssContextNode"/>
            instance.
            </summary>
            <param name="parentNode">the parent node</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.CssDeclaration">
            <summary>Class to store a CSS declaration.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssDeclaration.property">
            <summary>The property.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssDeclaration.expression">
            <summary>The expression.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssDeclaration.#ctor(System.String,System.String)">
            <summary>Instantiates a new CSS declaration.</summary>
            <param name="property">the property</param>
            <param name="expression">the expression</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssDeclaration.GetProperty">
            <summary>Gets the property.</summary>
            <returns>the property</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssDeclaration.GetExpression">
            <summary>Gets the expression.</summary>
            <returns>the expression</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssDeclaration.SetExpression(System.String)">
            <summary>Sets the expression.</summary>
            <param name="expression">the new expression</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssDeclaration.ResolveAlias(System.String)">
            <summary>Resolves css property aliases.</summary>
            <remarks>
            Resolves css property aliases.
            For example, word-wrap is an alias for overflow-wrap property.
            </remarks>
            <param name="normalizedCssProperty">css property to be resolved as alias</param>
            <returns>resolved property if the provided property was an alias, otherwise original provided property.</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.CssFontFaceRule">
            <summary>Class to store a CSS font face At rule.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssFontFaceRule.properties">
            <summary>Properties in the form of a list of CSS declarations.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssFontFaceRule.#ctor">
            <summary>Instantiates a new CSS font face rule.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssFontFaceRule.GetProperties">
            <summary>Gets the properties.</summary>
            <returns>the properties</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.CssNestedAtRule">
            <summary>
            Class to store a nested CSS at-rule
            Nested at-rules are a subset of nested statements, which can be used
            as a statement of a style sheet as well as inside of conditional group rules.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssNestedAtRule.ruleParameters">
            <summary>The rule parameters.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssNestedAtRule.body">
            <summary>The body.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssNestedAtRule.#ctor(System.String,System.String)">
            <summary>
            Creates a
            <see cref="T:iText.StyledXmlParser.Css.CssNestedAtRule"/>
            instance
            with an empty body.
            </summary>
            <param name="ruleName">the rule name</param>
            <param name="ruleParameters">the rule parameters</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssNestedAtRule.AddStatementToBody(iText.StyledXmlParser.Css.CssStatement)">
            <summary>Adds a CSS statement to body.</summary>
            <param name="statement">a CSS statement</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssNestedAtRule.AddStatementsToBody(System.Collections.Generic.ICollection{iText.StyledXmlParser.Css.CssStatement})">
            <summary>Adds CSS statements to the body.</summary>
            <param name="statements">a list of CSS statements</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssNestedAtRule.AddBodyCssDeclarations(System.Collections.Generic.IList{iText.StyledXmlParser.Css.CssDeclaration})">
            <summary>Adds the body CSS declarations.</summary>
            <param name="cssDeclarations">a list of CSS declarations</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssNestedAtRule.GetStatements">
            <summary>Gets the list of CSS statements.</summary>
            <returns>the list of CSS statements</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.CssNestedAtRuleFactory">
            <summary>
            A factory for creating
            <see cref="T:iText.StyledXmlParser.Css.CssNestedAtRule"/>
            objects.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssNestedAtRuleFactory.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.CssNestedAtRuleFactory"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssNestedAtRuleFactory.CreateNestedRule(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.CssNestedAtRule"/>
            object.
            </summary>
            <param name="ruleDeclaration">the rule declaration</param>
            <returns>
            a
            <see cref="T:iText.StyledXmlParser.Css.CssNestedAtRule"/>
            instance
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssNestedAtRuleFactory.ExtractRuleNameFromDeclaration(System.String)">
            <summary>Extracts the rule name from the CSS rule declaration.</summary>
            <param name="ruleDeclaration">the rule declaration</param>
            <returns>the rule name</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.CssRuleName">
            <summary>Class containing possible CSS rule names.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssRuleName.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.CssRuleName"/>
            instance.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleName.BOTTOM_CENTER">
            <summary>The Constant BOTTOM_CENTER.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleName.BOTTOM_LEFT">
            <summary>The Constant BOTTOM_LEFT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleName.BOTTOM_LEFT_CORNER">
            <summary>The Constant BOTTOM_LEFT_CORNER.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleName.BOTTOM_RIGHT">
            <summary>The Constant BOTTOM_RIGHT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleName.BOTTOM_RIGHT_CORNER">
            <summary>The Constant BOTTOM_RIGHT_CORNER.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleName.LEFT_BOTTOM">
            <summary>The Constant LEFT_BOTTOM.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleName.LEFT_MIDDLE">
            <summary>The Constant LEFT_MIDDLE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleName.LEFT_TOP">
            <summary>The Constant LEFT_TOP.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleName.FONT_FACE">
            <summary>The Constant FONT_FACE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleName.MEDIA">
            <summary>The Constant MEDIA.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleName.PAGE">
            <summary>The Constant PAGE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleName.RIGHT_BOTTOM">
            <summary>The Constant RIGHT_BOTTOM.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleName.RIGHT_MIDDLE">
            <summary>The Constant RIGHT_MIDDLE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleName.RIGHT_TOP">
            <summary>The Constant RIGHT_TOP.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleName.TOP_CENTER">
            <summary>The Constant TOP_CENTER.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleName.TOP_LEFT">
            <summary>The Constant TOP_LEFT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleName.TOP_LEFT_CORNER">
            <summary>The Constant TOP_LEFT_CORNER.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleName.TOP_RIGHT">
            <summary>The Constant TOP_RIGHT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleName.TOP_RIGHT_CORNER">
            <summary>The Constant TOP_RIGHT_CORNER.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.CssRuleSet">
            <summary>Class to store a CSS rule set.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleSet.importantMatcher">
            <summary>Pattern to match "important" in a rule declaration.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleSet.selector">
            <summary>The CSS selector.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleSet.normalDeclarations">
            <summary>The normal CSS declarations.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleSet.importantDeclarations">
            <summary>The important CSS declarations.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssRuleSet.#ctor(iText.StyledXmlParser.Css.Selector.ICssSelector,System.Collections.Generic.IList{iText.StyledXmlParser.Css.CssDeclaration})">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.CssRuleSet"/>
            from selector and raw list of declarations.
            </summary>
            <remarks>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.CssRuleSet"/>
            from selector and raw list of declarations.
            The declarations are split into normal and important under the hood.
            To construct the
            <see cref="T:iText.StyledXmlParser.Css.CssRuleSet"/>
            instance from normal and important declarations, see
            <see cref="!:CssRuleSet(iText.StyledXmlParser.Css.Selector.ICssSelector, System.Collections.Generic.IList&lt;E&gt;, System.Collections.Generic.IList&lt;E&gt;)"/>
            </remarks>
            <param name="selector">the CSS selector</param>
            <param name="declarations">the CSS declarations</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssRuleSet.GetSelector">
            <summary>Gets the CSS selector.</summary>
            <returns>the CSS selector</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssRuleSet.GetNormalDeclarations">
            <summary>Gets the normal CSS declarations.</summary>
            <returns>the normal declarations</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssRuleSet.GetImportantDeclarations">
            <summary>Gets the important CSS declarations.</summary>
            <returns>the important declarations</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssRuleSet.SplitDeclarationsIntoNormalAndImportant(System.Collections.Generic.IList{iText.StyledXmlParser.Css.CssDeclaration},System.Collections.Generic.IList{iText.StyledXmlParser.Css.CssDeclaration},System.Collections.Generic.IList{iText.StyledXmlParser.Css.CssDeclaration})">
            <summary>Split CSS declarations into normal and important CSS declarations.</summary>
            <param name="declarations">the declarations</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.CssRuleSetComparator">
            <summary>Comparator class used to sort CSS rule set objects.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssRuleSetComparator.selectorComparator">
            <summary>The selector comparator.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.CssSemicolonAtRule">
            <summary>
            A
            <see cref="T:iText.StyledXmlParser.Css.CssAtRule"/>
            implementation.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssSemicolonAtRule.ruleParams">
            <summary>The rule parameters.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssSemicolonAtRule.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.CssSemicolonAtRule"/>
            instance.
            </summary>
            <param name="ruleDeclaration">the rule declaration</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.CssStatement">
            <summary>Abstract superclass for all kinds of CSS statements.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssStatement.GetCssRuleSets(iText.StyledXmlParser.Node.INode,iText.StyledXmlParser.Css.Media.MediaDeviceDescription)">
            <summary>
            Gets a list of
            <see cref="T:iText.StyledXmlParser.Css.CssRuleSet"/>
            objects.
            </summary>
            <param name="node">a node</param>
            <param name="deviceDescription">a media device description</param>
            <returns>the css rule sets</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.CssStyleSheet">
            <summary>Class that stores all the CSS statements, and thus acts as a CSS style sheet.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.CssStyleSheet.statements">
            <summary>The list of CSS statements.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssStyleSheet.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.CssStyleSheet"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssStyleSheet.AddStatement(iText.StyledXmlParser.Css.CssStatement)">
            <summary>Adds a CSS statement to the style sheet.</summary>
            <param name="statement">the CSS statement</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssStyleSheet.AppendCssStyleSheet(iText.StyledXmlParser.Css.CssStyleSheet)">
            <summary>Append another CSS style sheet to this one.</summary>
            <param name="anotherCssStyleSheet">the other CSS style sheet</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssStyleSheet.GetStatements">
            <summary>Gets the CSS statements of this style sheet.</summary>
            <returns>the CSS statements</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssStyleSheet.GetCssDeclarations(iText.StyledXmlParser.Node.INode,iText.StyledXmlParser.Css.Media.MediaDeviceDescription)">
            <summary>Gets the CSS declarations.</summary>
            <param name="node">the node</param>
            <param name="deviceDescription">the media device description</param>
            <returns>the CSS declarations</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssStyleSheet.ExtractStylesFromRuleSets(System.Collections.Generic.IList{iText.StyledXmlParser.Css.CssRuleSet})">
            <summary>Gets the CSS declarations.</summary>
            <param name="ruleSets">list of css rule sets</param>
            <returns>the CSS declarations</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssStyleSheet.PopulateDeclarationsMap(System.Collections.Generic.IList{iText.StyledXmlParser.Css.CssDeclaration},System.Collections.Generic.IDictionary{System.String,iText.StyledXmlParser.Css.CssDeclaration})">
            <summary>Populates the CSS declarations map.</summary>
            <param name="declarations">the declarations</param>
            <param name="map">the map</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssStyleSheet.GetCssRuleSets(iText.StyledXmlParser.Node.INode,iText.StyledXmlParser.Css.Media.MediaDeviceDescription)">
            <summary>Gets the CSS rule sets.</summary>
            <param name="node">the node</param>
            <param name="deviceDescription">the device description</param>
            <returns>the css rule sets</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.CssStyleSheet.PutDeclarationInMapIfValid(System.Collections.Generic.IDictionary{System.String,iText.StyledXmlParser.Css.CssDeclaration},iText.StyledXmlParser.Css.CssDeclaration)">
            <summary>Puts a declaration in a styles map if the declaration is valid.</summary>
            <param name="stylesMap">the styles map</param>
            <param name="cssDeclaration">the css declaration</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Font.CssFontFace">
            <summary>
            Class that will examine the font as described in the CSS, and store it
            in a form that the font provider will understand.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Font.CssFontFace.alias">
            <summary>Name that will be used as the alias of the font.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Font.CssFontFace.sources">
            <summary>A list of font face sources.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Font.CssFontFace.Create(System.Collections.Generic.IList{iText.StyledXmlParser.Css.CssDeclaration})">
            <summary>
            Create a
            <see cref="T:iText.StyledXmlParser.Css.Font.CssFontFace"/>
            instance from a list of
            CSS font attributes ("font-family" or "src").
            </summary>
            <param name="properties">the font properties</param>
            <returns>
            the
            <see cref="T:iText.StyledXmlParser.Css.Font.CssFontFace"/>
            instance
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Font.CssFontFace.SplitSourcesSequence(System.String)">
            <summary>Processes and splits a string sequence containing a url/uri.</summary>
            <param name="src">a string representing css src attribute</param>
            <returns>
            an array of
            <see cref="T:System.String"/>
            urls for font loading
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Font.CssFontFace.IsSupportedFontFormat(iText.StyledXmlParser.Css.Font.CssFontFace.FontFormat)">
            <summary>Checks whether in general we support requested font format.</summary>
            <param name="format">
            
            <see cref="T:iText.StyledXmlParser.Css.Font.CssFontFace.FontFormat"/>
            </param>
            <returns>true, if supported or unrecognized.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Font.CssFontFace.GetFontFamily">
            <summary>Gets the font-family.</summary>
            <remarks>
            Gets the font-family.
            Actually font-family is an alias.
            </remarks>
            <returns>the font family (or alias)</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Font.CssFontFace.GetSources">
            <summary>Gets the font face sources.</summary>
            <returns>the sources</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Font.CssFontFace.#ctor(System.String,System.Collections.Generic.IList{iText.StyledXmlParser.Css.Font.CssFontFace.CssFontFaceSrc})">
            <summary>Instantiates a new font face.</summary>
            <param name="alias">the font-family (or alias)</param>
            <param name="sources">the sources</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Font.CssFontFace.FontFormat">
            <summary>The Enum FontFormat.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Font.CssFontFace.FontFormat.TrueType">
            <summary>"truetype"</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Font.CssFontFace.FontFormat.OpenType">
            <summary>"opentype"</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Font.CssFontFace.FontFormat.WOFF">
            <summary>"woff"</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Font.CssFontFace.FontFormat.WOFF2">
            <summary>"woff2"</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Font.CssFontFace.FontFormat.EOT">
            <summary>"embedded-opentype"</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Font.CssFontFace.FontFormat.SVG">
            <summary>"svg"</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Font.CssFontFace.CssFontFaceSrc">
            <summary>Class that defines a font face source.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Font.CssFontFace.CssFontFaceSrc.UrlPattern">
            <summary>The UrlPattern used to compose a source path.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Font.CssFontFace.CssFontFaceSrc.TypeGroup">
            <summary>The Constant TypeGroup.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Font.CssFontFace.CssFontFaceSrc.UrlGroup">
            <summary>The Constant UrlGroup.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Font.CssFontFace.CssFontFaceSrc.FormatGroup">
            <summary>The Constant FormatGroup.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Font.CssFontFace.CssFontFaceSrc.format">
            <summary>The font format.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Font.CssFontFace.CssFontFaceSrc.src">
            <summary>The source path.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Font.CssFontFace.CssFontFaceSrc.isLocal">
            <summary>Indicates if the font is local.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Font.CssFontFace.CssFontFaceSrc.Create(System.String)">
            <summary>
            Creates a
            <see cref="T:iText.StyledXmlParser.Css.Font.CssFontFace.CssFontFaceSrc"/>
            object by parsing a
            <see cref="T:System.String"/>
            trying to match patterns that reveal the font name, whether that font is local,
            and which format the font is in.
            </summary>
            <param name="src">a string containing information about a font</param>
            <returns>
            the font in the form of a
            <see cref="T:iText.StyledXmlParser.Css.Font.CssFontFace.CssFontFaceSrc"/>
            object
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Font.CssFontFace.CssFontFaceSrc.ParseFormat(System.String)">
            <summary>
            Parses a
            <see cref="T:System.String"/>
            to a font format.
            </summary>
            <param name="formatStr">a string</param>
            <returns>a font format</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Font.CssFontFace.CssFontFaceSrc.Unquote(System.String)">
            <summary>
            Removes single and double quotes at the start and the end of a
            <see cref="T:System.String"/>.
            </summary>
            <param name="quotedString">
            a
            <see cref="T:System.String"/>
            that might be between quotes
            </param>
            <returns>
            the
            <see cref="T:System.String"/>
            without the quotes
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Font.CssFontFace.CssFontFaceSrc.#ctor(System.String,System.Boolean,iText.StyledXmlParser.Css.Font.CssFontFace.FontFormat)">
            <summary>
            Instantiates a new
            <see cref="T:iText.StyledXmlParser.Css.Font.CssFontFace.CssFontFaceSrc"/>
            instance.
            </summary>
            <param name="src">a source path</param>
            <param name="isLocal">indicates if the font is local</param>
            <param name="format">the font format (true type, open type, woff,...)</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.ICssResolver">
            <summary>Interface for CSS resolvers.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.ICssResolver.ResolveStyles(iText.StyledXmlParser.Node.INode,iText.StyledXmlParser.Css.Resolve.AbstractCssContext)">
            <summary>Resolves the styles of a node given the passed context.</summary>
            <param name="node">the node</param>
            <param name="context">the CSS context (RootFontSize, etc.)</param>
            <returns>the map containing the resolved styles</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Media.CssMediaRule">
            <summary>
            The
            <see cref="T:iText.StyledXmlParser.Css.CssNestedAtRule"/>
            implementation for media rules.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.CssMediaRule.mediaQueries">
            <summary>The media queries.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.CssMediaRule.#ctor(System.String)">
            <summary>
            Creates a
            <see cref="T:iText.StyledXmlParser.Css.Media.CssMediaRule"/>.
            </summary>
            <param name="ruleParameters">the rule parameters</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.CssMediaRule.MatchMediaDevice(iText.StyledXmlParser.Css.Media.MediaDeviceDescription)">
            <summary>Tries to match a media device.</summary>
            <param name="deviceDescription">the device description</param>
            <returns>true, if successful</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Media.MediaDeviceDescription">
            <summary>Class that bundles all the values of a media device description.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.type">
            <summary>The type.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.bitsPerComponent">
            <summary>The bits per component.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.colorIndex">
            <summary>The color index.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.width">
            <summary>The width in points.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.height">
            <summary>The height in points.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.isGrid">
            <summary>Indicates if the media device is a grid.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.scan">
            <summary>The scan value.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.orientation">
            <summary>The orientation.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.monochrome">
            <summary>The the number of bits per pixel on a monochrome (greyscale) device.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.resolution">
            <summary>The resolution in DPI.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.#ctor(System.String)">
            <summary>
            See
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaType"/>
            class constants for possible values.
            </summary>
            <param name="type">a type of the media to use.</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaDeviceDescription"/>
            instance.
            </summary>
            <param name="type">the type</param>
            <param name="width">the width</param>
            <param name="height">the height</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.CreateDefault">
            <summary>
            Creates the default
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaDeviceDescription"/>.
            </summary>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.GetDefault">
            <summary>
            Gets default
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaDeviceDescription"/>
            instance.
            </summary>
            <remarks>
            Gets default
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaDeviceDescription"/>
            instance.
            Do not modify any fields of the returned media device description because it may lead
            to unpredictable results. Use
            <see cref="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.CreateDefault"/>
            if you want to modify device description.
            </remarks>
            <returns>the default media device description</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.GetType">
            <summary>Gets the type.</summary>
            <returns>the type</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.GetBitsPerComponent">
            <summary>Gets the bits per component.</summary>
            <returns>the bits per component</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.SetBitsPerComponent(System.Int32)">
            <summary>Sets the bits per component.</summary>
            <param name="bitsPerComponent">the bits per component</param>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.GetColorIndex">
            <summary>Gets the color index.</summary>
            <returns>the color index</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.SetColorIndex(System.Int32)">
            <summary>Sets the color index.</summary>
            <param name="colorIndex">the color index</param>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.GetWidth">
            <summary>Gets the width in points.</summary>
            <returns>the width</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.SetWidth(System.Single)">
            <summary>Sets the width in points.</summary>
            <param name="width">the width</param>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.GetHeight">
            <summary>Gets the height in points.</summary>
            <returns>the height</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.SetHeight(System.Single)">
            <summary>Sets the height in points.</summary>
            <param name="height">the height</param>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.IsGrid">
            <summary>Checks if the media device is a grid.</summary>
            <returns>true, if is grid</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.SetGrid(System.Boolean)">
            <summary>Sets the grid value.</summary>
            <param name="grid">the grid value</param>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.GetScan">
            <summary>Gets the scan value.</summary>
            <returns>the scan value</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.SetScan(System.String)">
            <summary>Sets the scan value.</summary>
            <param name="scan">the scan value</param>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.GetOrientation">
            <summary>Gets the orientation.</summary>
            <returns>the orientation</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.SetOrientation(System.String)">
            <summary>Sets the orientation.</summary>
            <param name="orientation">the orientation</param>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.GetMonochrome">
            <summary>Gets the number of bits per pixel on a monochrome (greyscale) device.</summary>
            <returns>the number of bits per pixel on a monochrome (greyscale) device</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.SetMonochrome(System.Int32)">
            <summary>Sets the number of bits per pixel on a monochrome (greyscale) device.</summary>
            <param name="monochrome">the number of bits per pixel on a monochrome (greyscale) device</param>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.GetResolution">
            <summary>Gets the resolution in DPI.</summary>
            <returns>the resolution</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaDeviceDescription.SetResolution(System.Single)">
            <summary>Sets the resolution in DPI.</summary>
            <param name="resolution">the resolution</param>
            <returns>the media device description</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Media.MediaExpression">
            <summary>Class that bundles all the media expression properties.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaExpression.DEFAULT_FONT_SIZE">
            <summary>The default font size.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaExpression.minPrefix">
            <summary>Indicates if there's a "min-" prefix.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaExpression.maxPrefix">
            <summary>Indicates if there's a "max-" prefix.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaExpression.feature">
            <summary>The feature.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaExpression.value">
            <summary>The value.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaExpression.#ctor(System.String,System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaExpression"/>
            instance.
            </summary>
            <param name="feature">the feature</param>
            <param name="value">the value</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaExpression.Matches(iText.StyledXmlParser.Css.Media.MediaDeviceDescription)">
            <summary>
            Tries to match a
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaDeviceDescription"/>.
            </summary>
            <param name="deviceDescription">the device description</param>
            <returns>true, if successful</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaExpression.ParseAbsoluteLength(System.String)">
            <summary>Parses an absolute length.</summary>
            <param name="value">
            the absolute length as a
            <see cref="T:System.String"/>
            value
            </param>
            <returns>
            the absolute length as a
            <c>float</c>
            value
            </returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Media.MediaFeature">
            <summary>Class that bundles all the media feature values.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaFeature.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaFeature"/>
            instance.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaFeature.COLOR">
            <summary>
            Value: &lt;integer&gt;<br />
            Media: visual<br />
            Accepts min/max prefixes: yes<br />
            Indicates the number of bits per color component of the output device.
            </summary>
            <remarks>
            Value: &lt;integer&gt;<br />
            Media: visual<br />
            Accepts min/max prefixes: yes<br />
            Indicates the number of bits per color component of the output device. If the device is not a color device, this value is zero.
            </remarks>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaFeature.COLOR_INDEX">
            <summary>
            Value: &lt;integer&gt;<br />
            Media: visual<br />
            Accepts min/max prefixes: yes<br />
            Indicates the number of entries in the color look-up table for the output device.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaFeature.ASPECT_RATIO">
            <summary>
            Value: &lt;ratio&gt;<br />
            Media: visual, tactile<br />
            Accepts min/max prefixes: yes<br />
            Describes the aspect ratio of the targeted display area of the output device.
            </summary>
            <remarks>
            Value: &lt;ratio&gt;<br />
            Media: visual, tactile<br />
            Accepts min/max prefixes: yes<br />
            Describes the aspect ratio of the targeted display area of the output device.
            This value consists of two positive integers separated by a slash ("/") character.
            This represents the ratio of horizontal pixels (first term) to vertical pixels (second term).
            </remarks>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaFeature.GRID">
            <summary>
            Value: &lt;mq-boolean&gt; which is an &lt;integer&gt; that can only have the 0 and 1 value.<br />
            Media: all<br />
            Accepts min/max prefixes: no<br />
            Determines whether the output device is a grid device or a bitmap device.
            </summary>
            <remarks>
            Value: &lt;mq-boolean&gt; which is an &lt;integer&gt; that can only have the 0 and 1 value.<br />
            Media: all<br />
            Accepts min/max prefixes: no<br />
            Determines whether the output device is a grid device or a bitmap device.
            If the device is grid-based (such as a TTY terminal or a phone display with only one font),
            the value is 1. Otherwise it is zero.
            </remarks>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaFeature.SCAN">
            <summary>
            Value: progressive | interlace<br />
            Media: tv<br />
            Accepts min/max prefixes: no<br />
            Describes the scanning process of television output devices.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaFeature.ORIENTATION">
            <summary>
            Value: landscape | portrait<br />
            Media: visual<br />
            Accepts min/max prefixes: no<br />
            Indicates whether the viewport is in landscape (the display is wider than it is tall) or
            portrait (the display is taller than it is wide) mode.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaFeature.MONOCHROME">
            <summary>
            Value: &lt;integer&gt;<br />
            Media: visual<br />
            Accepts min/max prefixes: yes<br />
            Indicates the number of bits per pixel on a monochrome (greyscale) device.
            </summary>
            <remarks>
            Value: &lt;integer&gt;<br />
            Media: visual<br />
            Accepts min/max prefixes: yes<br />
            Indicates the number of bits per pixel on a monochrome (greyscale) device.
            If the device isn't monochrome, the device's value is 0.
            </remarks>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaFeature.HEIGHT">
            <summary>
            Value: &lt;length&gt;<br />
            Media: visual, tactile<br />
            Accepts min/max prefixes: yes<br />
            The height media feature describes the height of the output device's rendering surface
            (such as the height of the viewport or of the page box on a printer).
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaFeature.RESOLUTION">
            <summary>
            Value: &lt;resolution&gt;<br />
            Media: bitmap<br />
            Accepts min/max prefixes: yes<br />
            Indicates the resolution (pixel density) of the output device.
            </summary>
            <remarks>
            Value: &lt;resolution&gt;<br />
            Media: bitmap<br />
            Accepts min/max prefixes: yes<br />
            Indicates the resolution (pixel density) of the output device. The resolution may be specified in
            either dots per inch (dpi) or dots per centimeter (dpcm).
            </remarks>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaFeature.WIDTH">
            <summary>
            Value: &lt;length&gt;<br />
            Media: visual, tactile<br />
            Accepts min/max prefixes: yes<br />
            The width media feature describes the width of the rendering surface of the output device
            (such as the width of the document window, or the width of the page box on a printer).
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Media.MediaQuery">
            <summary>Class that bundles all the media query properties.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaQuery.only">
            <summary>The logical "only" value.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaQuery.not">
            <summary>The logical "not" value.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaQuery.type">
            <summary>The type.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaQuery.expressions">
            <summary>The expressions.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaQuery.#ctor(System.String,System.Collections.Generic.IList{iText.StyledXmlParser.Css.Media.MediaExpression},System.Boolean,System.Boolean)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaQuery"/>
            instance.
            </summary>
            <param name="type">the type</param>
            <param name="expressions">the expressions</param>
            <param name="only">logical "only" value</param>
            <param name="not">logical "not" value</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaQuery.Matches(iText.StyledXmlParser.Css.Media.MediaDeviceDescription)">
            <summary>Tries to match a device description with the media query.</summary>
            <param name="deviceDescription">the device description</param>
            <returns>true, if successful</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Media.MediaQueryParser">
            <summary>
            Utilities class that parses
            <see cref="T:System.String"/>
            values into
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaQuery"/>
            or
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaExpression"/>
            values.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaQueryParser.#ctor">
            <summary>
            Creates a
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaQueryParser"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaQueryParser.ParseMediaQueries(System.String)">
            <summary>
            Parses a
            <see cref="T:System.String"/>
            into a
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaQuery"/>
            values.
            </summary>
            <param name="mediaQueriesStr">
            the media queries in the form of a
            <see cref="T:System.String"/>
            </param>
            <returns>
            the resulting
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaQuery"/>
            values
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaQueryParser.ParseMediaQuery(System.String)">
            <summary>
            Parses a
            <see cref="T:System.String"/>
            into a
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaQuery"/>
            value.
            </summary>
            <param name="mediaQueryStr">
            the media query in the form of a
            <see cref="T:System.String"/>
            </param>
            <returns>
            the resulting
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaQuery"/>
            value
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaQueryParser.ParseMediaExpressions(System.String,System.Boolean)">
            <summary>
            Parses a
            <see cref="T:System.String"/>
            into a list of
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaExpression"/>
            values.
            </summary>
            <param name="mediaExpressionsStr">
            the media expressions in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="shallStartWithAnd">indicates if the media expression shall start with "and"</param>
            <returns>
            the resulting list of
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaExpression"/>
            values
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaQueryParser.ParseMediaExpression(System.String)">
            <summary>
            Parses a
            <see cref="T:System.String"/>
            into a
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaExpression"/>
            value.
            </summary>
            <param name="mediaExpressionStr">
            the media expression in the form of a
            <see cref="T:System.String"/>
            </param>
            <returns>
            the resulting
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaExpression"/>
            value
            </returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Media.MediaRuleConstants">
            <summary>Class that bundles a series of media rule constants.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaRuleConstants.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaRuleConstants"/>
            instance.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaRuleConstants.AND">
            <summary>The Constant AND.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaRuleConstants.MIN">
            <summary>The Constant MIN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaRuleConstants.MAX">
            <summary>The Constant MAX.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaRuleConstants.NOT">
            <summary>The Constant NOT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaRuleConstants.ONLY">
            <summary>The Constant ONLY.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Media.MediaType">
            <summary>
            Class that bundles all the media types and allows you to registered valid media types in a
            <see cref="!:Java.Util.Set&lt;E&gt;"/>.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaType.registeredMediaTypes">
            <summary>The Constant registeredMediaTypes.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaType.ALL">
            <summary>The Constant ALL.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaType.AURAL">
            <summary>The Constant AURAL.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaType.BRAILLE">
            <summary>The Constant BRAILLE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaType.EMBOSSED">
            <summary>The Constant EMBOSSED.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaType.HANDHELD">
            <summary>The Constant HANDHELD.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaType.PRINT">
            <summary>The Constant PRINT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaType.PROJECTION">
            <summary>The Constant PROJECTION.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaType.SCREEN">
            <summary>The Constant SCREEN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaType.SPEECH">
            <summary>The Constant SPEECH.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaType.TTY">
            <summary>The Constant TTY.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Media.MediaType.TV">
            <summary>The Constant TV.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaType.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Media.MediaType"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaType.IsValidMediaType(System.String)">
            <summary>Checks if a media type is registered as a valid media type.</summary>
            <param name="mediaType">the media type</param>
            <returns>true, if it's a valid media type</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Media.MediaType.RegisterMediaType(System.String)">
            <summary>Registers a media type.</summary>
            <param name="mediaType">the media type</param>
            <returns>the string</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Page.CssMarginRule">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.CssNestedAtRule"/>
            implementation for margins.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Page.CssMarginRule.pageSelectors">
            <summary>The page selectors.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.CssMarginRule.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Page.CssMarginRule"/>
            instance.
            </summary>
            <param name="ruleName">the rule name</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.CssMarginRule.SetPageSelectors(System.Collections.Generic.IList{iText.StyledXmlParser.Css.Selector.ICssSelector})">
            <summary>Sets the page selectors.</summary>
            <param name="pageSelectors">the new page selectors</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Page.CssNonStandardRuleSet">
            <summary>
            Class for a non standard
            <see cref="T:iText.StyledXmlParser.Css.CssRuleSet"/>.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.CssNonStandardRuleSet.#ctor(iText.StyledXmlParser.Css.Selector.ICssSelector,System.Collections.Generic.IList{iText.StyledXmlParser.Css.CssDeclaration})">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Page.CssNonStandardRuleSet"/>
            instance.
            </summary>
            <param name="selector">the selector</param>
            <param name="declarations">the declarations</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Page.CssPageRule">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.CssNestedAtRule"/>
            implementation for page rules.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Page.CssPageRule.pageSelectors">
            <summary>The page selectors.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.CssPageRule.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Page.CssPageRule"/>
            instance.
            </summary>
            <param name="ruleParameters">the rule parameters</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Page.PageContextConstants">
            <summary>Class that bundles a series of page context constants.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Page.PageContextConstants.BLANK">
            <summary>The Constant BLANK.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Page.PageContextConstants.FIRST">
            <summary>The Constant FIRST.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Page.PageContextConstants.LEFT">
            <summary>The Constant LEFT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Page.PageContextConstants.RIGHT">
            <summary>The Constant RIGHT.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Page.PageContextNode">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.CssContextNode"/>
            implementation for page contexts.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Page.PageContextNode.pageTypeName">
            <summary>The page type name.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Page.PageContextNode.pageClasses">
            <summary>The page classes.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.PageContextNode.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Page.PageContextNode"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.PageContextNode.#ctor(iText.StyledXmlParser.Node.INode)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Page.PageContextNode"/>
            instance.
            </summary>
            <param name="parentNode">the parent node</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.PageContextNode.AddPageClass(System.String)">
            <summary>Adds a page class.</summary>
            <param name="pageClass">the page class</param>
            <returns>the page context node</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.PageContextNode.GetPageTypeName">
            <summary>Gets the page type name.</summary>
            <returns>the page type name</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.PageContextNode.SetPageTypeName(System.String)">
            <summary>Sets the page type name.</summary>
            <param name="pageTypeName">the page type name</param>
            <returns>the page context node</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.PageContextNode.GetPageClasses">
            <summary>Gets the list of page classes.</summary>
            <returns>the page classes</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Page.PageMarginBoxContextNode">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.CssContextNode"/>
            implementation for page margin box contexts.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Page.PageMarginBoxContextNode.PAGE_MARGIN_BOX_TAG">
            <summary>The Constant PAGE_MARGIN_BOX_TAG.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Page.PageMarginBoxContextNode.marginBoxName">
            <summary>The margin box name.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.PageMarginBoxContextNode.#ctor(iText.StyledXmlParser.Node.INode,System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Page.PageMarginBoxContextNode"/>
            instance.
            </summary>
            <param name="parentNode">the parent node</param>
            <param name="marginBoxName">the margin box name</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.PageMarginBoxContextNode.GetMarginBoxName">
            <summary>Gets the margin box name.</summary>
            <returns>the margin box name</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.PageMarginBoxContextNode.SetPageMarginBoxRectangle(iText.Kernel.Geom.Rectangle)">
            <summary>Sets the rectangle in which page margin box contents are shown.</summary>
            <param name="pageMarginBoxRectangle">
            the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            defining position and dimensions of the margin box content
            area
            </param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.PageMarginBoxContextNode.GetPageMarginBoxRectangle">
            <summary>Gets the rectangle in which page margin box contents should be shown.</summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            defining position and dimensions of the margin box content area
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.PageMarginBoxContextNode.SetContainingBlockForMarginBox(iText.Kernel.Geom.Rectangle)">
            <summary>
            Sets the containing block rectangle for the margin box, which is used for calculating
            some of the margin box properties relative values.
            </summary>
            <param name="containingBlockForMarginBox">
            the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            which is used as a reference for some
            margin box relative properties calculations.
            </param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.PageMarginBoxContextNode.GetContainingBlockForMarginBox">
            <returns>
            the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            which is used as a reference for some
            margin box relative properties calculations.
            </returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Page.PageMarginBoxContextNode.AttributesStub">
            <summary>
            A simple
            <see cref="T:iText.StyledXmlParser.Node.IAttributes"/>
            implementation.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.PageMarginBoxContextNode.AttributesStub.GetAttribute(System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.PageMarginBoxContextNode.AttributesStub.SetAttribute(System.String,System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.PageMarginBoxContextNode.AttributesStub.Size">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.PageMarginBoxContextNode.AttributesStub.GetEnumerator">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Page.PageMarginBoxContextNode.AttributesStub.System#Collections#IEnumerable#GetEnumerator">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer">
            <summary>Tokenizer for CSS declaration values.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.src">
            <summary>The source string.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.index">
            <summary>The current index.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.stringQuote">
            <summary>The quote string, either "'" or "\"".</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.inString">
            <summary>Indicates if we're inside a string.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.functionDepth">
            <summary>The depth.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer"/>
            instance.
            </summary>
            <param name="propertyValue">the property value</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.GetNextValidToken">
            <summary>Gets the next valid token.</summary>
            <returns>the next valid token</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.GetNextToken">
            <summary>Gets the next token.</summary>
            <returns>the next token</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.IsHexDigit(System.Char)">
            <summary>Checks if a character is a hexadecimal digit.</summary>
            <param name="c">the character</param>
            <returns>true, if it's a hexadecimal digit</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.ProcessFunctionToken(iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.Token,System.Text.StringBuilder)">
            <summary>Processes a function token.</summary>
            <param name="token">the token</param>
            <param name="functionBuffer">the function buffer</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.Token">
            <summary>The Token class.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.Token.value">
            <summary>The value.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.Token.type">
            <summary>The type.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.Token.#ctor(System.String,iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.TokenType)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.Token"/>
            instance.
            </summary>
            <param name="value">the value</param>
            <param name="type">the type</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.Token.GetValue">
            <summary>Gets the value.</summary>
            <returns>the value</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.Token.GetType">
            <summary>Gets the type.</summary>
            <returns>the type</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.Token.IsString">
            <summary>Checks if the token is a string.</summary>
            <returns>true, if is string</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.TokenType">
            <summary>Enumeration of the different token types.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.TokenType.STRING">
            <summary>The string type.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.TokenType.FUNCTION">
            <summary>The function type.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.TokenType.COMMA">
            <summary>The comma type.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.CssDeclarationValueTokenizer.TokenType.UNKNOWN">
            <summary>Unknown type.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Parse.CssPageSelectorParser">
            <summary>Utilities class to parse CSS page selectors.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.CssPageSelectorParser.PAGE_SELECTOR_PATTERN_STR">
            <summary>The pattern string for page selectors.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.CssPageSelectorParser.selectorPattern">
            <summary>The pattern for page selectors.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssPageSelectorParser.ParseSelectorItems(System.String)">
            <summary>
            Parses the selector items into a list of
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.ICssSelectorItem"/>
            instances.
            </summary>
            <param name="selectorItemsStr">
            the selector items in the form of a
            <see cref="T:System.String"/>
            </param>
            <returns>
            the resulting list of
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.ICssSelectorItem"/>
            instances
            </returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Parse.CssRuleSetParser">
            <summary>Utilities class to parse CSS rule sets.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.CssRuleSetParser.logger">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssRuleSetParser.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Parse.CssRuleSetParser"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssRuleSetParser.ParsePropertyDeclarations(System.String)">
            <summary>Parses property declarations.</summary>
            <param name="propertiesStr">
            the property declarations in the form of a
            <see cref="T:System.String"/>
            </param>
            <returns>
            the list of
            <see cref="T:iText.StyledXmlParser.Css.CssDeclaration"/>
            instances
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssRuleSetParser.ParseRuleSet(System.String,System.String)">
            <summary>
            Parses a rule set into a list of
            <see cref="T:iText.StyledXmlParser.Css.CssRuleSet"/>
            instances.
            </summary>
            <remarks>
            Parses a rule set into a list of
            <see cref="T:iText.StyledXmlParser.Css.CssRuleSet"/>
            instances.
            This method returns a
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            because a selector can
            be compound, like "p, div, #navbar".
            </remarks>
            <param name="selectorStr">the selector</param>
            <param name="propertiesStr">the properties</param>
            <returns>
            the resulting list of
            <see cref="T:iText.StyledXmlParser.Css.CssRuleSet"/>
            instances
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssRuleSetParser.SplitCssProperty(System.String)">
            <summary>
            Splits CSS properties into an array of
            <see cref="T:System.String"/>
            values.
            </summary>
            <param name="property">the properties</param>
            <returns>the array of property values</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssRuleSetParser.GetSemicolonPosition(System.String,System.Int32)">
            <summary>Gets the semicolon position.</summary>
            <param name="propertiesStr">the properties</param>
            <param name="fromIndex">the from index</param>
            <returns>the semicolon position</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Parse.CssSelectorParser">
            <summary>Utilities class to parse a CSS selector.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.CssSelectorParser.LEGACY_PSEUDO_ELEMENTS">
            <summary>Set of legacy pseudo elements (first-line, first-letter, before, after).</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.CssSelectorParser.SELECTOR_PATTERN_STR">
            <summary>The pattern string for selectors.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.CssSelectorParser.selectorPattern">
            <summary>The pattern for selectors.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssSelectorParser.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Parse.CssSelectorParser"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssSelectorParser.ParseSelectorItems(System.String)">
            <summary>Parses the selector items.</summary>
            <param name="selector">
            the selectors in the form of a
            <see cref="T:System.String"/>
            </param>
            <returns>
            the resulting list of
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.ICssSelectorItem"/>
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssSelectorParser.AppendPseudoSelector(System.Collections.Generic.IList{iText.StyledXmlParser.Css.Selector.Item.ICssSelectorItem},System.String,iText.Commons.Utils.Matcher,System.String)">
            <summary>Resolves a pseudo selector and appends it to list.</summary>
            <param name="selectorItems">list of items to which new selector will be added to</param>
            <param name="pseudoSelector">the pseudo selector</param>
            <param name="match">
            the corresponding
            <see cref="T:iText.Commons.Utils.Matcher"/>.
            </param>
            <param name="source">is the original source</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssSelectorParser.HandleBracketsOfPseudoSelector(System.String,iText.Commons.Utils.Matcher,System.String)">
            <summary>Resolves a pseudo selector if it contains brackets.</summary>
            <remarks>
            Resolves a pseudo selector if it contains brackets. Updates internal state of
            <see cref="T:iText.Commons.Utils.Matcher"/>
            if necessary.
            </remarks>
            <param name="pseudoSelector">the pseudo selector</param>
            <param name="match">
            the corresponding
            <see cref="T:iText.Commons.Utils.Matcher"/>.
            </param>
            <param name="source">is the original source</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Parse.CssSelectorParserMatch">
            <summary>Internal class not for public use.</summary>
            <remarks>Internal class not for public use. Its API may change.</remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssSelectorParserMatch.#ctor(System.String,System.Text.RegularExpressions.Regex)">
            <summary>Construct a new CssSelectorParserMatch</summary>
            <param name="source">the text being matched</param>
            <param name="pattern">the pattern against which the text is being matched</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssSelectorParserMatch.GetIndex">
            <summary>Get the index at which the last match started</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssSelectorParserMatch.GetValue">
            <summary>Get the text of the last match</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssSelectorParserMatch.GetSource">
            <summary>Get the source text being matched</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssSelectorParserMatch.Success">
            <summary>Return whether or not the match was successful</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssSelectorParserMatch.Next">
            <summary>Attempt to match the pattern against the next piece of the source text</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssSelectorParserMatch.Next(System.Int32)">
            <summary>Get the index at which the next match of the pattern takes place</summary>
            <param name="startIndex">the index at which to start matching the pattern</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Parse.CssStyleSheetParser">
            <summary>Utilities class to parse a CSS style sheet.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssStyleSheetParser.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Parse.CssStyleSheetParser"/>.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssStyleSheetParser.Parse(System.IO.Stream,System.String)">
            <summary>
            Parses a stream into a
            <see cref="T:iText.StyledXmlParser.Css.Parse.CssRuleSetParser"/>.
            </summary>
            <param name="stream">the stream</param>
            <param name="baseUrl">the base url</param>
            <returns>
            the resulting
            <see cref="T:iText.StyledXmlParser.Css.CssStyleSheet"/>
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssStyleSheetParser.Parse(System.IO.Stream)">
            <summary>
            Parses a stream into a
            <see cref="T:iText.StyledXmlParser.Css.CssStyleSheet"/>.
            </summary>
            <param name="stream">the stream</param>
            <returns>
            the resulting
            <see cref="T:iText.StyledXmlParser.Css.CssStyleSheet"/>
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssStyleSheetParser.Parse(System.String,System.String)">
            <summary>
            Parses a string into a
            <see cref="T:iText.StyledXmlParser.Css.CssStyleSheet"/>.
            </summary>
            <param name="data">the style sheet data</param>
            <param name="baseUrl">the base url</param>
            <returns>
            the resulting
            <see cref="T:iText.StyledXmlParser.Css.CssStyleSheet"/>
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.CssStyleSheetParser.Parse(System.String)">
            <summary>
            Parses a string into a
            <see cref="T:iText.StyledXmlParser.Css.CssStyleSheet"/>.
            </summary>
            <param name="data">the data</param>
            <returns>
            the resulting
            <see cref="T:iText.StyledXmlParser.Css.CssStyleSheet"/>
            </returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Parse.Syntax.AtRuleBlockState">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Parse.Syntax.IParserState"/>
            implementation for the At-rule state.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.AtRuleBlockState.controller">
            <summary>The state machine that parses the CSS.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.AtRuleBlockState.#ctor(iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Parse.Syntax.AtRuleBlockState"/>
            instance.
            </summary>
            <param name="controller">the state machine that parses the CSS</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Parse.Syntax.BlockState">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Parse.Syntax.IParserState"/>
            implementation for the block state.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.BlockState.controller">
            <summary>The state machine that parses the CSS.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.BlockState.#ctor(iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Parse.Syntax.BlockState"/>
            instance.
            </summary>
            <param name="controller">the state machine that parses the CSS</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Parse.Syntax.CommentEndState">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Parse.Syntax.IParserState"/>
            implementation for the end comment state.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CommentEndState.controller">
            <summary>The state machine that parses the CSS.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CommentEndState.#ctor(iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Parse.Syntax.CommentEndState"/>
            instance.
            </summary>
            <param name="controller">the state machine that parses the CSS</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Parse.Syntax.CommentInnerState">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Parse.Syntax.IParserState"/>
            implementation for the inner comment state.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CommentInnerState.controller">
            <summary>The state machine that parses the CSS.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CommentInnerState.#ctor(iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Parse.Syntax.CommentInnerState"/>
            instance.
            </summary>
            <param name="controller">the state machine that parses the CSS</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Parse.Syntax.CommentStartState">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Parse.Syntax.IParserState"/>
            implementation for the start comment state.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CommentStartState.controller">
            <summary>The state machine that parses the CSS.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CommentStartState.#ctor(iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Parse.Syntax.CommentStartState"/>
            instance.
            </summary>
            <param name="controller">the state machine that parses the CSS</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Parse.Syntax.ConditionalGroupAtRuleBlockState">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Parse.Syntax.IParserState"/>
            implementation for the conditional group At-rule state.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.ConditionalGroupAtRuleBlockState.controller">
            <summary>The state machine that parses the CSS.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.ConditionalGroupAtRuleBlockState.#ctor(iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Parse.Syntax.ConditionalGroupAtRuleBlockState"/>
            instance.
            </summary>
            <param name="controller">the state machine that parses the CSS</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController">
            <summary>State machine that will parse content into a style sheet.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.currentState">
            <summary>The current state.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.isCurrentRuleSupported">
            <summary>Indicates if the current rule is supported.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.previousActiveState">
            <summary>The previous active state (excluding comments).</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.buffer">
            <summary>A buffer to store temporary results.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.currentSelector">
            <summary>The current selector.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.styleSheet">
            <summary>The style sheet.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.nestedAtRules">
            <summary>The nested At-rules.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.storedPropertiesWithoutSelector">
            <summary>The stored properties without selector.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.SUPPORTED_RULES">
            <summary>Set of the supported rules.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.CONDITIONAL_GROUP_RULES">
            <summary>Set of conditional group rules.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.commentStartState">
            <summary>The comment start state.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.commendEndState">
            <summary>The commend end state.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.commendInnerState">
            <summary>The commend inner state.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.unknownState">
            <summary>The unknown state.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.ruleState">
            <summary>The rule state.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.propertiesState">
            <summary>The properties state.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.conditionalGroupAtRuleBlockState">
            <summary>The conditional group at rule block state.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.atRuleBlockState">
            <summary>The At-rule block state.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.uriResolver">
            <summary>The URI resolver.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController"/>
            instance.
            </summary>
            <param name="baseUrl">the base URL</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.Process(System.Char)">
            <summary>Process a character using the current state.</summary>
            <param name="ch">the character</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.GetParsingResult">
            <summary>Gets the resulting style sheet.</summary>
            <returns>the resulting style sheet</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.AppendToBuffer(System.Char)">
            <summary>Appends a character to the buffer.</summary>
            <param name="ch">the character</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.GetBufferContents">
            <summary>Gets the contents of the buffer.</summary>
            <returns>the buffer contents</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.ResetBuffer">
            <summary>Resets the buffer.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.EnterPreviousActiveState">
            <summary>Enter the previous active state.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.EnterCommentStartState">
            <summary>Enter the comment start state.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.EnterCommentEndState">
            <summary>Enter the comment end state.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.EnterCommentInnerState">
            <summary>Enter the comment inner state.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.EnterRuleState">
            <summary>Enter the rule state.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.EnterUnknownStateIfNestedBlocksFinished">
            <summary>Enter the unknown state if nested blocks are finished.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.EnterRuleStateBasedOnItsType">
            <summary>Enter the rule state, based on whether the current state is unsupported or conditional.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.EnterUnknownState">
            <summary>Enter the unknown state.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.EnterAtRuleBlockState">
            <summary>Enter the At-rule block state.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.EnterConditionalGroupAtRuleBlockState">
            <summary>Enter the conditional group At-rule block state.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.EnterPropertiesState">
            <summary>Enter the properties state.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.StoreCurrentSelector">
            <summary>Store the current selector.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.StoreCurrentProperties">
            <summary>Store the current properties.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.StoreCurrentPropertiesWithoutSelector">
            <summary>Store the current properties without selector.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.StoreSemicolonAtRule">
            <summary>Store the semicolon At-rule.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.FinishAtRuleBlock">
            <summary>Finish the At-rule block.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.PushBlockPrecedingAtRule">
            <summary>Push the block preceding At-rule.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.SaveActiveState">
            <summary>Save the active state.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.SetState(iText.StyledXmlParser.Css.Parse.Syntax.IParserState)">
            <summary>Sets the current state.</summary>
            <param name="state">the new state</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.ProcessProperties(System.String,System.String)">
            <summary>Processes the properties.</summary>
            <param name="selector">the selector</param>
            <param name="properties">the properties</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.ProcessProperties(System.String)">
            <summary>Processes the properties.</summary>
            <param name="properties">the properties</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.NormalizeDeclarationURIs(System.Collections.Generic.IList{iText.StyledXmlParser.Css.CssDeclaration})">
            <summary>Normalizes the declaration URIs.</summary>
            <param name="declarations">the declarations</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.ProcessSemicolonAtRule(System.String)">
            <summary>Processes the semicolon At-rule.</summary>
            <param name="ruleStr">the rule str</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.ProcessFinishedAtRuleBlock(iText.StyledXmlParser.Css.CssNestedAtRule)">
            <summary>Processes the finished At-rule block.</summary>
            <param name="atRule">the at rule</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.IsCurrentRuleSupported">
            <summary>Checks if is current rule is supported.</summary>
            <returns>true, if the current rule is supported</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController.CurrentAtRuleIsConditionalGroupRule">
            <summary>Checks if the current At-rule is a conditional group rule (or if it's unsupported).</summary>
            <returns>true, if the current At-rule is unsupported or conditional</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Parse.Syntax.IParserState">
            <summary>Interface for all parser state implementations.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.IParserState.Process(System.Char)">
            <summary>Process a character.</summary>
            <param name="ch">the character</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Parse.Syntax.RuleState">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Parse.Syntax.IParserState"/>
            implementation for the rule state.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.RuleState.controller">
            <summary>The state machine that parses the CSS.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.RuleState.#ctor(iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Parse.Syntax.RuleState"/>
            instance.
            </summary>
            <param name="controller">the state machine that parses the CSS</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Parse.Syntax.UnknownState">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Parse.Syntax.IParserState"/>
            implementation for the unknown state.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Parse.Syntax.UnknownState.controller">
            <summary>The state machine that parses the CSS.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Parse.Syntax.UnknownState.#ctor(iText.StyledXmlParser.Css.Parse.Syntax.CssParserStateController)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Parse.Syntax.UnknownState"/>
            instance.
            </summary>
            <param name="controller">the state machine that parses the CSS</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementNode">
            <summary>
            <see cref="T:iText.StyledXmlParser.Node.IElementNode"/>
            implementation for pseudo elements.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementNode.pseudoElementName">
            <summary>The pseudo element name.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementNode.pseudoElementTagName">
            <summary>The pseudo element tag name.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementNode.#ctor(iText.StyledXmlParser.Node.INode,System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementNode"/>
            instance.
            </summary>
            <param name="parentNode">the parent node</param>
            <param name="pseudoElementName">the pseudo element name</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementNode.GetPseudoElementName">
            <summary>Gets the pseudo element name.</summary>
            <returns>the pseudo element name</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementNode.Name">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementNode.GetAttributes">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementNode.GetAttribute(System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementNode.GetAdditionalHtmlStyles">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementNode.AddAdditionalHtmlStyles(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementNode.GetLang">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementNode.AttributesStub">
            <summary>
            A simple
            <see cref="T:iText.StyledXmlParser.Node.IAttributes"/>
            implementation.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementNode.AttributesStub.GetAttribute(System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementNode.AttributesStub.SetAttribute(System.String,System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementNode.AttributesStub.Size">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementNode.AttributesStub.GetEnumerator">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementNode.AttributesStub.System#Collections#IEnumerable#GetEnumerator">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementUtil">
            <summary>Utilities class for pseudo elements.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementUtil.TAG_NAME_PREFIX">
            <summary>The prefix for pseudo elements.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementUtil.CreatePseudoElementTagName(System.String)">
            <summary>Creates the pseudo element tag name.</summary>
            <param name="pseudoElementName">the pseudo element name</param>
            <returns>the tag name</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Pseudo.CssPseudoElementUtil.HasBeforeAfterElements(iText.StyledXmlParser.Node.IElementNode)">
            <summary>Checks for before or after elements.</summary>
            <param name="node">the node</param>
            <returns>true, if successful</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.AbstractCssContext">
            <summary>Container for CSS context properties that influence CSS resolution.</summary>
            <remarks>
            Container for CSS context properties that influence CSS resolution.
            This class only contains properties relevant for any generic XML+CSS combo:
            specific properties must be implemented in a project-specific subclass.
            Used by
            <see cref="T:iText.StyledXmlParser.Css.ICssResolver"/>.
            </remarks>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.AbstractCssContext.quotesDepth">
            <summary>The quotes depth.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.AbstractCssContext.GetQuotesDepth">
            <summary>Gets the quotes depth.</summary>
            <returns>the quotes depth</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.AbstractCssContext.SetQuotesDepth(System.Int32)">
            <summary>Sets the quotes depth.</summary>
            <param name="quotesDepth">the new quotes depth</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.CssContentElementNode">
            <summary><see cref="T:iText.StyledXmlParser.Node.IElementNode"/> implementation for content nodes.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.attributes">
            <summary>The attributes</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.tagName">
            <summary>The tag name</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.#ctor(iText.StyledXmlParser.Node.INode,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Creates a new <see cref="T:iText.StyledXmlParser.Css.Resolve.CssContentElementNode"/> instance.</summary>
            <param name="parentNode">the parent node</param>
            <param name="pseudoElementName">the pseudo element name</param>
            <param name="attributes">the attributes</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.Name">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.GetAttributes">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.GetAttribute(System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.GetAdditionalHtmlStyles">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.AddAdditionalHtmlStyles(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.GetLang">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.Attributes">
            <summary>Simple <see cref="T:iText.StyledXmlParser.Node.IAttributes"/> implementation.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.Attributes.attributes">
            <summary>The attributes.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.Attributes.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Creates a new <see cref="T:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.Attributes"/> instance.</summary>
            <param name="attributes">the attributes</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.Attributes.GetAttribute(System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.Attributes.SetAttribute(System.String,System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.Attributes.Size">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.Attributes.GetEnumerator">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.Attributes.System#Collections#IEnumerable#GetEnumerator">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.Attribute">
            <summary>Simple <see cref="T:iText.StyledXmlParser.Node.IAttributes"/> implementation.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.Attribute.entry">
            <summary>The entry.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.Attribute.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>Creates a new <see cref="T:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.Attribute"/> instance.</summary>
            <param name="entry">the entry</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.Attribute.GetKey">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.Attribute.GetValue">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.AttributeIterator">
            <summary> <see cref="T:iText.StyledXmlParser.Node.IAttribute"/> iterator.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.AttributeIterator.iterator">
            <summary>The iterator.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.AttributeIterator.#ctor(System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>Creates a new <see cref="T:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.AttributeIterator"/> instance.</summary>
            <param name="iterator">the iterator</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.AttributeIterator.Dispose">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.AttributeIterator.MoveNext">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.AttributeIterator.Reset">
            <summary><inheritDoc/></summary>
        </member>
        <member name="P:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.AttributeIterator.Current">
            <summary><inheritDoc/></summary>
        </member>
        <member name="P:iText.StyledXmlParser.Css.Resolve.CssContentElementNode.AttributeIterator.System#Collections#IEnumerator#Current">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.CssDefaults">
            <summary>Helper class that allows you to get the default values of CSS properties.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.CssDefaults.defaultValues">
            <summary>A map with properties and their default values.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssDefaults.GetDefaultValue(System.String)">
            <summary>Gets the default value of a property.</summary>
            <param name="property">the property</param>
            <returns>the default value</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.CssInheritance">
            <summary>Helper class that allows you to check if a property is inheritable.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.CssInheritance.INHERITABLE_PROPERTIES">
            <summary>
            Set of inheritable properties
            in accordance with "http://www.w3schools.com/cssref/"
            and "https://developer.mozilla.org/en-US/docs/Web/CSS/Reference"
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssInheritance.IsInheritable(System.String)">
            <summary>Checks if a property is inheritable.</summary>
            <param name="cssProperty">the CSS property</param>
            <returns>true, if the property is inheritable</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.CssPropertyMerger">
            <summary>Utilities class to merge CSS properties.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssPropertyMerger.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Resolve.CssPropertyMerger"/>
            class.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssPropertyMerger.MergeTextDecoration(System.String,System.String)">
            <summary>Merges text decoration.</summary>
            <param name="firstValue">the first value</param>
            <param name="secondValue">the second value</param>
            <returns>the merged value</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssPropertyMerger.NormalizeTextDecoration(System.String)">
            <summary>Normalizes text decoration values.</summary>
            <param name="value">the text decoration value</param>
            <returns>a set of normalized decoration values</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.CssQuotes">
            <summary>Helper class to deal with quoted values in strings.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.CssQuotes.EMPTY_QUOTE">
            <summary>The empty quote value.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.CssQuotes.openQuotes">
            <summary>The open quotes.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.CssQuotes.closeQuotes">
            <summary>The close quotes.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssQuotes.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Resolve.CssQuotes"/>
            instance.
            </summary>
            <param name="openQuotes">the open quotes</param>
            <param name="closeQuotes">the close quotes</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssQuotes.CreateQuotes(System.String,System.Boolean)">
            <summary>
            Creates a
            <see cref="T:iText.StyledXmlParser.Css.Resolve.CssQuotes"/>
            instance.
            </summary>
            <param name="quotesString">the quotes string</param>
            <param name="fallbackToDefault">indicates whether it's OK to fall back to the default</param>
            <returns>
            the resulting
            <see cref="T:iText.StyledXmlParser.Css.Resolve.CssQuotes"/>
            instance
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssQuotes.CreateDefaultQuotes">
            <summary>
            Creates the default
            <see cref="T:iText.StyledXmlParser.Css.Resolve.CssQuotes"/>
            instance.
            </summary>
            <returns>
            the
            <see cref="T:iText.StyledXmlParser.Css.Resolve.CssQuotes"/>
            instance
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssQuotes.ResolveQuote(System.String,iText.StyledXmlParser.Css.Resolve.AbstractCssContext)">
            <summary>Resolves quotes.</summary>
            <param name="value">the value</param>
            <param name="context">the CSS context</param>
            <returns>the quote string</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssQuotes.IncreaseDepth(iText.StyledXmlParser.Css.Resolve.AbstractCssContext)">
            <summary>Increases the quote depth.</summary>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssQuotes.DecreaseDepth(iText.StyledXmlParser.Css.Resolve.AbstractCssContext)">
            <summary>Decreases the quote depth.</summary>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.CssQuotes.GetQuote(System.Int32,System.Collections.Generic.List{System.String})">
            <summary>Gets the quote.</summary>
            <param name="depth">the depth</param>
            <param name="quotes">the quotes</param>
            <returns>the requested quote string</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.IStyleInheritance">
            <summary>Interface for attribute and style-inheritance logic</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.IStyleInheritance.IsInheritable(System.String)">
            <summary>Checks if a property or attribute is inheritable is inheritable.</summary>
            <param name="propertyIdentifier">the identifier for property</param>
            <returns>true, if the property is inheritable, false otherwise</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver">
            <summary>
            Abstract
            <see cref="T:iText.StyledXmlParser.Css.Resolve.Shorthand.IShorthandResolver"/>
            implementation for borders.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver._0_WIDTH">
            <summary>The template for -width properties.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver._0_STYLE">
            <summary>The template for -style properties.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver._0_COLOR">
            <summary>The template for -color properties.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver.GetPrefix">
            <summary>Gets the prefix of a property.</summary>
            <returns>the prefix</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver">
            <summary>
            Abstract
            <see cref="T:iText.StyledXmlParser.Css.Resolve.Shorthand.IShorthandResolver"/>
            implementation for box definitions.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver._0_LEFT_1">
            <summary>The template for -left properties.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver._0_RIGHT_1">
            <summary>The template for -right properties.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver._0_BOTTOM_1">
            <summary>The template for -bottom properties.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver._0_TOP_1">
            <summary>The template for -top properties.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver.GetPrefix">
            <summary>Gets the prefix of a property.</summary>
            <returns>the prefix</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver.GetPostfix">
            <summary>Gets the postfix of a property.</summary>
            <returns>the postfix</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractCornersShorthandResolver">
            <summary>
            Abstract
            <see cref="T:iText.StyledXmlParser.Css.Resolve.Shorthand.IShorthandResolver"/>
            implementation for corners definitions.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractCornersShorthandResolver._0_BOTTOM_LEFT_1">
            <summary>The template for -bottom-left properties.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractCornersShorthandResolver._0_BOTTOM_RIGHT_1">
            <summary>The template for -bottom-right properties.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractCornersShorthandResolver._0_TOP_LEFT_1">
            <summary>The template for -top-left properties.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractCornersShorthandResolver._0_TOP_RIGHT_1">
            <summary>The template for -top-right properties.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractCornersShorthandResolver.GetPrefix">
            <summary>Gets the prefix of a property.</summary>
            <returns>the prefix</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractCornersShorthandResolver.GetPostfix">
            <summary>Gets the postfix of a property.</summary>
            <returns>the postfix</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.BackgroundPositionShorthandResolver">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Resolve.Shorthand.IShorthandResolver"/>
            implementation for background-position.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.BackgroundPositionShorthandResolver.ResolveShorthand(System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.BackgroundShorthandResolver">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Resolve.Shorthand.IShorthandResolver"/>
            implementation for backgrounds.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.BackgroundShorthandResolver.PutPropertyBasedOnType(iText.StyledXmlParser.Css.Util.CssBackgroundUtils.BackgroundPropertyType,System.String,System.Collections.Generic.IDictionary{iText.StyledXmlParser.Css.Util.CssBackgroundUtils.BackgroundPropertyType,System.String},System.Collections.Generic.ICollection{iText.StyledXmlParser.Css.Util.CssBackgroundUtils.BackgroundPropertyType})">
            <summary>Registers a property based on its type.</summary>
            <param name="type">the property type</param>
            <param name="value">the property value</param>
            <param name="resolvedProps">the resolved properties</param>
            <param name="usedTypes">already used types</param>
            <returns>false if the property is invalid. True in all other cases</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.BorderBottomShorthandResolver">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver"/>
            implementation for bottom borders.
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.BorderColorShorthandResolver">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver"/>
            implementation for border colors.
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.BorderLeftShorthandResolver">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver"/>
            implementation for left borders.
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.BorderRadiusShorthandResolver">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractCornersShorthandResolver"/>
            implementation for border radius.
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.BorderRightShorthandResolver">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver"/>
            implementation for right borders.
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.BorderShorthandResolver">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver"/>
            implementation for borders.
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.BorderStyleShorthandResolver">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver"/>
            implementation for border styles.
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.BorderTopShorthandResolver">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver"/>
            implementation for top borders.
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.BorderWidthShorthandResolver">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver"/>
            implementation for border widths.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.FlexFlowShorthandResolver.ResolveShorthand(System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.FlexShorthandResolver.ResolveShorthand(System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.FontShorthandResolver">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Resolve.Shorthand.IShorthandResolver"/>
            implementation for fonts.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.FontShorthandResolver.UNSUPPORTED_VALUES_OF_FONT_SHORTHAND">
            <summary>Unsupported shorthand values.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.FontShorthandResolver.FONT_WEIGHT_NOT_DEFAULT_VALUES">
            <summary>Font weight values.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.FontShorthandResolver.FONT_SIZE_VALUES">
            <summary>Font size values.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.FontShorthandResolver.GetFontProperties(System.String)">
            <summary>Gets the font properties.</summary>
            <param name="shorthandExpression">the shorthand expression</param>
            <returns>the font properties</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.GapShorthandResolver.ResolveShorthand(System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.ListStyleShorthandResolver">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Resolve.Shorthand.IShorthandResolver"/>
            implementation for list styles.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.ListStyleShorthandResolver.LIST_STYLE_TYPE_VALUES">
            <summary>The list style types (disc, decimal,...).</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.ListStyleShorthandResolver.LIST_STYLE_POSITION_VALUES">
            <summary>The list style positions (inside, outside).</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.MarginShorthandResolver">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver"/>
            implementation for margins.
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.OutlineShorthandResolver">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBorderShorthandResolver"/>
            implementation for outlines.
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.PaddingShorthandResolver">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.AbstractBoxShorthandResolver"/>
            implementation for paddings.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.Shorthand.Impl.PlaceItemsShorthandResolver.ResolveShorthand(System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.IShorthandResolver">
            <summary>Interface for shorthand resolvers.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.Shorthand.IShorthandResolver.ResolveShorthand(System.String)">
            <summary>Resolves a shorthand expression.</summary>
            <param name="shorthandExpression">the shorthand expression</param>
            <returns>a list of CSS declaration</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Resolve.Shorthand.ShorthandResolverFactory">
            <summary>A factory for creating ShorthandResolver objects.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Resolve.Shorthand.ShorthandResolverFactory.shorthandResolvers">
            <summary>The map of shorthand resolvers.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Resolve.Shorthand.ShorthandResolverFactory.GetShorthandResolver(System.String)">
            <summary>Gets a shorthand resolver.</summary>
            <param name="shorthandProperty">the property</param>
            <returns>the shorthand resolver</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Selector.AbstractCssSelector">
            <summary>Abstract superclass for CSS Selectors.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.AbstractCssSelector.selectorItems">
            <summary>The selector items.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.AbstractCssSelector.#ctor(System.Collections.Generic.IList{iText.StyledXmlParser.Css.Selector.Item.ICssSelectorItem})">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Selector.AbstractCssSelector"/>
            instance.
            </summary>
            <param name="selectorItems">the selector items</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Selector.CssPageMarginBoxSelector">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Selector.ICssSelector"/>
            implementation for CSS page margin box selectors.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.CssPageMarginBoxSelector.pageMarginBoxName">
            <summary>The page margin box name.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.CssPageMarginBoxSelector.pageSelector">
            <summary>The page selector.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.CssPageMarginBoxSelector.#ctor(System.String,iText.StyledXmlParser.Css.Selector.ICssSelector)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Selector.CssPageMarginBoxSelector"/>
            instance.
            </summary>
            <param name="pageMarginBoxName">the page margin box name</param>
            <param name="pageSelector">the page selector</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Selector.CssPageSelector">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Selector.ICssSelector"/>
            implementation for CSS page selectors.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.CssPageSelector.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Selector.CssPageSelector"/>
            instance.
            </summary>
            <param name="pageSelectorStr">the page selector</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Selector.CssSelector">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Selector.ICssSelector"/>
            implementation for CSS selectors.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.CssSelector.#ctor(System.Collections.Generic.IList{iText.StyledXmlParser.Css.Selector.Item.ICssSelectorItem})">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Selector.CssSelector"/>
            instance.
            </summary>
            <param name="selectorItems">the selector items</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.CssSelector.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Selector.CssSelector"/>
            instance.
            </summary>
            <param name="selector">the selector</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.CssSelector.Matches(iText.StyledXmlParser.Node.INode,System.Int32)">
            <summary>Checks if a node matches the selector.</summary>
            <param name="element">the node</param>
            <param name="lastSelectorItemInd">the index of the last selector</param>
            <returns>true, if there's a match</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Selector.CssSelectorComparator">
            <summary>Comparator class for CSS Selectors.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Selector.ICssSelector">
            <summary>Interface for CSS Selector classes.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.ICssSelector.CalculateSpecificity">
            <summary>Calculates the specificity.</summary>
            <returns>the specificity</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.ICssSelector.Matches(iText.StyledXmlParser.Node.INode)">
            <summary>Checks if a node matches the selector.</summary>
            <param name="node">the node</param>
            <returns>true, if the selector is a match for the node</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Selector.Item.CssAttributeSelectorItem">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.ICssSelectorItem"/>
            implementation for attribute selectors.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.Item.CssAttributeSelectorItem.property">
            <summary>The property.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.Item.CssAttributeSelectorItem.matchSymbol">
            <summary>The match symbol.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.Item.CssAttributeSelectorItem.value">
            <summary>The value.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.Item.CssAttributeSelectorItem.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.CssAttributeSelectorItem"/>
            instance.
            </summary>
            <param name="attrSelector">the attribute</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Selector.Item.CssClassSelectorItem">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.ICssSelectorItem"/>
            implementation for class selectors.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.Item.CssClassSelectorItem.className">
            <summary>The class name.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.Item.CssClassSelectorItem.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.CssClassSelectorItem"/>
            instance.
            </summary>
            <param name="className">the class name</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Selector.Item.CssIdSelectorItem">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.ICssSelectorItem"/>
            implementation for id selectors.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.Item.CssIdSelectorItem.id">
            <summary>The id.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.Item.CssIdSelectorItem.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.CssIdSelectorItem"/>
            instance.
            </summary>
            <param name="id">the id</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Selector.Item.CssPagePseudoClassSelectorItem">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.ICssSelectorItem"/>
            implementation for page pseudo classes selectors.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.Item.CssPagePseudoClassSelectorItem.isSpreadPseudoClass">
            <summary>Indicates if the page pseudo class is a spread pseudo class (left or right).</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.Item.CssPagePseudoClassSelectorItem.pagePseudoClass">
            <summary>The page pseudo class.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.Item.CssPagePseudoClassSelectorItem.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.CssPagePseudoClassSelectorItem"/>
            instance.
            </summary>
            <param name="pagePseudoClass">the page pseudo class name</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Selector.Item.CssPageTypeSelectorItem">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.ICssSelectorItem"/>
            implementation for page type selectors.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.Item.CssPageTypeSelectorItem.pageTypeName">
            <summary>The page type name.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.Item.CssPageTypeSelectorItem.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.CssPageTypeSelectorItem"/>
            instance.
            </summary>
            <param name="pageTypeName">the page type name</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.Item.CssPseudoClassChildSelectorItem.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.CssPseudoClassSelectorItem"/>
            instance.
            </summary>
            <param name="pseudoClass">the pseudo class name</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.Item.CssPseudoClassChildSelectorItem.GetAllSiblings(iText.StyledXmlParser.Node.INode)">
            <summary>Gets the all the siblings of a child node.</summary>
            <param name="node">the child node</param>
            <returns>the sibling nodes</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.Item.CssPseudoClassChildSelectorItem.GetAllSiblingsOfNodeType(iText.StyledXmlParser.Node.INode)">
            <summary>Gets all siblings of a child node with the type of a child node.</summary>
            <param name="node">the child node</param>
            <returns>the sibling nodes with the type of a child node</returns>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.Item.CssPseudoClassNthSelectorItem.nthA">
            <summary>The nth A.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.Item.CssPseudoClassNthSelectorItem.nthB">
            <summary>The nth B.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.Item.CssPseudoClassNthSelectorItem.GetNthArguments">
            <summary>Gets the nth arguments.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.Item.CssPseudoClassNthSelectorItem.ResolveNth(iText.StyledXmlParser.Node.INode,System.Collections.Generic.IList{iText.StyledXmlParser.Node.INode})">
            <summary>Resolves the nth.</summary>
            <param name="node">a node</param>
            <param name="children">the children</param>
            <returns>true, if successful</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Selector.Item.CssPseudoClassSelectorItem">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.ICssSelectorItem"/>
            implementation for pseudo class selectors.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.Item.CssPseudoClassSelectorItem.arguments">
            <summary>The arguments.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.Item.CssPseudoClassSelectorItem.pseudoClass">
            <summary>The pseudo class.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.Item.CssPseudoClassSelectorItem.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.CssPseudoClassSelectorItem"/>
            instance.
            </summary>
            <param name="pseudoClass">the pseudo class name</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Selector.Item.CssPseudoElementSelectorItem">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.ICssSelectorItem"/>
            implementation for pseudo element selectors.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.Item.CssPseudoElementSelectorItem.pseudoElementName">
            <summary>The pseudo element name.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.Item.CssPseudoElementSelectorItem.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.CssPseudoElementSelectorItem"/>
            instance.
            </summary>
            <param name="pseudoElementName">the pseudo element name</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Selector.Item.CssSeparatorSelectorItem">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.ICssSelectorItem"/>
            implementation for separator selectors.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.Item.CssSeparatorSelectorItem.separator">
            <summary>The separator character.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.Item.CssSeparatorSelectorItem.#ctor(System.Char)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.CssSeparatorSelectorItem"/>
            instance.
            </summary>
            <param name="separator">the separator character</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.Item.CssSeparatorSelectorItem.GetSeparator">
            <summary>Gets the separator character.</summary>
            <returns>the separator character</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Selector.Item.CssSpecificityConstants">
            <summary>Class that bundles some CSS specificity constants.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.Item.CssSpecificityConstants.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.CssSpecificityConstants"/>
            instance.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.Item.CssSpecificityConstants.ID_SPECIFICITY">
            <summary>The Constant ID_SPECIFICITY.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.Item.CssSpecificityConstants.CLASS_SPECIFICITY">
            <summary>The Constant CLASS_SPECIFICITY.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.Item.CssSpecificityConstants.ELEMENT_SPECIFICITY">
            <summary>The Constant ELEMENT_SPECIFICITY.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Selector.Item.CssTagSelectorItem">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.ICssSelectorItem"/>
            implementation for tag selectors.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.Item.CssTagSelectorItem.tagName">
            <summary>The tag name.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Selector.Item.CssTagSelectorItem.isUniversal">
            <summary>Indicates if the selector is universally valid.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.Item.CssTagSelectorItem.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Selector.Item.CssTagSelectorItem"/>
            instance.
            </summary>
            <param name="tagName">the tag name</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Selector.Item.ICssSelectorItem">
            <summary>Interface for CSS selector items.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.Item.ICssSelectorItem.GetSpecificity">
            <summary>Gets the specificity.</summary>
            <returns>the specificity</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Selector.Item.ICssSelectorItem.Matches(iText.StyledXmlParser.Node.INode)">
            <summary>Checks if the selector matches an element.</summary>
            <param name="element">the element</param>
            <returns>true, if there's a match</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Util.CssBackgroundUtils">
            <summary>Utilities class for CSS background parsing.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssBackgroundUtils.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Util.CssBackgroundUtils"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssBackgroundUtils.ParseBackgroundRepeat(System.String)">
            <summary>Parses the background repeat string value.</summary>
            <param name="value">the string which stores the background repeat value</param>
            <returns>
            the background repeat as a
            <see cref="T:iText.Layout.Properties.BackgroundRepeat.BackgroundRepeatValue"/>
            instance
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssBackgroundUtils.GetBackgroundPropertyNameFromType(iText.StyledXmlParser.Css.Util.CssBackgroundUtils.BackgroundPropertyType)">
            <summary>Gets background property name corresponding to its type.</summary>
            <param name="propertyType">background property type</param>
            <returns>background property name</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssBackgroundUtils.ResolveBackgroundPropertyType(System.String)">
            <summary>Resolves the background property type using it's value.</summary>
            <param name="value">the value</param>
            <returns>the background property type value</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils">
            <summary>Utilities class for CSS dimension parsing operations.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils.ParseInteger(System.String)">
            <summary>Parses an integer without throwing an exception if something goes wrong.</summary>
            <param name="str">a string that might be an integer value</param>
            <returns>the integer value, or null if something went wrong</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils.ParseFloat(System.String)">
            <summary>Parses a float without throwing an exception if something goes wrong.</summary>
            <param name="str">a string that might be a float value</param>
            <returns>the float value, or null if something went wrong</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils.ParseDouble(System.String)">
            <summary>Parses a double without throwing an exception if something goes wrong.</summary>
            <param name="str">a string that might be a double value</param>
            <returns>the double value, or null if something went wrong</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils.ParseAngle(System.String,System.String)">
            <summary>
            Parses an angle with an allowed metric unit (deg, grad, rad) or numeric value (e.g. 123, 1.23,
            .123) to rad.
            </summary>
            <param name="angle">String containing the angle to parse</param>
            <param name="defaultMetric">default metric to use in case the input string does not specify a metric</param>
            <returns>the angle in radians</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils.ParseAngle(System.String)">
            <summary>
            Parses a angle with an allowed metric unit (deg, grad, rad) or numeric value (e.g. 123, 1.23,
            .123) to rad.
            </summary>
            <remarks>
            Parses a angle with an allowed metric unit (deg, grad, rad) or numeric value (e.g. 123, 1.23,
            .123) to rad. Default metric is degrees
            </remarks>
            <param name="angle">String containing the angle to parse</param>
            <returns>the angle in radians</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils.ParseAspectRatio(System.String)">
            <summary>Parses an aspect ratio into an array with two integers.</summary>
            <param name="str">a string that might contain two integer values</param>
            <returns>the aspect ratio as an array of two integer values</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils.ParseAbsoluteLength(System.String,System.String)">
            <summary>
            Parses a length with an allowed metric unit (px, pt, in, cm, mm, pc, q) or numeric value (e.g. 123, 1.23,
            .123) to pt.<br />
            A numeric value (without px, pt, etc in the given length string) is considered to be in the default metric that
            was given.
            </summary>
            <param name="length">the string containing the length</param>
            <param name="defaultMetric">
            the string containing the metric if it is possible that the length string does not contain
            one. If null the length is considered to be in px as is default in HTML/CSS
            </param>
            <returns>parsed value</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils.ParseAbsoluteLength(System.String)">
            <summary>Parses the absolute length.</summary>
            <param name="length">the length as a string</param>
            <returns>the length as a float</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils.ParseRelativeValue(System.String,System.Single)">
            <summary>
            Parses an relative value based on the base value that was given, in the metric unit of the base value.<br />
            (e.g. margin=10% should be based on the page width, so if an A4 is used, the margin = 0.10*595.0 = 59.5f)
            </summary>
            <param name="relativeValue">in %, em or ex</param>
            <param name="baseValue">the value the returned float is based on</param>
            <returns>the parsed float in the metric unit of the base value</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils.ParseLengthValueToPt(System.String,System.Single,System.Single)">
            <summary>Convenience method for parsing a value to pt.</summary>
            <remarks>
            Convenience method for parsing a value to pt. Possible values are: <list type="bullet">
            <item><description>a numeric value in pixels (e.g. 123, 1.23, .123),
            </description></item>
            <item><description>a value with a metric unit (px, in, cm, mm, pc or pt) attached to it,
            </description></item>
            <item><description>or a value with a relative value (%, em, ex).
            </description></item>
            </list>
            </remarks>
            <param name="value">the value</param>
            <param name="emValue">the em value</param>
            <param name="remValue">the root em value</param>
            <returns>the unit value</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils.ParseAbsoluteFontSize(System.String,System.String)">
            <summary>Parses the absolute font size.</summary>
            <remarks>
            Parses the absolute font size.
            <para />
            A numeric value (without px, pt, etc in the given length string) is considered to be in the default metric that
            was given.
            </remarks>
            <param name="fontSizeValue">
            the font size value as a
            <see cref="T:System.String"/>
            </param>
            <param name="defaultMetric">
            the string containing the metric if it is possible that the length string does not contain
            one. If null the length is considered to be in px as is default in HTML/CSS.
            </param>
            <returns>
            the font size value as a
            <c>float</c>
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils.ParseAbsoluteFontSize(System.String)">
            <summary>Parses the absolute font size.</summary>
            <remarks>
            Parses the absolute font size.
            <para />
            A numeric value (without px, pt, etc in the given length string) is considered to be in the px.
            </remarks>
            <param name="fontSizeValue">
            the font size value as a
            <see cref="T:System.String"/>
            </param>
            <returns>
            the font size value as a
            <c>float</c>
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils.ParseRelativeFontSize(System.String,System.Single)">
            <summary>Parses the relative font size.</summary>
            <param name="relativeFontSizeValue">
            the relative font size value as a
            <see cref="T:System.String"/>
            </param>
            <param name="baseValue">the base value</param>
            <returns>
            the relative font size value as a
            <c>float</c>
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils.ParseSpecificCornerBorderRadius(System.String,System.Single,System.Single)">
            <summary>Parses the border radius of specific corner.</summary>
            <param name="specificBorderRadius">string that defines the border radius of specific corner</param>
            <param name="emValue">the em value</param>
            <param name="remValue">the root em value</param>
            <returns>
            an array of
            <see cref="T:iText.Layout.Properties.UnitValue">UnitValues</see>
            that define horizontal and vertical border radius values
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils.ParseResolution(System.String)">
            <summary>Parses the resolution.</summary>
            <param name="resolutionStr">the resolution as a string</param>
            <returns>a value in dpi</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils.ParseRgbaColor(System.String)">
            <summary>Parses the RGBA color.</summary>
            <param name="colorValue">the color value</param>
            <returns>an RGBA value expressed as an array with four float values</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssDimensionParsingUtils.DeterminePositionBetweenValueAndUnit(System.String)">
            <summary>
            Method used in preparation of splitting a string containing a numeric value with a metric unit (e.g. 18px, 9pt,
            6cm, etc).<br /><br />
            Determines the position between digits and affiliated characters ('+','-','0-9' and '.') and all other
            characters.<br />
            e.g. string "16px" will return 2, string "0.5em" will return 3 and string '-8.5mm' will return 4.
            </summary>
            <param name="string">containing a numeric value with a metric unit</param>
            <returns>
            int position between the numeric value and unit or 0 if string is null or string started with a
            non-numeric value.
            </returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Util.CssGradientUtil">
            <summary>Utilities class for CSS gradient functions parsing.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssGradientUtil.IsCssLinearGradientValue(System.String)">
            <summary>Checks whether the provided value is a linear gradient or repeating linear gradient function.</summary>
            <remarks>
            Checks whether the provided value is a linear gradient or repeating linear gradient function.
            This method does not check the validity of arguments list.
            </remarks>
            <param name="cssValue">the value to check</param>
            <returns>
            
            <see langword="true"/>
            if the provided argument is the linear gradient
            or repeating linear gradient function (even if the arguments list is invalid)
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssGradientUtil.ParseCssLinearGradient(System.String,System.Single,System.Single)">
            <summary>Parses the provided linear gradient or repeating linear gradient function</summary>
            <param name="cssGradientValue">the value to parse</param>
            <param name="emValue">the current element's em value</param>
            <param name="remValue">the current element's rem value</param>
            <returns>
            the
            <see cref="T:iText.Kernel.Colors.Gradients.StrategyBasedLinearGradientBuilder"/>
            constructed from the parsed linear gradient
            or
            <see langword="null"/>
            if the argument value is not a linear gradient or repeating linear gradient
            function
            </returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Util.CssPropertyNormalizer">
            <summary>Utilities class with functionality to normalize CSS properties.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssPropertyNormalizer.Normalize(System.String)">
            <summary>Normalize a property.</summary>
            <param name="str">the property</param>
            <returns>the normalized property</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssPropertyNormalizer.AppendQuotedString(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>Appends quoted string.</summary>
            <param name="buffer">the current buffer</param>
            <param name="source">a source</param>
            <param name="start">where to start in the source. Should point at quote symbol.</param>
            <returns>the new position in the source</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssPropertyNormalizer.AppendUrlContent(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>Appends url content and end parenthesis if url is correct.</summary>
            <param name="buffer">the current buffer</param>
            <param name="source">a source</param>
            <param name="start">where to start in the source. Should point at first symbol after "url(".</param>
            <returns>the new position in the source</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssPropertyNormalizer.TrimSpaceAfter(System.Char)">
            <summary>Checks if spaces can be trimmed after a specific character.</summary>
            <param name="ch">the character</param>
            <returns>true, if spaces can be trimmed after the character</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssPropertyNormalizer.TrimSpaceBefore(System.Char)">
            <summary>Checks if spaces can be trimmed before a specific character.</summary>
            <param name="ch">the character</param>
            <returns>true, if spaces can be trimmed before the character</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Util.CssTypesValidationUtils">
            <summary>Utilities class for CSS types validating operations.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssTypesValidationUtils.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Util.CssTypesValidationUtils"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssTypesValidationUtils.IsAngleValue(System.String)">
            <summary>Checks whether a string contains an allowed metric unit in HTML/CSS; rad, deg and grad.</summary>
            <param name="valueArgument">the string that needs to be checked</param>
            <returns>boolean true if value contains an allowed angle value</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssTypesValidationUtils.IsBase64Data(System.String)">
            <summary>Checks if a data is base 64 encoded.</summary>
            <param name="data">the data</param>
            <returns>true, if the data is base 64 encoded</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssTypesValidationUtils.IsColorProperty(System.String)">
            <summary>Checks if a value is a color property.</summary>
            <param name="value">the value</param>
            <returns>true, if the value contains a color property</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssTypesValidationUtils.IsEmValue(System.String)">
            <summary>Checks whether a string contains an allowed value relative to parent value.</summary>
            <param name="valueArgument">the string that needs to be checked</param>
            <returns>boolean true if value contains a em value</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssTypesValidationUtils.IsExValue(System.String)">
            <summary>Checks whether a string contains an allowed value relative to element font height.</summary>
            <param name="valueArgument">the string that needs to be checked</param>
            <returns>boolean true if value contains a ex value</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssTypesValidationUtils.IsMetricValue(System.String)">
            <summary>Checks whether a string contains an allowed metric unit in HTML/CSS; px, in, cm, mm, pc, Q or pt.
                </summary>
            <param name="valueArgument">the string that needs to be checked</param>
            <returns>boolean true if value contains an allowed metric value</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssTypesValidationUtils.IsNegativeValue(System.String)">
            <summary>Checks whether a string matches a negative value (e.g. -123, -2em, -0.123).</summary>
            <remarks>
            Checks whether a string matches a negative value (e.g. -123, -2em, -0.123).
            All these metric values are allowed in HTML/CSS.
            </remarks>
            <param name="value">the string that needs to be checked</param>
            <returns>true if value is negative</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssTypesValidationUtils.IsNumber(System.String)">
            <summary>Checks whether a string matches a numeric value (e.g. 123, 1.23, .123).</summary>
            <remarks>
            Checks whether a string matches a numeric value (e.g. 123, 1.23, .123). All these metric values are allowed in
            HTML/CSS.
            </remarks>
            <param name="value">the string that needs to be checked</param>
            <returns>boolean true if value contains an allowed metric value</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssTypesValidationUtils.IsPercentageValue(System.String)">
            <summary>Checks whether a string contains a percentage value</summary>
            <param name="valueArgument">the string that needs to be checked</param>
            <returns>boolean true if value contains an allowed percentage value</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssTypesValidationUtils.IsRelativeValue(System.String)">
            <summary>Checks whether a string contains an allowed value relative to previously set value.</summary>
            <param name="valueArgument">the string that needs to be checked</param>
            <returns>boolean true if value contains an allowed metric value</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssTypesValidationUtils.IsRemValue(System.String)">
            <summary>Checks whether a string contains an allowed value relative to previously set root value.</summary>
            <param name="valueArgument">the string that needs to be checked</param>
            <returns>boolean true if value contains a rem value</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssTypesValidationUtils.IsValidNumericValue(System.String)">
            <summary>Checks if a string is in a valid format.</summary>
            <param name="value">the string that needs to be checked</param>
            <returns>boolean true if value is in a valid format</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssTypesValidationUtils.IsInitialOrInheritOrUnset(System.String)">
            <summary>Checks if value is initial, inherit or unset.</summary>
            <param name="value">value to check</param>
            <returns>true if value is initial, inherit or unset. false otherwise</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssTypesValidationUtils.ContainsInitialOrInheritOrUnset(System.String)">
            <summary>Checks if value contains initial, inherit or unset.</summary>
            <param name="value">value to check</param>
            <returns>true if value contains initial, inherit or unset. False otherwise</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssTypesValidationUtils.IsZero(System.String)">
            <summary>Checks whether a string contains a zero.</summary>
            <param name="value">the string that needs to be checked</param>
            <returns>boolean true if value contains a zero</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Util.CssUtils">
            <summary>Utilities class for CSS operations.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssUtils.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Util.CssUtils"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssUtils.SplitStringWithComma(System.String)">
            <summary>
            Splits the provided
            <see cref="T:System.String"/>
            by comma with respect of brackets.
            </summary>
            <param name="value">to split</param>
            <returns>
            the
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of split result
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssUtils.SplitString(System.String,System.Char,iText.StyledXmlParser.Css.Util.EscapeGroup[])">
            <summary>
            Splits the provided
            <see cref="T:System.String"/>
            by split character with respect of escape characters.
            </summary>
            <param name="value">value to split</param>
            <param name="splitChar">character to split the String</param>
            <param name="escapeCharacters">escape characters</param>
            <returns>
            the
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of split result
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssUtils.ParseBlendMode(System.String)">
            <summary>Parses the given css blend mode value.</summary>
            <remarks>
            Parses the given css blend mode value. If the argument is
            <see langword="null"/>
            or an unknown blend
            mode, then the default css
            <see cref="F:iText.Layout.Properties.BlendMode.NORMAL"/>
            value would be returned.
            </remarks>
            <param name="cssValue">the value to parse</param>
            <returns>
            the
            <see cref="T:iText.Layout.Properties.BlendMode"/>
            instance representing the parsed value
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssUtils.ExtractShorthandProperties(System.String)">
            <summary>
            Extracts shorthand properties as list of string lists from a string, where the top level
            list is shorthand property and the lower level list is properties included in shorthand property.
            </summary>
            <param name="str">the source string with shorthand properties</param>
            <returns>the list of string lists</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssUtils.NormalizeCssProperty(System.String)">
            <summary>Normalizes a CSS property.</summary>
            <param name="str">the property</param>
            <returns>the normalized property</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssUtils.RemoveDoubleSpacesAndTrim(System.String)">
            <summary>Removes double spaces and trims a string.</summary>
            <param name="str">the string</param>
            <returns>the string without the unnecessary spaces</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssUtils.ExtractUrl(System.String)">
            <summary>
            Parses
            <c>url("file.jpg")</c>
            to
            <c>file.jpg</c>.
            </summary>
            <param name="url">the url attribute to parse</param>
            <returns>the parsed url. Or original url if not wrappend in url()</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssUtils.ExtractAttributeValue(System.String,iText.StyledXmlParser.Node.IElementNode)">
            <summary>Parses string and return attribute value.</summary>
            <param name="attrStr">the string contains attr() to extract attribute value</param>
            <param name="element">the parentNode from which we extract information</param>
            <returns>the value of attribute</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssUtils.FindNextUnescapedChar(System.String,System.Char,System.Int32)">
            <summary>Find the next unescaped character.</summary>
            <param name="source">a source</param>
            <param name="ch">the character to look for</param>
            <param name="startIndex">where to start looking</param>
            <returns>the position of the next unescaped character</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssUtils.CompareFloats(System.Double,System.Double)">
            <summary>Helper method for comparing floating point numbers</summary>
            <param name="d1">first float to compare</param>
            <param name="d2">second float to compare</param>
            <returns>True if both floats are equal within a Epsilon defined in this class, false otherwise</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssUtils.CompareFloats(System.Single,System.Single)">
            <summary>Helper method for comparing floating point numbers</summary>
            <param name="f1">first float to compare</param>
            <param name="f2">second float to compare</param>
            <returns>True if both floats are equal within a Epsilon defined in this class, false otherwise</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssUtils.ParseUnicodeRange(System.String)">
            <summary>Parses the unicode range.</summary>
            <param name="unicodeRange">the string which stores the unicode range</param>
            <returns>
            the unicode range as a
            <see cref="T:iText.Layout.Font.Range"/>
            object
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssUtils.ConvertPtsToPx(System.Single)">
            <summary>Convert given point value to a pixel value.</summary>
            <remarks>Convert given point value to a pixel value. 1 px is 0.75 pts.</remarks>
            <param name="pts">float value to be converted to pixels</param>
            <returns>float converted value pts/0.75f</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssUtils.ConvertPtsToPx(System.Double)">
            <summary>Convert given point value to a pixel value.</summary>
            <remarks>Convert given point value to a pixel value. 1 px is 0.75 pts.</remarks>
            <param name="pts">double value to be converted to pixels</param>
            <returns>double converted value pts/0.75</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssUtils.ConvertPxToPts(System.Single)">
            <summary>Convert given point value to a point value.</summary>
            <remarks>Convert given point value to a point value. 1 px is 0.75 pts.</remarks>
            <param name="px">float value to be converted to pixels</param>
            <returns>float converted value px*0.75</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssUtils.ConvertPxToPts(System.Double)">
            <summary>Convert given point value to a point value.</summary>
            <remarks>Convert given point value to a point value. 1 px is 0.75 pts.</remarks>
            <param name="px">double value to be converted to pixels</param>
            <returns>double converted value px*0.75</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.CssUtils.IsStyleSheetLink(iText.StyledXmlParser.Node.IElementNode)">
            <summary>
            Checks if an
            <see cref="T:iText.StyledXmlParser.Node.IElementNode"/>
            represents a style sheet link.
            </summary>
            <param name="headChildElement">the head child element</param>
            <returns>true, if the element node represents a style sheet link</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Util.EscapeGroup">
            <summary>Class to store escape characters and their processing logic.</summary>
            <remarks>
            Class to store escape characters and their processing logic.
            This class is used in
            <see cref="M:iText.StyledXmlParser.Css.Util.CssUtils.SplitString(System.String,System.Char,iText.StyledXmlParser.Css.Util.EscapeGroup[])"/>
            method.
            </remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.EscapeGroup.#ctor(System.Char,System.Char)">
            <summary>
            Creates instance of
            <see cref="T:iText.StyledXmlParser.Css.Util.EscapeGroup"/>.
            </summary>
            <param name="openCharacter">opening escape character</param>
            <param name="closeCharacter">closing escape character</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.EscapeGroup.#ctor(System.Char)">
            <summary>
            Creates instance of
            <see cref="T:iText.StyledXmlParser.Css.Util.EscapeGroup"/>
            when opening and closing characters are the same.
            </summary>
            <param name="escapeChar">opening and closing escape character</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.EscapeGroup.IsEscaped">
            <summary>
            Is currently processed character in
            <see cref="M:iText.StyledXmlParser.Css.Util.CssUtils.SplitString(System.String,System.Char,iText.StyledXmlParser.Css.Util.EscapeGroup[])"/>
            escaped.
            </summary>
            <returns>true if escaped, false otherwise</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Util.EscapeGroup.ProcessCharacter(System.Char)">
            <summary>Processes given character.</summary>
            <param name="nextCharacter">next character to process</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Validate.CssDeclarationValidationMaster">
            <summary>Class that bundles all the CSS declaration validators.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Validate.CssDeclarationValidationMaster.DEFAULT_VALIDATORS">
            <summary>A map containing all the CSS declaration validators.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Validate.CssDeclarationValidationMaster.#ctor">
            <summary>
            Creates a new
            <c>CssDeclarationValidationMaster</c>
            instance.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Validate.CssDeclarationValidationMaster.CheckDeclaration(iText.StyledXmlParser.Css.CssDeclaration)">
            <summary>Checks a CSS declaration.</summary>
            <param name="declaration">the CSS declaration</param>
            <returns>true, if the validation was successful</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Validate.ICssDataTypeValidator">
            <summary>Interface for CSS data type validators.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Validate.ICssDataTypeValidator.IsValid(System.String)">
            <summary>Checks if a value is a valid data type (e.g. a color, an identifier,...).</summary>
            <param name="objectString">the value</param>
            <returns>true, if the value is a valid data type</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Validate.ICssDeclarationValidator">
            <summary>Interface for CSS declaration validators.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Validate.ICssDeclarationValidator.IsValid(iText.StyledXmlParser.Css.CssDeclaration)">
            <summary>Checks if a value is a valid CSS declaration.</summary>
            <param name="cssDeclaration">the CSS declaration</param>
            <returns>true, if the value is a valid CSS declaration</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Validate.Impl.Datatype.ArrayDataTypeValidator">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Validate.ICssDeclarationValidator"/>
            implementation to validate an array of specified element types.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Validate.Impl.Datatype.ArrayDataTypeValidator.dataTypeValidator">
            <summary>The data type validator.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Validate.Impl.Datatype.ArrayDataTypeValidator.#ctor(iText.StyledXmlParser.Css.Validate.ICssDataTypeValidator)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Validate.Impl.Datatype.ArrayDataTypeValidator"/>
            instance.
            </summary>
            <param name="dataTypeValidator">the data type validator for each array element</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssBackgroundValidator">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Validate.ICssDataTypeValidator"/>
            implementation for background properties.
            </summary>
            <remarks>
            <see cref="T:iText.StyledXmlParser.Css.Validate.ICssDataTypeValidator"/>
            implementation for background properties.
            This validator should not be used with non-background properties.
            </remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssBackgroundValidator.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssBackgroundValidator"/>
            instance.
            </summary>
            <param name="backgroundProperty">is background property corresponding to current validator</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssBackgroundValidator.IsValid(System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssColorValidator">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Validate.ICssDataTypeValidator"/>
            implementation for colors.
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssEnumValidator">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Validate.ICssDataTypeValidator"/>
            implementation for elements in an enumeration.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssEnumValidator.allowedValues">
            <summary>The allowed values.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssEnumValidator.#ctor(System.String[])">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssEnumValidator"/>
            instance.
            </summary>
            <param name="allowedValues">the allowed values</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssEnumValidator.#ctor(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssEnumValidator"/>
            instance.
            </summary>
            <param name="allowedValues">the allowed values</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssEnumValidator.#ctor(System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssEnumValidator"/>
            instance.
            </summary>
            <remarks>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssEnumValidator"/>
            instance.
            <para />
            Each allowed value will be added with all the modificators.
            Each allowed value will be added as well.
            </remarks>
            <param name="allowedValues">the allowed values</param>
            <param name="allowedModificators">the allowed prefixes</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssEnumValidator.AddAllowedValues(System.Collections.Generic.ICollection{System.String})">
            <summary>Adds new allowed values to the allowedValues.</summary>
            <param name="allowedValues">the allowed values</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssIdentifierValidator">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Validate.ICssDataTypeValidator"/>
            implementation for identifiers.
            </summary>
            <remarks>
            <see cref="T:iText.StyledXmlParser.Css.Validate.ICssDataTypeValidator"/>
            implementation for identifiers.
            In CSS, identifiers (including element names, classes, and IDs in selectors) can contain only the characters [a-zA-Z0-9]
            and ISO 10646 characters U+00A0 and higher, plus the hyphen (-) and the underscore (_);
            they cannot start with a digit, two hyphens, or a hyphen followed by a digit.
            Identifiers can also contain escaped characters and any ISO 10646 character as a numeric code (see next item).
            For instance, the identifier "B&amp;W?" may be written as "B\&amp;W\?" or "B\26 W\3F".
            </remarks>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssLengthValueValidator">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Validate.ICssDataTypeValidator"/>
            implementation for numeric elements.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssLengthValueValidator.#ctor(System.Boolean)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssLengthValueValidator"/>
            instance.
            </summary>
            <param name="allowedNegative">is negative value allowed</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssLengthValueValidator.IsValid(System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssNumberValueValidator">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Validate.ICssDataTypeValidator"/>
            implementation for numeric elements.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssNumberValueValidator.#ctor(System.Boolean)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssNumberValueValidator"/>
            instance.
            </summary>
            <param name="allowedNegative">is negative value allowed</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssNumberValueValidator.IsValid(System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssPercentageValueValidator">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Validate.ICssDataTypeValidator"/>
            implementation for numeric elements.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssPercentageValueValidator.#ctor(System.Boolean)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssPercentageValueValidator"/>
            instance.
            </summary>
            <param name="allowedNegative">is negative value allowed</param>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssPercentageValueValidator.IsValid(System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssQuotesValidator">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Validate.ICssDataTypeValidator"/>
            implementation for values for the CSS quotes key.
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Validate.Impl.Datatype.CssTransformValidator">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Validate.ICssDataTypeValidator"/>
            implementation for css transform property .
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Validate.Impl.Declaration.MultiTypeDeclarationValidator">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Validate.ICssDeclarationValidator"/>
            implementation in case multiple types have to be checked.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Validate.Impl.Declaration.MultiTypeDeclarationValidator.allowedTypes">
            <summary>The allowed data types.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Validate.Impl.Declaration.MultiTypeDeclarationValidator.#ctor(iText.StyledXmlParser.Css.Validate.ICssDataTypeValidator[])">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Validate.Impl.Declaration.MultiTypeDeclarationValidator"/>
            instance.
            </summary>
            <param name="allowedTypes">the allowed types</param>
        </member>
        <member name="T:iText.StyledXmlParser.Css.Validate.Impl.Declaration.SingleTypeDeclarationValidator">
            <summary>
            <see cref="T:iText.StyledXmlParser.Css.Validate.ICssDeclarationValidator"/>
            implementation to validate a single type.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Css.Validate.Impl.Declaration.SingleTypeDeclarationValidator.dataTypeValidator">
            <summary>The data type validator.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Css.Validate.Impl.Declaration.SingleTypeDeclarationValidator.#ctor(iText.StyledXmlParser.Css.Validate.ICssDataTypeValidator)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Css.Validate.Impl.Declaration.SingleTypeDeclarationValidator"/>
            instance.
            </summary>
            <param name="dataTypeValidator">the data type validator</param>
        </member>
        <member name="T:iText.StyledXmlParser.Exceptions.ReadingByteLimitException">
            <summary>Thrown when the limit on the number of bytes read was violated.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Exceptions.StyledXMLParserException">
            <summary>Runtime exception that gets thrown if something goes wrong in the HTML to PDF conversion.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Exceptions.StyledXMLParserException.INVALID_GRADIENT_FUNCTION_ARGUMENTS_LIST">
            <summary>The Constant INVALID_GRADIENT_VALUE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Exceptions.StyledXMLParserException.INVALID_GRADIENT_TO_SIDE_OR_CORNER_STRING">
            <summary>The Constant INVALID_GRADIENT_TO_SIDE_OR_CORNER_STRING.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Exceptions.StyledXMLParserException.INVALID_GRADIENT_COLOR_STOP_VALUE">
            <summary>The Constant INVALID_GRADIENT_COLOR_STOP_VALUE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Exceptions.StyledXMLParserException.NAN">
            <summary>The Constant NAN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Exceptions.StyledXMLParserException.FontProviderContainsZeroFonts">
            <summary>Message in case the font provider doesn't know about any fonts.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Exceptions.StyledXMLParserException.UnsupportedEncodingException">
            <summary>The Constant UnsupportedEncodingException.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Exceptions.StyledXMLParserException.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Exceptions.StyledXMLParserException"/>
            instance.
            </summary>
            <param name="message">the message</param>
        </member>
        <member name="T:iText.StyledXmlParser.Exceptions.StyledXmlParserExceptionMessage">
            <summary>Class containing constants to be used in exceptions in the SXP module.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.IXmlParser">
            <summary>Interface for the XML parsing operations that accept XML and return a document node.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.IXmlParser.Parse(System.IO.Stream,System.String)">
            <summary>
            Parses XML provided as an
            <c>InputStream</c>
            and an encoding.
            </summary>
            <param name="XmlStream">the Xml stream</param>
            <param name="charset">
            the character set. If
            <see langword="null"/>
            then parser should detect encoding from stream.
            </param>
            <returns>a document node</returns>
        </member>
        <member name="M:iText.StyledXmlParser.IXmlParser.Parse(System.String)">
            <summary>
            Parses XML provided as a
            <c>String</c>.
            </summary>
            <param name="Xml">the Xml string</param>
            <returns>a document node</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Helper.ChangeNotifyingArrayList`1">
            <summary>Implementation of ArrayList that watches out for changes to the contents.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Helper.DataUtil">
            <summary>Internal static utilities for handling data.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Helper.DataUtil.Load(System.IO.FileInfo,System.String,System.String)">
            <summary>Loads and parses a file to a Document.</summary>
            <remarks>
            Loads and parses a file to a Document. Files that are compressed with gzip (and end in
            <c>.gz</c>
            or
            <c>.z</c>
            )
            are supported in addition to uncompressed files.
            </remarks>
            <param name="in">file to load</param>
            <param name="charsetName">
            (optional) character set of input; specify
            <see langword="null"/>
            to attempt to autodetect. A BOM in
            the file will always override this setting.
            </param>
            <param name="baseUri">base URI of document, to resolve relative links against</param>
            <returns>Document</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Helper.DataUtil.Load(System.IO.Stream,System.String,System.String)">
            <summary>Parses a Document from an input steam.</summary>
            <param name="in">input stream to parse. You will need to close it.</param>
            <param name="charsetName">character set of input</param>
            <param name="baseUri">base URI of document, to resolve relative links against</param>
            <returns>Document</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Helper.DataUtil.Load(System.IO.Stream,System.String,System.String,iText.StyledXmlParser.Jsoup.Parser.Parser)">
            <summary>Parses a Document from an input steam, using the provided Parser.</summary>
            <param name="in">input stream to parse. You will need to close it.</param>
            <param name="charsetName">character set of input</param>
            <param name="baseUri">base URI of document, to resolve relative links against</param>
            <param name="parser">
            alternate
            <see cref="M:iText.StyledXmlParser.Jsoup.Parser.Parser.XmlParser">parser</see>
            to use.
            </param>
            <returns>Document</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Helper.DataUtil.CrossStreams(System.IO.Stream,System.IO.Stream)">
            <summary>Writes the input stream to the output stream.</summary>
            <remarks>Writes the input stream to the output stream. Doesn't close them.</remarks>
            <param name="in">input stream to read from</param>
            <param name="out">output stream to write to</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Helper.DataUtil.ReadToByteBuffer(System.IO.Stream,System.Int32)">
            <summary>Read the input stream into a byte buffer.</summary>
            <remarks>
            Read the input stream into a byte buffer. To deal with slow input streams, you may interrupt the thread this
            method is executing on. The data read until being interrupted will be available.
            </remarks>
            <param name="inStream">the input stream to read from</param>
            <param name="maxSize">the maximum size in bytes to read from the stream. Set to 0 to be unlimited.</param>
            <returns>the filled byte buffer</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Helper.DataUtil.GetCharsetFromContentType(System.String)">
            <summary>Parse out a charset from a content type header.</summary>
            <remarks>
            Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
            will kick in.)
            </remarks>
            <param name="contentType">e.g. "text/html; charset=EUC-JP"</param>
            <returns>"EUC-JP", or null if not found. Charset is trimmed and uppercased.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Helper.DataUtil.MimeBoundary">
            <summary>Creates a random string, suitable for use as a mime boundary</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Helper.Validate">
            <summary>Simple validation methods.</summary>
            <remarks>Simple validation methods. Designed for jsoup internal use</remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Helper.Validate.NotNull(System.Object)">
            <summary>Validates that the object is not null</summary>
            <param name="obj">object to test</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Helper.Validate.NotNull(System.Object,System.String)">
            <summary>Validates that the object is not null</summary>
            <param name="obj">object to test</param>
            <param name="msg">message to output if validation fails</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Helper.Validate.IsTrue(System.Boolean)">
            <summary>Validates that the value is true</summary>
            <param name="val">object to test</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Helper.Validate.IsTrue(System.Boolean,System.String)">
            <summary>Validates that the value is true</summary>
            <param name="val">object to test</param>
            <param name="msg">message to output if validation fails</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Helper.Validate.IsFalse(System.Boolean)">
            <summary>Validates that the value is false</summary>
            <param name="val">object to test</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Helper.Validate.IsFalse(System.Boolean,System.String)">
            <summary>Validates that the value is false</summary>
            <param name="val">object to test</param>
            <param name="msg">message to output if validation fails</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Helper.Validate.NoNullElements(System.Object[])">
            <summary>Validates that the array contains no null elements</summary>
            <param name="objects">the array to test</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Helper.Validate.NoNullElements(System.Object[],System.String)">
            <summary>Validates that the array contains no null elements</summary>
            <param name="objects">the array to test</param>
            <param name="msg">message to output if validation fails</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Helper.Validate.NotEmpty(System.String)">
            <summary>Validates that the string is not null and is not empty</summary>
            <param name="string">the string to test</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Helper.Validate.NotEmpty(System.String,System.String)">
            <summary>Validates that the string is not null and is not empty</summary>
            <param name="string">the string to test</param>
            <param name="msg">message to output if validation fails</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Helper.Validate.Fail(System.String)">
            <summary>Cause a failure.</summary>
            <param name="msg">message to output.</param>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Internal.ConstrainableInputStream">
            <summary>
            A jsoup internal class (so don't use it as there is no contract API) that enables constraints on an Input Stream,
            namely a maximum read size, and the ability to Thread.interrupt() the read.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.ConstrainableInputStream.Wrap(System.IO.Stream,System.Int32,System.Int32)">
            <summary>If this InputStream is not already a ConstrainableInputStream, let it be one.</summary>
            <param name="input">the input stream to (maybe) wrap</param>
            <param name="bufferSize">the buffer size to use when reading</param>
            <param name="maxSize">the maximum size to allow to be read. 0 == infinite.</param>
            <returns>a constrainable input stream</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.ConstrainableInputStream.ReadToByteBuffer(System.Int32)">
            <summary>Reads this inputstream to a ByteBuffer.</summary>
            <remarks>
            Reads this inputstream to a ByteBuffer. The supplied max may be less than the inputstream's max, to support
            reading just the first bytes.
            </remarks>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Internal.Normalizer">
            <summary>Util methods for normalizing strings.</summary>
            <remarks>Util methods for normalizing strings. Jsoup internal use only, please don't depend on this API.</remarks>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Internal.StringUtil">
            <summary>A minimal String utility class.</summary>
            <remarks>
            A minimal String utility class. Designed for <b>internal</b> jsoup use only - the API and outcome may change without
            notice.
            </remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.Join``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>Join a collection of strings by a separator</summary>
            <param name="strings">collection of string objects</param>
            <param name="sep">string to place between strings</param>
            <returns>joined string</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.Join``1(System.Collections.Generic.IEnumerator{``0},System.String)">
            <summary>Join a collection of strings by a separator</summary>
            <param name="strings">iterator of string objects</param>
            <param name="sep">string to place between strings</param>
            <returns>joined string</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.Join(System.String[],System.String)">
            <summary>Join an array of strings by a separator</summary>
            <param name="strings">collection of string objects</param>
            <param name="sep">string to place between strings</param>
            <returns>joined string</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Internal.StringUtil.StringJoiner">
            <summary>A StringJoiner allows incremental / filtered joining of a set of stringable objects.</summary>
            <since>1.14.1</since>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.StringJoiner.#ctor(System.String)">
            <summary>Create a new joiner, that uses the specified separator.</summary>
            <remarks>
            Create a new joiner, that uses the specified separator. MUST call
            <see cref="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.StringJoiner.Complete"/>
            or will leak a thread
            local string builder.
            </remarks>
            <param name="separator">the token to insert between strings</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.StringJoiner.Add(System.Object)">
            <summary>Add another item to the joiner, will be separated</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.StringJoiner.Append(System.Object)">
            <summary>Append content to the current item; not separated</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.StringJoiner.Complete">
            <summary>Return the joined string, and release the builder back to the pool.</summary>
            <remarks>Return the joined string, and release the builder back to the pool. This joiner cannot be reused.
                </remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.Padding(System.Int32)">
            <summary>Returns space padding (up to a max of 30).</summary>
            <param name="width">amount of padding desired</param>
            <returns>string of spaces * width</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.IsBlank(System.String)">
            <summary>Tests if a string is blank: null, empty, or only whitespace (" ", \r\n, \t, etc)</summary>
            <param name="string">string to test</param>
            <returns>if string is blank</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.IsNumeric(System.String)">
            <summary>Tests if a string is numeric, i.e. contains only digit characters</summary>
            <param name="string">string to test</param>
            <returns>true if only digit chars, false if empty or null or contains non-digit chars</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.IsWhitespace(System.Int32)">
            <summary>Tests if a code point is "whitespace" as defined in the HTML spec.</summary>
            <remarks>Tests if a code point is "whitespace" as defined in the HTML spec. Used for output HTML.</remarks>
            <param name="c">code point to test</param>
            <returns>true if code point is whitespace, false otherwise</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.IsActuallyWhitespace(System.Int32)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.IsActuallyWhitespace(System.Int32)">
            <summary>Tests if a code point is "whitespace" as defined by what it looks like.</summary>
            <remarks>Tests if a code point is "whitespace" as defined by what it looks like. Used for Element.text etc.
                </remarks>
            <param name="c">code point to test</param>
            <returns>true if code point is whitespace, false otherwise</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.NormaliseWhitespace(System.String)">
            <summary>
            Normalise the whitespace within this string; multiple spaces collapse to a single, and all whitespace characters
            (e.g. newline, tab) convert to a simple space
            </summary>
            <param name="string">content to normalise</param>
            <returns>normalised string</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.AppendNormalisedWhitespace(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>After normalizing the whitespace within a string, appends it to a string builder.</summary>
            <param name="accum">builder to append to</param>
            <param name="string">string to normalize whitespace within</param>
            <param name="stripLeading">set to true if you wish to remove any leading whitespace</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.IsAscii(System.String)">
            <summary>Tests that a String contains only ASCII characters.</summary>
            <param name="string">scanned string</param>
            <returns>true if all characters are in range 0 - 127</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.Resolve(System.Uri,System.String)">
            <summary>Create a new absolute URL, from a provided existing absolute URL and a relative URL component.</summary>
            <param name="base">the existing absolute base URL</param>
            <param name="relUrl">the relative URL to resolve. (If it's already absolute, it will be returned)</param>
            <returns>the resolved absolute URL</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.Resolve(System.String,System.String)">
            <summary>Create a new absolute URL, from a provided existing absolute URL and a relative URL component.</summary>
            <param name="baseUrl">the existing absolute base URL</param>
            <param name="relUrl">the relative URL to resolve. (If it's already absolute, it will be returned)</param>
            <returns>an absolute URL if one was able to be generated, or the empty string if not</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.BorrowBuilder">
            <summary>Maintains cached StringBuilders in a flyweight pattern, to minimize new StringBuilder GCs.</summary>
            <remarks>
            Maintains cached StringBuilders in a flyweight pattern, to minimize new StringBuilder GCs. The StringBuilder is
            prevented from growing too large.
            <para />
            Care must be taken to release the builder once its work has been completed, with
            <see cref="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.ReleaseBuilder(System.Text.StringBuilder)"/>
            </remarks>
            <returns>an empty StringBuilder</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Internal.StringUtil.ReleaseBuilder(System.Text.StringBuilder)">
            <summary>Release a borrowed builder.</summary>
            <remarks>
            Release a borrowed builder. Care must be taken not to use the builder after it has been returned, as its
            contents may be changed by this method, or by a concurrent thread.
            </remarks>
            <param name="sb">the StringBuilder to release.</param>
            <returns>the string value of the released String Builder (as an incentive to release it!).</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Jsoup">
            <summary>The core public access point to the jsoup functionality.</summary>
            <author>Jonathan Hedley</author>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Jsoup.Parse(System.String,System.String)">
            <summary>Parse HTML into a Document.</summary>
            <remarks>Parse HTML into a Document. The parser will make a sensible, balanced document tree out of any HTML.
                </remarks>
            <param name="html">HTML to parse</param>
            <param name="baseUri">
            The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur
            before the HTML declares a
            <c>&lt;base href&gt;</c>
            tag.
            </param>
            <returns>sane HTML</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Jsoup.Parse(System.String,System.String,iText.StyledXmlParser.Jsoup.Parser.Parser)">
            <summary>Parse HTML into a Document, using the provided Parser.</summary>
            <remarks>
            Parse HTML into a Document, using the provided Parser. You can provide an alternate parser, such as a simple XML
            (non-HTML) parser.
            </remarks>
            <param name="html">HTML to parse</param>
            <param name="baseUri">
            The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur
            before the HTML declares a
            <c>&lt;base href&gt;</c>
            tag.
            </param>
            <param name="parser">
            alternate
            <see cref="M:iText.StyledXmlParser.Jsoup.Parser.Parser.XmlParser">parser</see>
            to use.
            </param>
            <returns>sane HTML</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Jsoup.Parse(System.String)">
            <summary>Parse HTML into a Document.</summary>
            <remarks>
            Parse HTML into a Document. As no base URI is specified, absolute URL detection relies on the HTML including a
            <c>&lt;base href&gt;</c>
            tag.
            </remarks>
            <param name="html">HTML to parse</param>
            <returns>sane HTML</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Jsoup.Parse(System.String,System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Jsoup.Parse(System.IO.FileInfo,System.String,System.String)">
            <summary>Parse the contents of a file as HTML.</summary>
            <param name="in">file to load HTML from</param>
            <param name="charsetName">
            (optional) character set of file contents. Set to
            <see langword="null"/>
            to determine from
            <c>http-equiv</c>
            meta tag, if
            present, or fall back to
            <c>UTF-8</c>
            (which is often safe to do).
            </param>
            <param name="baseUri">The URL where the HTML was retrieved from, to resolve relative links against.</param>
            <returns>sane HTML</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Jsoup.Parse(System.IO.FileInfo,System.String)">
            <summary>Parse the contents of a file as HTML.</summary>
            <remarks>Parse the contents of a file as HTML. The location of the file is used as the base URI to qualify relative URLs.
                </remarks>
            <param name="in">file to load HTML from</param>
            <param name="charsetName">
            (optional) character set of file contents. Set to
            <see langword="null"/>
            to determine from
            <c>http-equiv</c>
            meta tag, if
            present, or fall back to
            <c>UTF-8</c>
            (which is often safe to do).
            </param>
            <returns>sane HTML</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Jsoup.Parse(System.IO.FileInfo,System.String,System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Jsoup.Parse(System.IO.Stream,System.String,System.String)">
            <summary>Read an input stream, and parse it to a Document.</summary>
            <param name="in">input stream to read. Make sure to close it after parsing.</param>
            <param name="charsetName">
            (optional) character set of file contents. Set to
            <see langword="null"/>
            to determine from
            <c>http-equiv</c>
            meta tag, if
            present, or fall back to
            <c>UTF-8</c>
            (which is often safe to do).
            </param>
            <param name="baseUri">The URL where the HTML was retrieved from, to resolve relative links against.</param>
            <returns>sane HTML</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Jsoup.Parse(System.IO.Stream,System.String,System.String,iText.StyledXmlParser.Jsoup.Parser.Parser)">
            <summary>Read an input stream, and parse it to a Document.</summary>
            <remarks>
            Read an input stream, and parse it to a Document. You can provide an alternate parser, such as a simple XML
            (non-HTML) parser.
            </remarks>
            <param name="in">input stream to read. Make sure to close it after parsing.</param>
            <param name="charsetName">
            (optional) character set of file contents. Set to
            <see langword="null"/>
            to determine from
            <c>http-equiv</c>
            meta tag, if
            present, or fall back to
            <c>UTF-8</c>
            (which is often safe to do).
            </param>
            <param name="baseUri">The URL where the HTML was retrieved from, to resolve relative links against.</param>
            <param name="parser">
            alternate
            <see cref="M:iText.StyledXmlParser.Jsoup.Parser.Parser.XmlParser">parser</see>
            to use.
            </param>
            <returns>sane HTML</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Jsoup.ParseBodyFragment(System.String,System.String)">
            <summary>
            Parse a fragment of HTML, with the assumption that it forms the
            <c>body</c>
            of the HTML.
            </summary>
            <param name="bodyHtml">body HTML fragment</param>
            <param name="baseUri">URL to resolve relative URLs against.</param>
            <returns>sane HTML document</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Document.Body"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Jsoup.ParseBodyFragment(System.String)">
            <summary>
            Parse a fragment of HTML, with the assumption that it forms the
            <c>body</c>
            of the HTML.
            </summary>
            <param name="bodyHtml">body HTML fragment</param>
            <returns>sane HTML document</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Document.Body"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Jsoup.Clean(System.String,System.String,iText.StyledXmlParser.Jsoup.Safety.Safelist)">
            <summary>
            Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through an allow-list of safe
            tags and attributes.
            </summary>
            <param name="bodyHtml">input untrusted HTML (body fragment)</param>
            <param name="baseUri">URL to resolve relative URLs against</param>
            <param name="safelist">list of permitted HTML elements</param>
            <returns>safe HTML (body fragment)</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Safety.Cleaner.Clean(iText.StyledXmlParser.Jsoup.Nodes.Document)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Jsoup.Clean(System.String,System.String,iText.StyledXmlParser.Jsoup.Safety.Whitelist)">
            <summary>
            Use
            <see cref="M:iText.StyledXmlParser.Jsoup.Jsoup.Clean(System.String,System.String,iText.StyledXmlParser.Jsoup.Safety.Safelist)"/>
            instead.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Jsoup.Clean(System.String,iText.StyledXmlParser.Jsoup.Safety.Safelist)">
            <summary>
            Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a safe-list of permitted
            tags and attributes.
            </summary>
            <remarks>
            Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a safe-list of permitted
            tags and attributes.
            <para />
            Note that as this method does not take a base href URL to resolve attributes with relative URLs against, those
            URLs will be removed, unless the input HTML contains a
            <c>&lt;base href&gt; tag</c>
            . If you wish to preserve those, use
            the
            <see>Jsoup#clean(String html, String baseHref, Safelist)</see>
            method instead, and enable
            <see>Safelist#preserveRelativeLinks(boolean true)</see>.
            </remarks>
            <param name="bodyHtml">input untrusted HTML (body fragment)</param>
            <param name="safelist">list of permitted HTML elements</param>
            <returns>safe HTML (body fragment)</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Safety.Cleaner.Clean(iText.StyledXmlParser.Jsoup.Nodes.Document)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Jsoup.Clean(System.String,iText.StyledXmlParser.Jsoup.Safety.Whitelist)">
            <summary>
            Use
            <see cref="M:iText.StyledXmlParser.Jsoup.Jsoup.Clean(System.String,iText.StyledXmlParser.Jsoup.Safety.Safelist)"/>
            instead.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Jsoup.Clean(System.String,System.String,iText.StyledXmlParser.Jsoup.Safety.Safelist,iText.StyledXmlParser.Jsoup.Nodes.OutputSettings)">
            <summary>
            Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a safe-list of
            permitted tags and attributes.
            </summary>
            <remarks>
            Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a safe-list of
            permitted tags and attributes.
            <para />The HTML is treated as a body fragment; it's expected the cleaned HTML will be used within the body of an
            existing document. If you want to clean full documents, use
            <see cref="M:iText.StyledXmlParser.Jsoup.Safety.Cleaner.Clean(iText.StyledXmlParser.Jsoup.Nodes.Document)"/>
            instead, and add
            structural tags (<c>html, head, body</c> etc) to the safelist.
            </remarks>
            <param name="bodyHtml">input untrusted HTML (body fragment)</param>
            <param name="baseUri">URL to resolve relative URLs against</param>
            <param name="safelist">list of permitted HTML elements</param>
            <param name="outputSettings">document output settings; use to control pretty-printing and entity escape modes
                </param>
            <returns>safe HTML (body fragment)</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Safety.Cleaner.Clean(iText.StyledXmlParser.Jsoup.Nodes.Document)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Jsoup.Clean(System.String,System.String,iText.StyledXmlParser.Jsoup.Safety.Whitelist,iText.StyledXmlParser.Jsoup.Nodes.OutputSettings)">
            <summary>
            Use
            <see cref="M:iText.StyledXmlParser.Jsoup.Jsoup.Clean(System.String,System.String,iText.StyledXmlParser.Jsoup.Safety.Safelist,iText.StyledXmlParser.Jsoup.Nodes.OutputSettings)"/>
            instead.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Jsoup.IsValid(System.String,iText.StyledXmlParser.Jsoup.Safety.Safelist)">
            <summary>Test if the input body HTML has only tags and attributes allowed by the Safelist.</summary>
            <remarks>
            Test if the input body HTML has only tags and attributes allowed by the Safelist. Useful for form validation.
            <para />The input HTML should still be run through the cleaner to set up enforced attributes, and to tidy the output.
            <para />Assumes the HTML is a body fragment (i.e. will be used in an existing HTML document body.)
            </remarks>
            <param name="bodyHtml">HTML to test</param>
            <param name="safelist">safelist to test against</param>
            <returns>true if no tags or attributes were removed; false otherwise</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Jsoup.Clean(System.String,iText.StyledXmlParser.Jsoup.Safety.Safelist)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Jsoup.IsValid(System.String,iText.StyledXmlParser.Jsoup.Safety.Whitelist)">
            <summary>
            Use
            <see cref="M:iText.StyledXmlParser.Jsoup.Jsoup.IsValid(System.String,iText.StyledXmlParser.Jsoup.Safety.Safelist)"/>
            instead.
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Nodes.Attribute">
            <summary>A single key + value attribute.</summary>
            <remarks>A single key + value attribute. (Only used for presentation.)</remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attribute.#ctor(System.String,System.String)">
            <summary>Create a new attribute from unencoded (raw) key and value.</summary>
            <param name="key">attribute key; case is preserved.</param>
            <param name="value">attribute value (may be null)</param>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Attribute.CreateFromEncoded(System.String,System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attribute.#ctor(System.String,System.String,iText.StyledXmlParser.Jsoup.Nodes.Attributes)">
            <summary>Create a new attribute from unencoded (raw) key and value.</summary>
            <param name="key">attribute key; case is preserved.</param>
            <param name="val">attribute value (may be null)</param>
            <param name="parent">the containing Attributes (this Attribute is not automatically added to said Attributes)
                </param>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Attribute.CreateFromEncoded(System.String,System.String)"/>
        </member>
        <member name="P:iText.StyledXmlParser.Jsoup.Nodes.Attribute.Key">
            <summary>Get the attribute key.</summary>
            <returns>the attribute key</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attribute.SetKey(System.String)">
            <summary>Set the attribute key; case is preserved.</summary>
            <param name="key">the new key; must not be null</param>
        </member>
        <member name="P:iText.StyledXmlParser.Jsoup.Nodes.Attribute.Value">
            <summary>Get the attribute value.</summary>
            <remarks>Get the attribute value. Will return an empty string if the value is not set.</remarks>
            <returns>the attribute value</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attribute.HasDeclaredValue">
            <summary>Check if this Attribute has a value.</summary>
            <remarks>Check if this Attribute has a value. Set boolean attributes have no value.</remarks>
            <returns>if this is a boolean attribute / attribute without a value</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attribute.SetValue(System.String)">
            <summary>Set the attribute value.</summary>
            <param name="val">the new attribute value; must not be null</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attribute.Html">
            <summary>
            Get the HTML representation of this attribute; e.g.
            <c>href="index.html"</c>.
            </summary>
            <returns>HTML</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attribute.ToString">
            <summary>
            Get the string representation of this attribute, implemented as
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Attribute.Html"/>.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attribute.CreateFromEncoded(System.String,System.String)">
            <summary>Create a new Attribute from an unencoded key and a HTML attribute encoded value.</summary>
            <param name="unencodedKey">assumes the key is not encoded, as can be only run of simple \w chars.</param>
            <param name="encodedValue">HTML attribute encoded value</param>
            <returns>attribute</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attribute.ShouldCollapseAttribute(iText.StyledXmlParser.Jsoup.Nodes.OutputSettings)">
            <summary>Collapsible if it's a boolean attribute and value is empty or same as name</summary>
            <param name="out">output settings</param>
            <returns>Returns whether collapsible or not</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attribute.IsBooleanAttribute(System.String)">
            <summary>Checks if this attribute name is defined as a boolean attribute in HTML5</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Nodes.Attributes">
            <summary>The attributes of an Element.</summary>
            <remarks>
            The attributes of an Element.
            <para />
            Attributes are treated as a map: there can be only one value associated with an attribute key/name.
            <para />
            Attribute name and value comparisons are  generally <b>case sensitive</b>. By default for HTML, attribute names are
            normalized to lower-case on parsing. That means you should use lower-case strings when referring to attributes by
            name.
            </remarks>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.Get(System.String)">
            <summary>Get an attribute value by key.</summary>
            <param name="key">the (case-sensitive) attribute key</param>
            <returns>the attribute value if set; or empty string if not set (or a boolean attribute).</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.HasKey(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.GetIgnoreCase(System.String)">
            <summary>Get an attribute's value by case-insensitive key</summary>
            <param name="key">the attribute name</param>
            <returns>the first matching attribute value if set; or empty string if not set (ora boolean attribute).</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.Add(System.String,System.String)">
            <summary>Adds a new attribute.</summary>
            <remarks>Adds a new attribute. Will produce duplicates if the key already exists.</remarks>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.Put(System.String,System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.Put(System.String,System.String)">
            <summary>Set a new attribute, or replace an existing one by key.</summary>
            <param name="key">case sensitive attribute key (not null)</param>
            <param name="value">attribute value (may be null, to set a boolean attribute)</param>
            <returns>these attributes, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.Put(System.String,System.Boolean)">
            <summary>Set a new boolean attribute, remove attribute if value is false.</summary>
            <param name="key">case <b>insensitive</b> attribute key</param>
            <param name="value">attribute value</param>
            <returns>these attributes, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.Put(iText.StyledXmlParser.Jsoup.Nodes.Attribute)">
            <summary>Set a new attribute, or replace an existing one by key.</summary>
            <param name="attribute">attribute with case sensitive key</param>
            <returns>these attributes, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.Remove(System.String)">
            <summary>Remove an attribute by key.</summary>
            <remarks>Remove an attribute by key. <b>Case sensitive.</b></remarks>
            <param name="key">attribute key to remove</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.RemoveIgnoreCase(System.String)">
            <summary>Remove an attribute by key.</summary>
            <remarks>Remove an attribute by key. <b>Case insensitive.</b></remarks>
            <param name="key">attribute key to remove</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.HasKey(System.String)">
            <summary>Tests if these attributes contain an attribute with this key.</summary>
            <param name="key">case-sensitive key to check for</param>
            <returns>true if key exists, false otherwise</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.HasKeyIgnoreCase(System.String)">
            <summary>Tests if these attributes contain an attribute with this key.</summary>
            <param name="key">key to check for</param>
            <returns>true if key exists, false otherwise</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.HasDeclaredValueForKey(System.String)">
            <summary>Check if these attributes contain an attribute with a value for this key.</summary>
            <param name="key">key to check for</param>
            <returns>true if key exists, and it has a value</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.HasDeclaredValueForKeyIgnoreCase(System.String)">
            <summary>Check if these attributes contain an attribute with a value for this key.</summary>
            <param name="key">case-insensitive key to check for</param>
            <returns>true if key exists, and it has a value</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.Size">
            <summary>Get the number of attributes in this set.</summary>
            <returns>size</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.IsEmpty">
            <summary>Test if this Attributes list is empty (size==0).</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.AddAll(iText.StyledXmlParser.Jsoup.Nodes.Attributes)">
            <summary>Add all the attributes from the incoming set to this set.</summary>
            <param name="incoming">attributes to add to these attributes.</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.AsList">
            <summary>Get the attributes as a List, for iteration.</summary>
            <returns>an view of the attributes as an unmodifiable List.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.Dataset">
            <summary>
            Retrieves a filtered view of attributes that are HTML5 custom data attributes; that is, attributes with keys
            starting with
            <c>data-</c>.
            </summary>
            <returns>map of custom data attributes.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.Html">
            <summary>Get the HTML representation of these attributes.</summary>
            <returns>HTML</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.Equals(System.Object)">
            <summary>Checks if these attributes are equal to another set of attributes, by comparing the two sets</summary>
            <param name="o">attributes to compare with</param>
            <returns>if both sets of attributes have the same content</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.GetHashCode">
            <summary>Calculates the hashcode of these attributes, by iterating all attributes and summing their hashcodes.
                </summary>
            <returns>calculated hashcode</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.Normalize">
            <summary>Internal method.</summary>
            <remarks>Internal method. Lowercases all keys.</remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Attributes.Deduplicate(iText.StyledXmlParser.Jsoup.Parser.ParseSettings)">
            <summary>Internal method.</summary>
            <remarks>Internal method. Removes duplicate attribute by name. Settings for case sensitivity of key names.
                </remarks>
            <param name="settings">case sensitivity</param>
            <returns>number of removed dupes</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Nodes.CDataNode">
            <summary>A Character Data node, to support CDATA sections.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.CDataNode.Text">
            <summary>Get the unencoded, <b>non-normalized</b> text content of this CDataNode.</summary>
            <returns>unencoded, non-normalized text</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Nodes.Comment">
            <summary>A comment node.</summary>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Comment.#ctor(System.String)">
            <summary>Create a new comment node.</summary>
            <param name="data">The contents of the comment</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Comment.GetData">
            <summary>Get the contents of the comment.</summary>
            <returns>comment content</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Comment.IsXmlDeclaration">
            <summary>Check if this comment looks like an XML Declaration.</summary>
            <returns>true if it looks like, maybe, it's an XML Declaration.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Comment.AsXmlDeclaration">
            <summary>Attempt to cast this comment to an XML Declaration node.</summary>
            <returns>an XML declaration if it could be parsed as one, null otherwise.</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Nodes.DataNode">
            <summary>A data node, for contents of style, script tags etc, where contents should not show in text().</summary>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.DataNode.#ctor(System.String)">
            <summary>Create a new DataNode.</summary>
            <param name="data">data contents</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.DataNode.GetWholeData">
            <summary>Get the data contents of this node.</summary>
            <remarks>Get the data contents of this node. Will be unescaped and with original new lines, space etc.</remarks>
            <returns>data</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.DataNode.SetWholeData(System.String)">
            <summary>Set the data contents of this node.</summary>
            <param name="data">unencoded data</param>
            <returns>this node, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.DataNode.CreateFromEncoded(System.String,System.String)">
            <summary>Create a new DataNode from HTML encoded data.</summary>
            <param name="encodedData">encoded data</param>
            <param name="baseUri">base URI</param>
            <returns>new DataNode</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Nodes.Document">
            <summary>A HTML Document.</summary>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.#ctor(System.String)">
            <summary>Create a new, empty Document.</summary>
            <param name="baseUri">base URI of document</param>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Jsoup.Parse(System.String)"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Document.CreateShell(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.CreateShell(System.String)">
            <summary>Create a valid, empty shell of a document, suitable for adding more elements to.</summary>
            <param name="baseUri">baseUri of document</param>
            <returns>document with html, head, and body elements.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.Location">
            <summary>Get the URL this Document was parsed from.</summary>
            <remarks>
            Get the URL this Document was parsed from. If the starting URL is a redirect,
            this will return the final URL from which the document was served from.
            <para />Will return an empty string if the location is unknown (e.g. if parsed from a String).
            </remarks>
            <returns>location</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.DocumentType">
            <summary>Returns this Document's doctype.</summary>
            <returns>document type, or null if not set</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.HtmlEl">
            <summary>Find the root HTML element, or create it if it doesn't exist.</summary>
            <returns>the root HTML element.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.Head">
            <summary>
            Get this document's
            <c>head</c>
            element.
            </summary>
            <remarks>
            Get this document's
            <c>head</c>
            element.
            <para />
            As a side-effect, if this Document does not already have a HTML structure, it will be created. If you do not want
            that, use
            <c>#selectFirst("head")</c>
            instead.
            </remarks>
            <returns>
            
            <c>head</c>
            element.
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.Body">
            <summary>
            Get this document's
            <c>&lt;body&gt;</c>
            or
            <c>&lt;frameset&gt;</c>
            element.
            </summary>
            <remarks>
            Get this document's
            <c>&lt;body&gt;</c>
            or
            <c>&lt;frameset&gt;</c>
            element.
            <para />
            As a <b>side-effect</b>, if this Document does not already have a HTML structure, it will be created with a
            <c>&lt;body&gt;</c>
            element. If you do not want that, use
            <c>#selectFirst("body")</c>
            instead.
            </remarks>
            <returns>
            
            <c>body</c>
            element for documents with a
            <c>&lt;body&gt;</c>
            , a new
            <c>&lt;body&gt;</c>
            element if the document
            had no contents, or the outermost
            <c>&lt;frameset&gt; element</c>
            for frameset documents.
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.Title">
            <summary>
            Get the string contents of the document's
            <c>title</c>
            element.
            </summary>
            <returns>Trimmed title, or empty string if none set.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.Title(System.String)">
            <summary>
            Set the document's
            <paramref name="title"/>
            element.
            </summary>
            <remarks>
            Set the document's
            <paramref name="title"/>
            element. Updates the existing element, or adds
            <paramref name="title"/>
            to
            <c>head</c>
            if
            not present
            </remarks>
            <param name="title">string to set as title</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.CreateElement(System.String)">
            <summary>Create a new Element, with this document's base uri.</summary>
            <remarks>Create a new Element, with this document's base uri. Does not make the new element a child of this document.
                </remarks>
            <param name="tagName">
            element tag name (e.g.
            <c>a</c>
            )
            </param>
            <returns>new element</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.Normalise">
            <summary>Normalise the document.</summary>
            <remarks>
            Normalise the document. This happens after the parse phase so generally does not need to be called.
            Moves any text content that is not in the body element into the body.
            </remarks>
            <returns>this document after normalisation</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.Text(System.String)">
            <summary>
            Set the text of the
            <c>body</c>
            of this document.
            </summary>
            <remarks>
            Set the text of the
            <c>body</c>
            of this document. Any existing nodes within the body will be cleared.
            </remarks>
            <param name="text">unencoded text</param>
            <returns>this document</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.Charset(System.Text.Encoding)">
            <summary>Sets the charset used in this document.</summary>
            <remarks>
            Sets the charset used in this document. This method is equivalent
            to
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.OutputSettings.Charset(System.Text.Encoding)">OutputSettings.charset(Charset)</see>
            but in addition it updates the
            charset / encoding element within the document.
            <para />
            This enables
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Document.UpdateMetaCharsetElement(System.Boolean)">meta charset update</see>.
            <para />
            If there's no element with charset / encoding information yet it will be created.
            Obsolete charset / encoding definitions are removed!
            <para /><b>Elements used:</b>
            <list type="bullet">
            <item><description><b>Html:</b> <i>&lt;meta charset="CHARSET"&gt;</i>
            </description></item>
            <item><description><b>Xml:</b> <i>&lt;?xml version="1.0" encoding="CHARSET"&gt;</i>
            </description></item>
            </list>
            </remarks>
            <param name="charset">Charset</param>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Document.UpdateMetaCharsetElement(System.Boolean)"></seealso>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.OutputSettings.Charset(System.Text.Encoding)"></seealso>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.Charset">
            <summary>Returns the charset used in this document.</summary>
            <remarks>
            Returns the charset used in this document. This method is equivalent
            to
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.OutputSettings.Charset"/>.
            </remarks>
            <returns>Current Charset</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.OutputSettings.Charset"></seealso>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.UpdateMetaCharsetElement(System.Boolean)">
            <summary>
            Sets whether the element with charset information in this document is
            updated on changes through
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Document.Charset(System.Text.Encoding)">Document.charset(Charset)</see>
            or not.
            </summary>
            <remarks>
            Sets whether the element with charset information in this document is
            updated on changes through
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Document.Charset(System.Text.Encoding)">Document.charset(Charset)</see>
            or not.
            <para />
            If set to <tt>false</tt> <i>(default)</i> there are no elements modified.
            </remarks>
            <param name="update">
            If <tt>true</tt> the element updated on charset
            changes, <tt>false</tt> if not
            </param>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Document.Charset(System.Text.Encoding)"></seealso>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.UpdateMetaCharsetElement">
            <summary>
            Returns whether the element with charset information in this document is
            updated on changes through
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Document.Charset(System.Text.Encoding)">Document.charset(Charset)</see>
            or not.
            </summary>
            <returns>
            Returns <tt>true</tt> if the element is updated on charset
            changes, <tt>false</tt> if not
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.EnsureMetaCharsetElement">
            <summary>
            Ensures a meta charset (html) or xml declaration (xml) with the current
            encoding used.
            </summary>
            <remarks>
            Ensures a meta charset (html) or xml declaration (xml) with the current
            encoding used. This only applies with
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Document.UpdateMetaCharsetElement(System.Boolean)">updateMetaCharset</see>
            set to
            <tt>true</tt>, otherwise this method does nothing.
            <list type="bullet">
            <item><description>An existing element gets updated with the current charset
            </description></item>
            <item><description>If there's no element yet it will be inserted
            </description></item>
            <item><description>Obsolete elements are removed
            </description></item>
            </list>
            <b>Elements used:</b>
            <list type="bullet">
            <item><description><b>Html:</b> <i>&lt;meta charset="CHARSET"&gt;</i>
            </description></item>
            <item><description><b>Xml:</b> <i>&lt;?xml version="1.0" encoding="CHARSET"&gt;</i>
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.OutputSettings">
            <summary>Get the document's current output settings.</summary>
            <returns>the document's current output settings.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.OutputSettings(iText.StyledXmlParser.Jsoup.Nodes.OutputSettings)">
            <summary>Set the document's output settings.</summary>
            <param name="outputSettings">new output settings.</param>
            <returns>this document, for chaining.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.Parser">
            <summary>Get the parser that was used to parse this document.</summary>
            <returns>the parser</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Document.Parser(iText.StyledXmlParser.Jsoup.Parser.Parser)">
            <summary>Set the parser used to create this document.</summary>
            <remarks>
            Set the parser used to create this document. This parser is then used when further parsing within this document
            is required.
            </remarks>
            <param name="parser">the configured parser to use when further parsing is required for this document.</param>
            <returns>this document, for chaining.</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Nodes.OutputSettings">
            <summary>A Document's output settings control the form of the text() and html() methods.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.OutputSettings.EscapeMode">
            <summary>
            Get the document's current HTML escape mode: <c>base</c>, which provides a limited set of named HTML
            entities and escapes other characters as numbered entities for maximum compatibility; or <c>extended</c>,
            which uses the complete set of HTML named entities.
            </summary>
            <remarks>
            Get the document's current HTML escape mode: <c>base</c>, which provides a limited set of named HTML
            entities and escapes other characters as numbered entities for maximum compatibility; or <c>extended</c>,
            which uses the complete set of HTML named entities.
            <para />
            The default escape mode is <c>base</c>.
            </remarks>
            <returns>the document's current escape mode</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.OutputSettings.EscapeMode(iText.StyledXmlParser.Jsoup.Nodes.Entities.EscapeMode)">
            <summary>
            Set the document's escape mode, which determines how characters are escaped when the output character set
            does not support a given character:- using either a named or a numbered escape.
            </summary>
            <param name="escapeMode">the new escape mode to use</param>
            <returns>the document's output settings, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.OutputSettings.Charset">
            <summary>
            Get the document's current output charset, which is used to control which characters are escaped when
            generating HTML (via the <c>html()</c> methods), and which are kept intact.
            </summary>
            <remarks>
            Get the document's current output charset, which is used to control which characters are escaped when
            generating HTML (via the <c>html()</c> methods), and which are kept intact.
            <para />
            Where possible (when parsing from a URL or File), the document's output charset is automatically set to the
            input charset. Otherwise, it defaults to UTF-8.
            </remarks>
            <returns>the document's current charset.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.OutputSettings.Charset(System.Text.Encoding)">
            <summary>Update the document's output charset.</summary>
            <param name="charset">the new charset to use.</param>
            <returns>the document's output settings, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.OutputSettings.Charset(System.String)">
            <summary>Update the document's output charset.</summary>
            <param name="charset">the new charset (by name) to use.</param>
            <returns>the document's output settings, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.OutputSettings.Syntax">
            <summary>Get the document's current output syntax.</summary>
            <returns>current syntax</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.OutputSettings.Syntax(iText.StyledXmlParser.Jsoup.Nodes.Syntax)">
            <summary>Set the document's output syntax.</summary>
            <remarks>
            Set the document's output syntax. Either
            <c>html</c>
            , with empty tags and boolean attributes (etc), or
            <c>xml</c>
            , with self-closing tags.
            </remarks>
            <param name="syntax">serialization syntax</param>
            <returns>the document's output settings, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.OutputSettings.PrettyPrint">
            <summary>Get if pretty printing is enabled.</summary>
            <remarks>
            Get if pretty printing is enabled. Default is true. If disabled, the HTML output methods will not re-format
            the output, and the output will generally look like the input.
            </remarks>
            <returns>if pretty printing is enabled.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.OutputSettings.PrettyPrint(System.Boolean)">
            <summary>Enable or disable pretty printing.</summary>
            <param name="pretty">new pretty print setting</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.OutputSettings.Outline">
            <summary>Get if outline mode is enabled.</summary>
            <remarks>
            Get if outline mode is enabled. Default is false. If enabled, the HTML output methods will consider
            all tags as block.
            </remarks>
            <returns>if outline mode is enabled.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.OutputSettings.Outline(System.Boolean)">
            <summary>Enable or disable HTML outline mode.</summary>
            <param name="outlineMode">new outline setting</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.OutputSettings.IndentAmount">
            <summary>Get the current tag indent amount, used when pretty printing.</summary>
            <returns>the current indent amount</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.OutputSettings.IndentAmount(System.Int32)">
            <summary>Set the indent amount for pretty printing</summary>
            <param name="indentAmount">
            number of spaces to use for indenting each level. Must be
            <c>&gt;=</c>
            0.
            </param>
            <returns>this, for chaining</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Nodes.Syntax">
            <summary>The output serialization syntax.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Nodes.DocumentType">
            <summary>
            A
            <c>&lt;!DOCTYPE&gt;</c>
            node.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.DocumentType.#ctor(System.String,System.String,System.String)">
            <summary>Create a new doctype element.</summary>
            <param name="name">the doctype's name</param>
            <param name="publicId">the doctype's public ID</param>
            <param name="systemId">the doctype's system ID</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.DocumentType.Name">
            <summary>Get this doctype's name (when set, or empty string)</summary>
            <returns>doctype name</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.DocumentType.PublicId">
            <summary>Get this doctype's Public ID (when set, or empty string)</summary>
            <returns>doctype Public ID</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.DocumentType.SystemId">
            <summary>Get this doctype's System ID (when set, or empty string)</summary>
            <returns>doctype System ID</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Nodes.Element">
            <summary>
            A HTML element consists of a tag name, attributes, and child nodes (including text nodes and
            other elements).
            </summary>
            <remarks>
            A HTML element consists of a tag name, attributes, and child nodes (including text nodes and
            other elements).
            From an Element, you can extract data, traverse the node graph, and manipulate the HTML.
            </remarks>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.#ctor(System.String)">
            <summary>Create a new, standalone element.</summary>
            <param name="tag">tag name</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.#ctor(iText.StyledXmlParser.Jsoup.Parser.Tag,System.String,iText.StyledXmlParser.Jsoup.Nodes.Attributes)">
            <summary>Create a new, standalone Element.</summary>
            <remarks>Create a new, standalone Element. (Standalone in that is has no parent.)</remarks>
            <param name="tag">tag of this element</param>
            <param name="baseUri">the base URI (optional, may be null to inherit from parent, or "" to clear parent's)
                </param>
            <param name="attributes">initial attributes (optional, may be null)</param>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.AppendChild(iText.StyledXmlParser.Jsoup.Nodes.Node)"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.AppendElement(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.#ctor(iText.StyledXmlParser.Jsoup.Parser.Tag,System.String)">
            <summary>Create a new Element from a Tag and a base URI.</summary>
            <param name="tag">element tag</param>
            <param name="baseUri">the base URI of this element. Optional, and will inherit from its parent, if any.</param>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Parser.Tag.ValueOf(System.String,iText.StyledXmlParser.Jsoup.Parser.ParseSettings)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.HasChildNodes">
            <summary>Internal test to check if a nodelist object has been created.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.TagName">
            <summary>Get the name of the tag for this element.</summary>
            <remarks>
            Get the name of the tag for this element. E.g.
            <c>div</c>
            . If you are using
            <see cref="F:iText.StyledXmlParser.Jsoup.Parser.ParseSettings.preserveCase">case preserving parsing</see>
            , this will return the source's original case.
            </remarks>
            <returns>the tag name</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.NormalName">
            <summary>Get the normalized name of this Element's tag.</summary>
            <remarks>
            Get the normalized name of this Element's tag. This will always be the lowercased version of the tag, regardless
            of the tag case preserving setting of the parser. For e.g.,
            <c>&lt;DIV&gt;</c>
            and
            <c>&lt;div&gt;</c>
            both have a
            normal name of
            <c>div</c>.
            </remarks>
            <returns>normal name</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.TagName(System.String)">
            <summary>Change (rename) the tag of this element.</summary>
            <remarks>
            Change (rename) the tag of this element. For example, convert a
            <c>&lt;span&gt;</c>
            to a
            <c>&lt;div&gt;</c>
            with
            <c>el.tagName("div");</c>.
            </remarks>
            <param name="tagName">new tag name for this element</param>
            <returns>this element, for chaining</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Select.Elements.TagName(System.String)"></seealso>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Tag">
            <summary>Get the Tag for this element.</summary>
            <returns>the tag object</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.IsBlock">
            <summary>Test if this element is a block-level element.</summary>
            <remarks>
            Test if this element is a block-level element. (E.g.
            <c>&lt;div&gt; == true</c>
            or an inline element
            <c>&lt;span&gt; == false</c>
            ).
            </remarks>
            <returns>true if block, false if not (and thus inline)</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Id">
            <summary>
            Get the
            <c>id</c>
            attribute of this element.
            </summary>
            <returns>The id attribute, if present, or an empty string if not.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Id(System.String)">
            <summary>
            Set the
            <paramref name="id"/>
            attribute of this element.
            </summary>
            <param name="id">the ID value to use</param>
            <returns>this Element, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Attr(System.String,System.String)">
            <summary>Set an attribute value on this element.</summary>
            <remarks>
            Set an attribute value on this element. If this element already has an attribute with the
            key, its value is updated; otherwise, a new attribute is added.
            </remarks>
            <returns>this element</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Attr(System.String,System.Boolean)">
            <summary>Set a boolean attribute value on this element.</summary>
            <remarks>
            Set a boolean attribute value on this element. Setting to <c>true</c> sets the attribute value to "" and
            marks the attribute as boolean so no value is written out. Setting to <c>false</c> removes the attribute
            with the same key if it exists.
            </remarks>
            <param name="attributeKey">the attribute key</param>
            <param name="attributeValue">the attribute value</param>
            <returns>this element</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Dataset">
            <summary>Get this element's HTML5 custom data attributes.</summary>
            <remarks>
            Get this element's HTML5 custom data attributes. Each attribute in the element that has a key
            starting with "data-" is included the dataset.
            <para />
            E.g., the element
            <c>&lt;div data-package="jsoup" data-language="Java" class="group"&gt;...</c>
            has the dataset
            <c>package=jsoup, language=java</c>.
            <para />
            This map is a filtered view of the element's attribute map. Changes to one map (add, remove, update) are reflected
            in the other map.
            <para />
            You can find elements that have data attributes using the
            <c>[^data-]</c>
            attribute key prefix selector.
            </remarks>
            <returns>
            a map of
            <c>key=value</c>
            custom data attributes.
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Parents">
            <summary>Get this element's parent and ancestors, up to the document root.</summary>
            <returns>this element's stack of parents, closest first.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Child(System.Int32)">
            <summary>Get a child element of this element, by its 0-based index number.</summary>
            <remarks>
            Get a child element of this element, by its 0-based index number.
            <para />
            Note that an element can have both mixed Nodes and Elements as children. This method inspects
            a filtered list of children that are elements, and the index is based on that filtered list.
            </remarks>
            <param name="index">the index number of the element to retrieve</param>
            <returns>
            the child element, if it exists, otherwise throws an
            <c>IndexOutOfBoundsException</c>
            </returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ChildNode(System.Int32)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.ChildrenSize">
            <summary>Get the number of child nodes of this element that are elements.</summary>
            <remarks>
            Get the number of child nodes of this element that are elements.
            <para />
            This method works on the same filtered list like
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Child(System.Int32)"/>
            . Use
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ChildNodes"/>
            and
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.ChildNodeSize"/>
            to get the unfiltered Nodes (e.g. includes TextNodes etc.)
            </remarks>
            <returns>the number of child nodes that are elements</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Children"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Child(System.Int32)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Children">
            <summary>Get this element's child elements.</summary>
            <remarks>
            Get this element's child elements.
            <para />
            This is effectively a filter on
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ChildNodes"/>
            to get Element nodes.
            </remarks>
            <returns>child elements. If this element has no children, returns an empty list.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ChildNodes"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.ChildElementsList">
            <summary>Maintains a shadow copy of this element's child elements.</summary>
            <remarks>Maintains a shadow copy of this element's child elements. If the nodelist is changed, this cache is invalidated.
                </remarks>
            <returns>a list of child elements</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.NodelistChanged">
            <summary>Clears the cached shadow child elements.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.TextNodes">
            <summary>Get this element's child text nodes.</summary>
            <remarks>
            Get this element's child text nodes. The list is unmodifiable but the text nodes may be manipulated.
            <para />
            This is effectively a filter on
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ChildNodes"/>
            to get Text nodes.
            </remarks>
            <returns>
            child text nodes. If this element has no text nodes, returns an
            empty list.
            <para />
            For example, with the input HTML:
            <c>&lt;p&gt;One &lt;span&gt;Two&lt;/span&gt; Three &lt;br&gt; Four&lt;/p&gt;</c>
            with the
            <c>p</c>
            element selected:
            <list type="bullet">
            <item><description>
            <c>p.text()</c>
            =
            <c>"One Two Three Four"</c>
            </description></item>
            <item><description>
            <c>p.ownText()</c>
            =
            <c>"One Three Four"</c>
            </description></item>
            <item><description>
            <c>p.children()</c>
            =
            <c>Elements[&lt;span&gt;, &lt;br&gt;]</c>
            </description></item>
            <item><description>
            <c>p.childNodes()</c>
            =
            <c>List&lt;Node&gt;["One ", &lt;span&gt;, " Three ", &lt;br&gt;, " Four"]</c>
            </description></item>
            <item><description>
            <c>p.textNodes()</c>
            =
            <c>List&lt;TextNode&gt;["One ", " Three ", " Four"]</c>
            </description></item>
            </list>
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.DataNodes">
            <summary>Get this element's child data nodes.</summary>
            <remarks>
            Get this element's child data nodes. The list is unmodifiable but the data nodes may be manipulated.
            <para />
            This is effectively a filter on
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ChildNodes"/>
            to get Data nodes.
            </remarks>
            <returns>
            child data nodes. If this element has no data nodes, returns an
            empty list.
            </returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Data"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Select(System.String)">
            <summary>
            Find elements that match the
            <see cref="T:iText.StyledXmlParser.Jsoup.Select.Selector"/>
            CSS query, with this element as the starting context.
            </summary>
            <remarks>
            Find elements that match the
            <see cref="T:iText.StyledXmlParser.Jsoup.Select.Selector"/>
            CSS query, with this element as the starting context.
            Matched elements may include this element, or any of its children.
            <para />This method is generally more powerful to use than the DOM-type
            <c>getElementBy*</c>
            methods, because
            multiple filters can be combined, e.g.:
            <list type="bullet">
            <item><description>
            <c>el.select("a[href]")</c>
            - finds links (
            <c>a</c>
            tags with
            <c>href</c>
            attributes)
            </description></item>
            <item><description>
            <c>el.select("a[href*=example.com]")</c>
            - finds links pointing to example.com (loosely)
            </description></item>
            </list>
            <para />
            See the query syntax documentation in
            <see cref="T:iText.StyledXmlParser.Jsoup.Select.Selector"/>.
            <para />
            Also known as
            <c>querySelectorAll()</c>
            in the Web DOM.
            </remarks>
            <param name="cssQuery">
            a
            <see cref="T:iText.StyledXmlParser.Jsoup.Select.Selector"/>
            CSS-like query
            </param>
            <returns>
            an
            <see cref="T:iText.StyledXmlParser.Jsoup.Select.Elements"/>
            list containing elements that match the query (empty if none match)
            </returns>
            <seealso cref="T:iText.StyledXmlParser.Jsoup.Select.Selector">selector query syntax</seealso>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Select.QueryParser.Parse(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Select(iText.StyledXmlParser.Jsoup.Select.Evaluator)">
            <summary>Find elements that match the supplied Evaluator.</summary>
            <remarks>
            Find elements that match the supplied Evaluator. This has the same functionality as
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Select(System.String)"/>
            , but
            may be useful if you are running the same query many times (on many documents) and want to save the overhead of
            repeatedly parsing the CSS query.
            </remarks>
            <param name="evaluator">an element evaluator</param>
            <returns>
            an
            <see cref="T:iText.StyledXmlParser.Jsoup.Select.Elements"/>
            list containing elements that match the query (empty if none match)
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.SelectFirst(System.String)">
            <summary>
            Find the first Element that matches the
            <see cref="T:iText.StyledXmlParser.Jsoup.Select.Selector"/>
            CSS query, with this element as the starting context.
            </summary>
            <remarks>
            Find the first Element that matches the
            <see cref="T:iText.StyledXmlParser.Jsoup.Select.Selector"/>
            CSS query, with this element as the starting context.
            <para />
            This is effectively the same as calling
            <c>element.select(query).first()</c>
            , but is more efficient as query
            execution stops on the first hit.
            <para />
            Also known as
            <c>querySelector()</c>
            in the Web DOM.
            </remarks>
            <param name="cssQuery">
            cssQuery a
            <see cref="T:iText.StyledXmlParser.Jsoup.Select.Selector"/>
            CSS-like query
            </param>
            <returns>
            the first matching element, or <b>
            <see langword="null"/>
            </b> if there is no match.
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.SelectFirst(iText.StyledXmlParser.Jsoup.Select.Evaluator)">
            <summary>
            Finds the first Element that matches the supplied Evaluator, with this element as the starting context, or
            <see langword="null"/>
            if none match.
            </summary>
            <param name="evaluator">an element evaluator</param>
            <returns>
            the first matching element (walking down the tree, starting from this element), or
            <see langword="null"/>
            if none
            matchn.
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Is(System.String)">
            <summary>
            Checks if this element matches the given
            <see cref="T:iText.StyledXmlParser.Jsoup.Select.Selector"/>
            CSS query.
            </summary>
            <remarks>
            Checks if this element matches the given
            <see cref="T:iText.StyledXmlParser.Jsoup.Select.Selector"/>
            CSS query. Also knows as
            <c>matches()</c>
            in the Web
            DOM.
            </remarks>
            <param name="cssQuery">
            a
            <see cref="T:iText.StyledXmlParser.Jsoup.Select.Selector"/>
            CSS query
            </param>
            <returns>if this element matches the query</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Is(iText.StyledXmlParser.Jsoup.Select.Evaluator)">
            <summary>Check if this element matches the given evaluator.</summary>
            <param name="evaluator">an element evaluator</param>
            <returns>if this element matches</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Closest(System.String)">
            <summary>Find the closest element up the tree of parents that matches the specified CSS query.</summary>
            <remarks>
            Find the closest element up the tree of parents that matches the specified CSS query. Will return itself, an
            ancestor, or
            <see langword="null"/>
            if there is no such matching element.
            </remarks>
            <param name="cssQuery">
            a
            <see cref="T:iText.StyledXmlParser.Jsoup.Select.Selector"/>
            CSS query
            </param>
            <returns>
            the closest ancestor element (possibly itself) that matches the provided evaluator.
            <see langword="null"/>
            if not
            found.
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Closest(iText.StyledXmlParser.Jsoup.Select.Evaluator)">
            <summary>Find the closest element up the tree of parents that matches the specified evaluator.</summary>
            <remarks>
            Find the closest element up the tree of parents that matches the specified evaluator. Will return itself, an
            ancestor, or
            <see langword="null"/>
            if there is no such matching element.
            </remarks>
            <param name="evaluator">a query evaluator</param>
            <returns>
            the closest ancestor element (possibly itself) that matches the provided evaluator.
            <see langword="null"/>
            if not
            found.
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.AppendChild(iText.StyledXmlParser.Jsoup.Nodes.Node)">
            <summary>Insert a node to the end of this Element's children.</summary>
            <remarks>Insert a node to the end of this Element's children. The incoming node will be re-parented.</remarks>
            <param name="child">node to add.</param>
            <returns>this Element, for chaining</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.PrependChild(iText.StyledXmlParser.Jsoup.Nodes.Node)"/>
            <seealso cref="!:InsertChildren(int, System.Collections.Generic.ICollection&lt;E&gt;)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.AppendChildren``1(System.Collections.Generic.ICollection{``0})">
            <summary>Insert the given nodes to the end of this Element's children.</summary>
            <param name="children">nodes to add</param>
            <returns>this Element, for chaining</returns>
            <seealso cref="!:InsertChildren(int, System.Collections.Generic.ICollection&lt;E&gt;)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.AppendTo(iText.StyledXmlParser.Jsoup.Nodes.Element)">
            <summary>Add this element to the supplied parent element, as its next child.</summary>
            <param name="parent">element to which this element will be appended</param>
            <returns>this element, so that you can continue modifying the element</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.PrependChild(iText.StyledXmlParser.Jsoup.Nodes.Node)">
            <summary>Add a node to the start of this element's children.</summary>
            <param name="child">node to add.</param>
            <returns>this element, so that you can add more child nodes or elements.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.PrependChildren``1(System.Collections.Generic.ICollection{``0})">
            <summary>Insert the given nodes to the start of this Element's children.</summary>
            <param name="children">nodes to add</param>
            <returns>this Element, for chaining</returns>
            <seealso cref="!:InsertChildren(int, System.Collections.Generic.ICollection&lt;E&gt;)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.InsertChildren``1(System.Int32,System.Collections.Generic.ICollection{``0})">
            <summary>Inserts the given child nodes into this element at the specified index.</summary>
            <remarks>
            Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the
            right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first.
            </remarks>
            <param name="index">
            0-based index to insert children at. Specify
            <c>0</c>
            to insert at the start,
            <c>-1</c>
            at the
            end
            </param>
            <param name="children">child nodes to insert</param>
            <returns>this element, for chaining.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.InsertChildren(System.Int32,iText.StyledXmlParser.Jsoup.Nodes.Node[])">
            <summary>Inserts the given child nodes into this element at the specified index.</summary>
            <remarks>
            Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the
            right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first.
            </remarks>
            <param name="index">
            0-based index to insert children at. Specify
            <c>0</c>
            to insert at the start,
            <c>-1</c>
            at the
            end
            </param>
            <param name="children">child nodes to insert</param>
            <returns>this element, for chaining.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.InsertChild(System.Int32,iText.StyledXmlParser.Jsoup.Nodes.Node)">
            <summary>Inserts the given child node into this element at the specified index.</summary>
            <remarks>
            Inserts the given child node into this element at the specified index. Current node will be shifted to the
            right. The inserted nodes will be moved from their current parent. To prevent moving, copy the node first.
            </remarks>
            <param name="index">
            0-based index to insert children at. Specify
            <c>0</c>
            to insert at the start,
            <c>-1</c>
            at the
            end
            </param>
            <param name="child">child node to insert</param>
            <returns>this element, for chaining.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.AppendElement(System.String)">
            <summary>Create a new element by tag name, and add it as the last child.</summary>
            <param name="tagName">
            the name of the tag (e.g.
            <c>div</c>
            ).
            </param>
            <returns>
            the new element, to allow you to add content to it, e.g.:
            <c>parent.appendElement("h1").attr("id", "header").text("Welcome");</c>
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.PrependElement(System.String)">
            <summary>Create a new element by tag name, and add it as the first child.</summary>
            <param name="tagName">
            the name of the tag (e.g.
            <c>div</c>
            ).
            </param>
            <returns>
            the new element, to allow you to add content to it, e.g.:
            <c>parent.prependElement("h1").attr("id", "header").text("Welcome");</c>
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.AppendText(System.String)">
            <summary>Create and append a new TextNode to this element.</summary>
            <param name="text">the unencoded text to add</param>
            <returns>this element</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.PrependText(System.String)">
            <summary>Create and prepend a new TextNode to this element.</summary>
            <param name="text">the unencoded text to add</param>
            <returns>this element</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Append(System.String)">
            <summary>Add inner HTML to this element.</summary>
            <remarks>Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.
                </remarks>
            <param name="html">HTML to add inside this element, after the existing HTML</param>
            <returns>this element</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Html(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Prepend(System.String)">
            <summary>Add inner HTML into this element.</summary>
            <remarks>Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element's children.
                </remarks>
            <param name="html">HTML to add inside this element, before the existing HTML</param>
            <returns>this element</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Html(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Before(System.String)">
            <summary>Insert the specified HTML into the DOM before this element (as a preceding sibling).</summary>
            <param name="html">HTML to add before this element</param>
            <returns>this element, for chaining</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.After(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Before(iText.StyledXmlParser.Jsoup.Nodes.Node)">
            <summary>Insert the specified node into the DOM before this node (as a preceding sibling).</summary>
            <param name="node">to add before this element</param>
            <returns>this Element, for chaining</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.After(iText.StyledXmlParser.Jsoup.Nodes.Node)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.After(System.String)">
            <summary>Insert the specified HTML into the DOM after this element (as a following sibling).</summary>
            <param name="html">HTML to add after this element</param>
            <returns>this element, for chaining</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Before(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.After(iText.StyledXmlParser.Jsoup.Nodes.Node)">
            <summary>Insert the specified node into the DOM after this node (as a following sibling).</summary>
            <param name="node">to add after this element</param>
            <returns>this element, for chaining</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Before(iText.StyledXmlParser.Jsoup.Nodes.Node)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Empty">
            <summary>Remove all of the element's child nodes.</summary>
            <remarks>Remove all of the element's child nodes. Any attributes are left as-is.</remarks>
            <returns>this element</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Wrap(System.String)">
            <summary>Wrap the supplied HTML around this element.</summary>
            <param name="html">
            HTML to wrap around this element, e.g.
            <c>&lt;div class="head"&gt;&lt;/div&gt;</c>
            . Can be arbitrarily deep.
            </param>
            <returns>this element, for chaining.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.CssSelector">
            <summary>Get a CSS selector that will uniquely select this element.</summary>
            <remarks>
            Get a CSS selector that will uniquely select this element.
            <para />
            If the element has an ID, returns #id;
            otherwise returns the parent (if any) CSS selector, followed by
            <c>'&gt;'</c>
            ,
            followed by a unique selector for the element (tag.class.class:nth-child(n)).
            </remarks>
            <returns>the CSS Path that can be used to retrieve the element in a selector.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.SiblingElements">
            <summary>Get sibling elements.</summary>
            <remarks>
            Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling
            of itself, so will not be included in the returned list.
            </remarks>
            <returns>sibling elements</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.NextElementSibling">
            <summary>Gets the next sibling element of this element.</summary>
            <remarks>
            Gets the next sibling element of this element. E.g., if a
            <c>div</c>
            contains two
            <c>p</c>
            s,
            the
            <c>nextElementSibling</c>
            of the first
            <c>p</c>
            is the second
            <c>p</c>.
            <para />
            This is similar to
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.NextSibling"/>
            , but specifically finds only Elements
            </remarks>
            <returns>the next element, or null if there is no next element</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.PreviousElementSibling"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.NextElementSiblings">
            <summary>Get each of the sibling elements that come after this element.</summary>
            <returns>each of the element siblings after this element, or an empty list if there are no next sibling elements
                </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.PreviousElementSibling">
            <summary>Gets the previous element sibling of this element.</summary>
            <returns>the previous element, or null if there is no previous element</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.NextElementSibling"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.PreviousElementSiblings">
            <summary>Get each of the element siblings before this element.</summary>
            <returns>the previous element siblings, or an empty list if there are none.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.FirstElementSibling">
            <summary>Gets the first Element sibling of this element.</summary>
            <remarks>Gets the first Element sibling of this element. That may be this element.</remarks>
            <returns>the first sibling that is an element (aka the parent's first element child)</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.ElementSiblingIndex">
            <summary>Get the list index of this element in its element sibling list.</summary>
            <remarks>
            Get the list index of this element in its element sibling list. I.e. if this is the first element
            sibling, returns 0.
            </remarks>
            <returns>position in element sibling list</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.LastElementSibling">
            <summary>Gets the last element sibling of this element.</summary>
            <remarks>Gets the last element sibling of this element. That may be this element.</remarks>
            <returns>the last sibling that is an element (aka the parent's last element child)</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsByTag(System.String)">
            <summary>Finds elements, including and recursively under this element, with the specified tag name.</summary>
            <param name="tagName">The tag name to search for (case insensitively).</param>
            <returns>a matching unmodifiable list of elements. Will be empty if this element and none of its children match.
                </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementById(System.String)">
            <summary>Find an element by ID, including or under this element.</summary>
            <remarks>
            Find an element by ID, including or under this element.
            <para />
            Note that this finds the first matching ID, starting with this element. If you search down from a different
            starting point, it is possible to find a different element by ID. For unique element by ID within a Document,
            use
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementById(System.String)"/>
            </remarks>
            <param name="id">The ID to search for.</param>
            <returns>The first matching element by ID, starting with this element, or null if none found.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsByClass(System.String)">
            <summary>Find elements that have this class, including or under this element.</summary>
            <remarks>
            Find elements that have this class, including or under this element. Case insensitive.
            <para />
            Elements can have multiple classes (e.g.
            <c>&lt;div class="header round first"&gt;</c>
            . This method
            checks each class, so you can find the above with
            <c>el.getElementsByClass("header");</c>.
            </remarks>
            <param name="className">the name of the class to search for.</param>
            <returns>elements with the supplied class name, empty if none</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.HasClass(System.String)"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.ClassNames"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsByAttribute(System.String)">
            <summary>Find elements that have a named attribute set.</summary>
            <remarks>Find elements that have a named attribute set. Case insensitive.</remarks>
            <param name="key">
            name of the attribute, e.g.
            <c>href</c>
            </param>
            <returns>elements that have this attribute, empty if none</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsByAttributeStarting(System.String)">
            <summary>Find elements that have an attribute name starting with the supplied prefix.</summary>
            <remarks>
            Find elements that have an attribute name starting with the supplied prefix. Use
            <c>data-</c>
            to find elements
            that have HTML5 datasets.
            </remarks>
            <param name="keyPrefix">
            name prefix of the attribute e.g.
            <c>data-</c>
            </param>
            <returns>elements that have attribute names that start with with the prefix, empty if none.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsByAttributeValue(System.String,System.String)">
            <summary>Find elements that have an attribute with the specific value.</summary>
            <remarks>Find elements that have an attribute with the specific value. Case insensitive.</remarks>
            <param name="key">name of the attribute</param>
            <param name="value">value of the attribute</param>
            <returns>elements that have this attribute with this value, empty if none</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsByAttributeValueNot(System.String,System.String)">
            <summary>Find elements that either do not have this attribute, or have it with a different value.</summary>
            <remarks>Find elements that either do not have this attribute, or have it with a different value. Case insensitive.
                </remarks>
            <param name="key">name of the attribute</param>
            <param name="value">value of the attribute</param>
            <returns>elements that do not have a matching attribute</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsByAttributeValueStarting(System.String,System.String)">
            <summary>Find elements that have attributes that start with the value prefix.</summary>
            <remarks>Find elements that have attributes that start with the value prefix. Case insensitive.</remarks>
            <param name="key">name of the attribute</param>
            <param name="valuePrefix">start of attribute value</param>
            <returns>elements that have attributes that start with the value prefix</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsByAttributeValueEnding(System.String,System.String)">
            <summary>Find elements that have attributes that end with the value suffix.</summary>
            <remarks>Find elements that have attributes that end with the value suffix. Case insensitive.</remarks>
            <param name="key">name of the attribute</param>
            <param name="valueSuffix">end of the attribute value</param>
            <returns>elements that have attributes that end with the value suffix</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsByAttributeValueContaining(System.String,System.String)">
            <summary>Find elements that have attributes whose value contains the match string.</summary>
            <remarks>Find elements that have attributes whose value contains the match string. Case insensitive.</remarks>
            <param name="key">name of the attribute</param>
            <param name="match">substring of value to search for</param>
            <returns>elements that have attributes containing this text</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsByAttributeValueMatching(System.String,System.Text.RegularExpressions.Regex)">
            <summary>Find elements that have attributes whose values match the supplied regular expression.</summary>
            <param name="key">name of the attribute</param>
            <param name="pattern">compiled regular expression to match against attribute values</param>
            <returns>elements that have attributes matching this regular expression</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsByAttributeValueMatching(System.String,System.String)">
            <summary>Find elements that have attributes whose values match the supplied regular expression.</summary>
            <param name="key">name of the attribute</param>
            <param name="regex">
            regular expression to match against attribute values.
            You can use <a href="http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded">embedded flags</a>
            (such as (?i) and (?m) to control regex options.
            </param>
            <returns>elements that have attributes matching this regular expression</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsByIndexLessThan(System.Int32)">
            <summary>Find elements whose sibling index is less than the supplied index.</summary>
            <param name="index">0-based index</param>
            <returns>elements less than index</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsByIndexGreaterThan(System.Int32)">
            <summary>Find elements whose sibling index is greater than the supplied index.</summary>
            <param name="index">0-based index</param>
            <returns>elements greater than index</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsByIndexEquals(System.Int32)">
            <summary>Find elements whose sibling index is equal to the supplied index.</summary>
            <param name="index">0-based index</param>
            <returns>elements equal to index</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsContainingText(System.String)">
            <summary>Find elements that contain the specified string.</summary>
            <remarks>
            Find elements that contain the specified string. The search is case insensitive. The text may appear directly
            in the element, or in any of its descendants.
            </remarks>
            <param name="searchText">to look for in the element's text</param>
            <returns>elements that contain the string, case insensitive.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Text"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsContainingOwnText(System.String)">
            <summary>Find elements that directly contain the specified string.</summary>
            <remarks>
            Find elements that directly contain the specified string. The search is case insensitive. The text must appear directly
            in the element, not in any of its descendants.
            </remarks>
            <param name="searchText">to look for in the element's own text</param>
            <returns>elements that contain the string, case insensitive.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.OwnText"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsMatchingText(System.Text.RegularExpressions.Regex)">
            <summary>Find elements whose text matches the supplied regular expression.</summary>
            <param name="pattern">regular expression to match text against</param>
            <returns>elements matching the supplied regular expression.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Text"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsMatchingText(System.String)">
            <summary>Find elements whose text matches the supplied regular expression.</summary>
            <param name="regex">
            regular expression to match text against.
            You can use <a href="http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded">embedded flags</a>
            (such as (?i) and (?m) to control regex options.
            </param>
            <returns>elements matching the supplied regular expression.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Text"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsMatchingOwnText(System.Text.RegularExpressions.Regex)">
            <summary>Find elements whose own text matches the supplied regular expression.</summary>
            <param name="pattern">regular expression to match text against</param>
            <returns>elements matching the supplied regular expression.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.OwnText"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetElementsMatchingOwnText(System.String)">
            <summary>Find elements whose own text matches the supplied regular expression.</summary>
            <param name="regex">
            regular expression to match text against.
            You can use <a href="http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded">embedded flags</a>
            (such as (?i) and (?m) to control regex options.
            </param>
            <returns>elements matching the supplied regular expression.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.OwnText"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.GetAllElements">
            <summary>Find all elements under this element (including self, and children of children).</summary>
            <returns>all elements</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Text">
            <summary>Gets the <b>normalized, combined text</b> of this element and all its children.</summary>
            <remarks>
            Gets the <b>normalized, combined text</b> of this element and all its children. Whitespace is normalized and
            trimmed.
            <para />For example, given HTML
            <c>&lt;p&gt;Hello  &lt;b&gt;there&lt;/b&gt; now! &lt;/p&gt;</c>
            ,
            <c>p.text()</c>
            returns
            <c>
            "Hello there
            now!"
            </c>
            <para />If you do not want normalized text, use
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.WholeText"/>
            . If you want just the text of this node (and not
            children), use
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.OwnText"/>
            <para />Note that this method returns the textual content that would be presented to a reader. The contents of data
            nodes (such as
            <c>&lt;script&gt;</c>
            tags are not considered text. Use
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Data"/>
            or
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Html"/>
            to retrieve
            that content.
            </remarks>
            <returns>unencoded, normalized text, or empty string if none.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.WholeText"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.OwnText"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.TextNodes"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.WholeText">
            <summary>
            Get the (unencoded) text of all children of this element, including any newlines and spaces present in the
            original.
            </summary>
            <returns>unencoded, un-normalized text</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Text"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.OwnText">
            <summary>Gets the (normalized) text owned by this element only; does not get the combined text of all children.
                </summary>
            <remarks>
            Gets the (normalized) text owned by this element only; does not get the combined text of all children.
            <para />
            For example, given HTML
            <c>&lt;p&gt;Hello &lt;b&gt;there&lt;/b&gt; now!&lt;/p&gt;</c>
            ,
            <c>p.ownText()</c>
            returns
            <c>"Hello now!"</c>
            ,
            whereas
            <c>p.text()</c>
            returns
            <c>"Hello there now!"</c>.
            Note that the text within the
            <c>b</c>
            element is not returned, as it is not a direct child of the
            <c>p</c>
            element.
            </remarks>
            <returns>unencoded text, or empty string if none.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Text"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.TextNodes"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Text(System.String)">
            <summary>Set the text of this element.</summary>
            <remarks>
            Set the text of this element. Any existing contents (text or elements) will be cleared.
            <para />
            As a special case, for
            <c>&lt;script&gt;</c>
            and
            <c>&lt;style&gt;</c>
            tags, the input text will be treated as data,
            not visible text.
            </remarks>
            <param name="text">unencoded text</param>
            <returns>this element</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.HasText">
            <summary>Test if this element has any text content (that is not just whitespace).</summary>
            <returns>true if element has non-blank text content.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Data">
            <summary>Get the combined data of this element.</summary>
            <remarks>
            Get the combined data of this element. Data is e.g. the inside of a
            <c>&lt;script&gt;</c>
            tag. Note that data is NOT the
            text of the element. Use
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Text"/>
            to get the text that would be visible to a user, and
            <c>data()</c>
            for the contents of scripts, comments, CSS styles, etc.
            </remarks>
            <returns>the data, or empty string if none</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.DataNodes"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.ClassName">
            <summary>
            Gets the literal value of this element's "class" attribute, which may include multiple class names, space
            separated.
            </summary>
            <remarks>
            Gets the literal value of this element's "class" attribute, which may include multiple class names, space
            separated. (E.g. on <c>&lt;div class="header gray"&gt;</c> returns, "<c>header gray</c>")
            </remarks>
            <returns>The literal class attribute, or <b>empty string</b> if no class attribute set.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.ClassNames">
            <summary>Get all of the element's class names.</summary>
            <remarks>
            Get all of the element's class names. E.g. on element
            <c>&lt;div class="header gray"&gt;</c>
            ,
            returns a set of two elements
            <c>"header", "gray"</c>
            . Note that modifications to this set are not pushed to
            the backing
            <c>class</c>
            attribute; use the
            <see cref="!:ClassNames(System.Collections.Generic.ICollection&lt;E&gt;)"/>
            method to persist them.
            </remarks>
            <returns>set of classnames, empty if no class attribute</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.ClassNames(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Set the element's
            <c>class</c>
            attribute to the supplied class names.
            </summary>
            <param name="classNames">set of classes</param>
            <returns>this element, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.HasClass(System.String)">
            <summary>Tests if this element has a class.</summary>
            <remarks>Tests if this element has a class. Case insensitive.</remarks>
            <param name="className">name of class to check for</param>
            <returns>true if it does, false if not</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.AddClass(System.String)">
            <summary>
            Add a class name to this element's
            <c>class</c>
            attribute.
            </summary>
            <param name="className">class name to add</param>
            <returns>this element</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.RemoveClass(System.String)">
            <summary>
            Remove a class name from this element's
            <c>class</c>
            attribute.
            </summary>
            <param name="className">class name to remove</param>
            <returns>this element</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.ToggleClass(System.String)">
            <summary>
            Toggle a class name on this element's
            <c>class</c>
            attribute: if present, remove it; otherwise add it.
            </summary>
            <param name="className">class name to toggle</param>
            <returns>this element</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Val">
            <summary>Get the value of a form element (input, textarea, etc).</summary>
            <returns>the value of the form element, or empty string if not set.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Val(System.String)">
            <summary>Set the value of a form element (input, textarea, etc).</summary>
            <param name="value">value to set</param>
            <returns>this element (for chaining)</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Html">
            <summary>Retrieves the element's inner HTML.</summary>
            <remarks>
            Retrieves the element's inner HTML. E.g. on a
            <c>&lt;div&gt;</c>
            with one empty
            <c>&lt;p&gt;</c>
            , would return
            <c>&lt;p&gt;&lt;/p&gt;</c>
            . (Whereas
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.OuterHtml"/>
            would return
            <c>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</c>
            .)
            </remarks>
            <returns>String of HTML.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.OuterHtml"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Html(System.String)">
            <summary>Set this element's inner HTML.</summary>
            <remarks>Set this element's inner HTML. Clears the existing HTML first.</remarks>
            <param name="html">HTML to parse and set into this element</param>
            <returns>this element</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Append(System.String)"/>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Nodes.Entities">
            <summary>HTML entities, and escape routines.</summary>
            <remarks>
            HTML entities, and escape routines. Source: <a href="http://www.w3.org/tr/html5/named-character-references.html#named-character-references">W3C
            HTML named character references</a>.
            </remarks>
        </member>
        <member name="F:iText.StyledXmlParser.Jsoup.Nodes.Entities.EscapeMode.xhtml">
            <summary>Restricted entities suitable for XHTML output: lt, gt, amp, and quot only.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Jsoup.Nodes.Entities.EscapeMode.base">
            <summary>Default HTML output entities.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Jsoup.Nodes.Entities.EscapeMode.extended">
            <summary>Complete HTML entities.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Entities.IsNamedEntity(System.String)">
            <summary>Check if the input is a known named entity</summary>
            <param name="name">the possible entity name (e.g. "lt" or "amp")</param>
            <returns>true if a known named entity</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Entities.IsBaseNamedEntity(System.String)">
            <summary>Check if the input is a known named entity in the base entity set.</summary>
            <param name="name">the possible entity name (e.g. "lt" or "amp")</param>
            <returns>true if a known named entity in the base set</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Entities.IsNamedEntity(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Entities.GetByName(System.String)">
            <summary>Get the character(s) represented by the named entity</summary>
            <param name="name">entity (e.g. "lt" or "amp")</param>
            <returns>the string value of the character(s) represented by this entity, or "" if not defined</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Entities.Escape(System.String,iText.StyledXmlParser.Jsoup.Nodes.OutputSettings)">
            <summary>HTML escape an input string.</summary>
            <remarks>
            HTML escape an input string. That is,
            <c>&lt;</c>
            is returned as
            <c>&amp;lt;</c>
            </remarks>
            <param name="string">the un-escaped string to escape</param>
            <param name="out">the output settings to use</param>
            <returns>the escaped string</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Entities.Escape(System.String)">
            <summary>HTML escape an input string, using the default settings (UTF-8, base entities).</summary>
            <remarks>
            HTML escape an input string, using the default settings (UTF-8, base entities). That is,
            <c>&lt;</c>
            is returned as
            <c>&amp;lt;</c>
            </remarks>
            <param name="string">the un-escaped string to escape</param>
            <returns>the escaped string</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Entities.Unescape(System.String)">
            <summary>Un-escape an HTML escaped string.</summary>
            <remarks>
            Un-escape an HTML escaped string. That is,
            <c>&amp;lt;</c>
            is returned as
            <c>&lt;</c>.
            </remarks>
            <param name="string">the HTML string to un-escape</param>
            <returns>the unescaped string</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Entities.Unescape(System.String,System.Boolean)">
            <summary>Unescape the input string.</summary>
            <param name="string">to un-HTML-escape</param>
            <param name="strict">if "strict" (that is, requires trailing ';' char, otherwise that's optional)</param>
            <returns>unescaped string</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Nodes.EntitiesData">
            <summary>Holds packed data that represents Entity name=value pairs.</summary>
            <remarks>Holds packed data that represents Entity name=value pairs. Parsed by Entities, created by BuildEntities.
                </remarks>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Nodes.FormElement">
            <summary>A HTML Form Element provides ready access to the form fields/controls that are associated with it.
                </summary>
            <remarks>
            A HTML Form Element provides ready access to the form fields/controls that are associated with it. It also allows a
            form to easily be submitted.
            </remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.FormElement.#ctor(iText.StyledXmlParser.Jsoup.Parser.Tag,System.String,iText.StyledXmlParser.Jsoup.Nodes.Attributes)">
            <summary>Create a new, standalone form element.</summary>
            <param name="tag">tag of this element</param>
            <param name="baseUri">the base URI</param>
            <param name="attributes">initial attributes</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.FormElement.Elements">
            <summary>Get the list of form control elements associated with this form.</summary>
            <returns>form controls associated with this element.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.FormElement.AddElement(iText.StyledXmlParser.Jsoup.Nodes.Element)">
            <summary>Add a form control element to this form.</summary>
            <param name="element">form control to add</param>
            <returns>this form element, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.FormElement.FormData">
            <summary>Get the data that this form submits.</summary>
            <remarks>
            Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
            list will not be reflected in the DOM.
            </remarks>
            <returns>a list of key vals</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Nodes.Node">
            <summary>The base, abstract Node model.</summary>
            <remarks>The base, abstract Node model. Elements, Documents, Comments etc are all Node instances.</remarks>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.#ctor">
            <summary>Default constructor.</summary>
            <remarks>Default constructor. Doesn't setup base uri, children, or attributes; use with caution.</remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.NodeName">
            <summary>Get the node name of this node.</summary>
            <remarks>Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof).
                </remarks>
            <returns>node name</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.HasAttributes">
            <summary>Check if this Node has an actual Attributes object.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.HasParent">
            <summary>Checks if this node has a parent.</summary>
            <remarks>
            Checks if this node has a parent. Nodes won't have parents if (e.g.) they are newly created and not added as a child
            to an existing node, or if they are a
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ShallowClone"/>
            . In such cases,
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Parent"/>
            will return
            <see langword="null"/>.
            </remarks>
            <returns>if this node has a parent.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Attr(System.String)">
            <summary>Get an attribute's value by its key.</summary>
            <remarks>
            Get an attribute's value by its key. <b>Case insensitive</b>
            <para />
            To get an absolute URL from an attribute that may be a relative URL, prefix the key with <c><b>abs</b></c>,
            which is a shortcut to the
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.AbsUrl(System.String)"/>
            method.
            <para />
            E.g.:
            <blockquote><c>String url = a.attr("abs:href");</c></blockquote>
            </remarks>
            <param name="attributeKey">The attribute key.</param>
            <returns>The attribute, or empty string if not present (to avoid nulls).</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Attributes"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.HasAttr(System.String)"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.AbsUrl(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Attributes">
            <summary>Get all of the element's attributes.</summary>
            <returns>attributes (which implements iterable, in same order as presented in original HTML).</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Attr(System.String,System.String)">
            <summary>Set an attribute (key=value).</summary>
            <remarks>
            Set an attribute (key=value). If the attribute already exists, it is replaced. The attribute key comparison is
            <b>case insensitive</b>. The key will be set with case sensitivity as set in the parser settings.
            </remarks>
            <param name="attributeKey">The attribute key.</param>
            <param name="attributeValue">The attribute value.</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.HasAttr(System.String)">
            <summary>Test if this element has an attribute.</summary>
            <remarks>Test if this element has an attribute. <b>Case insensitive</b></remarks>
            <param name="attributeKey">The attribute key to check.</param>
            <returns>true if the attribute exists, false if not.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.RemoveAttr(System.String)">
            <summary>Remove an attribute from this node.</summary>
            <param name="attributeKey">The attribute to remove.</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ClearAttributes">
            <summary>Clear (remove) all of the attributes in this node.</summary>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.BaseUri">
            <summary>Get the base URI that applies to this node.</summary>
            <remarks>
            Get the base URI that applies to this node. Will return an empty string if not defined. Used to make relative links
            absolute.
            </remarks>
            <returns>base URI</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.AbsUrl(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.DoSetBaseUri(System.String)">
            <summary>Set the baseUri for just this node (not its descendants), if this Node tracks base URIs.</summary>
            <param name="baseUri">new URI</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.SetBaseUri(System.String)">
            <summary>Update the base URI of this node and all of its descendants.</summary>
            <param name="baseUri">base URI to set</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.AbsUrl(System.String)">
            <summary>
            Get an absolute URL from a URL attribute that may be relative (such as an <c>&lt;a href&gt;</c> or
            <c>&lt;img src&gt;</c>).
            </summary>
            <remarks>
            Get an absolute URL from a URL attribute that may be relative (such as an <c>&lt;a href&gt;</c> or
            <c>&lt;img src&gt;</c>).
            <para />
            E.g.: <c>String absUrl = linkEl.absUrl("href");</c>
            <para />
            If the attribute value is already absolute (i.e. it starts with a protocol, like
            <c>http://</c> or <c>https://</c> etc), and it successfully parses as a URL, the attribute is
            returned directly. Otherwise, it is treated as a URL relative to the element's
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.BaseUri"/>
            , and made
            absolute using that.
            <para />
            As an alternate, you can use the
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Attr(System.String)"/>
            method with the <c>abs:</c> prefix, e.g.:
            <c>String absUrl = linkEl.attr("abs:href");</c>
            </remarks>
            <param name="attributeKey">The attribute key</param>
            <returns>
            An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
            could not be made successfully into a URL.
            </returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Attr(System.String)"/>
            <seealso cref="!:System.Uri.URL(System.Uri, System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ChildNode(System.Int32)">
            <summary>Get a child node by its 0-based index.</summary>
            <param name="index">index of child node</param>
            <returns>
            the child node at this index. Throws a
            <c>IndexOutOfBoundsException</c>
            if the index is out of bounds.
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ChildNodes">
            <summary>Get this node's children.</summary>
            <remarks>
            Get this node's children. Presented as an unmodifiable list: new children can not be added, but the child nodes
            themselves can be manipulated.
            </remarks>
            <returns>list of children. If no children, returns an empty list.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ChildNodesCopy">
            <summary>Returns a deep copy of this node's children.</summary>
            <remarks>
            Returns a deep copy of this node's children. Changes made to these nodes will not be reflected in the original
            nodes
            </remarks>
            <returns>a deep copy of this node's children</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ChildNodeSize">
            <summary>Get the number of child nodes that this node holds.</summary>
            <returns>the number of child nodes that this node holds.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Empty">
            <summary>Delete all this node's children.</summary>
            <returns>this node, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Parent">
            <summary>Gets this node's parent node.</summary>
            <returns>parent node; or null if no parent.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.HasParent"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ParentNode">
            <summary>Gets this node's parent node.</summary>
            <remarks>Gets this node's parent node. Not overridable by extending classes, so useful if you really just need the Node type.
                </remarks>
            <returns>parent node; or null if no parent.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Root">
            <summary>Get this node's root node; that is, its topmost ancestor.</summary>
            <remarks>
            Get this node's root node; that is, its topmost ancestor. If this node is the top ancestor, returns
            <c>this</c>.
            </remarks>
            <returns>topmost ancestor.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.OwnerDocument">
            <summary>Gets the Document associated with this Node.</summary>
            <returns>the Document associated with this Node, or null if there is no such Document.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Remove">
            <summary>Remove (delete) this node from the DOM tree.</summary>
            <remarks>Remove (delete) this node from the DOM tree. If this node has children, they are also removed.</remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Before(System.String)">
            <summary>Insert the specified HTML into the DOM before this node (as a preceding sibling).</summary>
            <param name="html">HTML to add before this node</param>
            <returns>this node, for chaining</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.After(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Before(iText.StyledXmlParser.Jsoup.Nodes.Node)">
            <summary>Insert the specified node into the DOM before this node (as a preceding sibling).</summary>
            <param name="node">to add before this node</param>
            <returns>this node, for chaining</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.After(iText.StyledXmlParser.Jsoup.Nodes.Node)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.After(System.String)">
            <summary>Insert the specified HTML into the DOM after this node (as a following sibling).</summary>
            <param name="html">HTML to add after this node</param>
            <returns>this node, for chaining</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Before(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.After(iText.StyledXmlParser.Jsoup.Nodes.Node)">
            <summary>Insert the specified node into the DOM after this node (as a following sibling).</summary>
            <param name="node">to add after this node</param>
            <returns>this node, for chaining</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Before(iText.StyledXmlParser.Jsoup.Nodes.Node)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Wrap(System.String)">
            <summary>Wrap the supplied HTML around this node.</summary>
            <param name="html">
            HTML to wrap around this node, e.g.
            <c>&lt;div class="head"&gt;&lt;/div&gt;</c>
            . Can be arbitrarily deep. If
            the input HTML does not parse to a result starting with an Element, this will be a no-op.
            </param>
            <returns>this node, for chaining.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Unwrap">
            <summary>Removes this node from the DOM, and moves its children up into the node's parent.</summary>
            <remarks>
            Removes this node from the DOM, and moves its children up into the node's parent. This has the effect of dropping
            the node but keeping its children.
            <para />
            For example, with the input html:
            <para />
            <c>&lt;div&gt;One &lt;span&gt;Two &lt;b&gt;Three&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;</c>
            Calling
            <c>element.unwrap()</c>
            on the
            <c>span</c>
            element will result in the html:
            <para />
            <c>&lt;div&gt;One Two &lt;b&gt;Three&lt;/b&gt;&lt;/div&gt;</c>
            and the
            <c>"Two "</c>
            
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.TextNode"/>
            being returned.
            </remarks>
            <returns>the first child of this node, after the node has been unwrapped. @{code Null} if the node had no children.
                </returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Remove"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Wrap(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ReplaceWith(iText.StyledXmlParser.Jsoup.Nodes.Node)">
            <summary>Replace this node in the DOM with the supplied node.</summary>
            <param name="in">the node that will will replace the existing node.</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.SiblingNodes">
            <summary>Retrieves this node's sibling nodes.</summary>
            <remarks>
            Retrieves this node's sibling nodes. Similar to
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ChildNodes">node.parent.childNodes()</see>
            , but does not
            include this node (a node is not a sibling of itself).
            </remarks>
            <returns>node siblings. If the node has no parent, returns an empty list.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.NextSibling">
            <summary>Get this node's next sibling.</summary>
            <returns>next sibling, or @{code null} if this is the last sibling</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.PreviousSibling">
            <summary>Get this node's previous sibling.</summary>
            <returns>the previous sibling, or @{code null} if this is the first sibling</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.SiblingIndex">
            <summary>Get the list index of this node in its node sibling list.</summary>
            <remarks>
            Get the list index of this node in its node sibling list. E.g. if this is the first node
            sibling, returns 0.
            </remarks>
            <returns>position in node sibling list</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.ElementSiblingIndex"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Traverse(iText.StyledXmlParser.Jsoup.Select.NodeVisitor)">
            <summary>Perform a depth-first traversal through this node and its descendants.</summary>
            <param name="nodeVisitor">the visitor callbacks to perform on each node</param>
            <returns>this node, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Filter(iText.StyledXmlParser.Jsoup.Select.NodeFilter)">
            <summary>Perform a depth-first filtering through this node and its descendants.</summary>
            <param name="nodeFilter">the filter callbacks to perform on each node</param>
            <returns>this node, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.OuterHtml">
            <summary>Get the outer HTML of this node.</summary>
            <remarks>
            Get the outer HTML of this node. For example, on a
            <c>p</c>
            element, may return
            <c>&lt;p&gt;Para&lt;/p&gt;</c>.
            </remarks>
            <returns>outer HTML</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Html"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Text"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.OuterHtmlHead(System.Text.StringBuilder,System.Int32,iText.StyledXmlParser.Jsoup.Nodes.OutputSettings)">
            <summary>Get the outer HTML of this node.</summary>
            <param name="accum">accumulator to place HTML into</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Html(System.Text.StringBuilder)">
            <summary>
            Write this node and its children to the given
            <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="appendable">
            the
            <see cref="T:System.Text.StringBuilder"/>
            to write to.
            </param>
            <returns>
            the supplied
            <see cref="T:System.Text.StringBuilder"/>
            , for chaining.
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ToString">
            <summary>Gets this node's outer HTML.</summary>
            <returns>outer HTML.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.OuterHtml"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Equals(System.Object)">
            <summary>Check if this node is the same instance of another (object identity test).</summary>
            <remarks>
            Check if this node is the same instance of another (object identity test).
            <para />
            For an node value equality check, see
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.HasSameValue(System.Object)"/>
            </remarks>
            <param name="o">other object to compare to</param>
            <returns>true if the content of this node is the same as the other</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.HasSameValue(System.Object)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.HasSameValue(System.Object)">
            <summary>Check if this node is has the same content as another node.</summary>
            <remarks>
            Check if this node is has the same content as another node. A node is considered the same if its name, attributes and content match the
            other node; particularly its position in the tree does not influence its similarity.
            </remarks>
            <param name="o">other object to compare to</param>
            <returns>true if the content of this node is the same as the other</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Clone">
            <summary>Create a stand-alone, deep copy of this node, and all of its children.</summary>
            <remarks>
            Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or
            parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the
            original node.
            <para />
            The cloned node may be adopted into another Document or node structure using
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.AppendChild(iText.StyledXmlParser.Jsoup.Nodes.Node)"/>.
            </remarks>
            <returns>a stand-alone cloned node, including clones of any children</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ShallowClone"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ShallowClone">
            <summary>Create a stand-alone, shallow copy of this node.</summary>
            <remarks>
            Create a stand-alone, shallow copy of this node. None of its children (if any) will be cloned, and it will have
            no parent or sibling nodes.
            </remarks>
            <returns>a single independent copy of this node</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Clone"/>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Nodes.NodeUtils">
            <summary>Internal helpers for Nodes, to keep the actual node APIs relatively clean.</summary>
            <remarks>
            Internal helpers for Nodes, to keep the actual node APIs relatively clean. A jsoup internal class, so don't use it as
            there is no contract API).
            </remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.NodeUtils.OutputSettings(iText.StyledXmlParser.Jsoup.Nodes.Node)">
            <summary>
            Get the output setting for this node,  or if this node has no document (or parent), retrieve the default output
            settings
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.NodeUtils.Parser(iText.StyledXmlParser.Jsoup.Nodes.Node)">
            <summary>Get the parser that was used to make this node, or the default HTML parser if it has no parent.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Nodes.PseudoTextElement">
            <summary>
            Represents a
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.TextNode"/>
            as an
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.Element"/>
            , to enable text nodes to be selected with
            the
            <see cref="T:iText.StyledXmlParser.Jsoup.Select.Selector"/>
            
            <c>:matchText</c>
            syntax.
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Nodes.TextNode">
            <summary>A text node.</summary>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.TextNode.#ctor(System.String)">
            <summary>Create a new TextNode representing the supplied (unencoded) text).</summary>
            <param name="text">raw text</param>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.TextNode.CreateFromEncoded(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.TextNode.Text">
            <summary>Get the text content of this text node.</summary>
            <returns>Unencoded, normalised text.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.TextNode.GetWholeText"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.TextNode.Text(System.String)">
            <summary>Set the text content of this text node.</summary>
            <param name="text">unencoded text</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.TextNode.GetWholeText">
            <summary>Get the (unencoded) text of this text node, including any newlines and spaces present in the original.
                </summary>
            <returns>text</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.TextNode.IsBlank">
            <summary>Test if this text node is blank -- that is, empty or only whitespace (including newlines).</summary>
            <returns>true if this document is empty or only whitespace, false if it contains any text content.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.TextNode.SplitText(System.Int32)">
            <summary>Split this text node into two nodes at the specified string offset.</summary>
            <remarks>
            Split this text node into two nodes at the specified string offset. After splitting, this node will contain the
            original text up to the offset, and will have a new text node sibling containing the text after the offset.
            </remarks>
            <param name="offset">string offset point to split node at.</param>
            <returns>the newly created text node containing the text after the offset.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.TextNode.CreateFromEncoded(System.String)">
            <summary>Create a new TextNode from HTML encoded (aka escaped) data.</summary>
            <param name="encodedText">Text containing encoded HTML (e.g. &amp;lt;)</param>
            <returns>TextNode containing unencoded data (e.g. &lt;)</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Nodes.XmlDeclaration">
            <summary>An XML Declaration.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.XmlDeclaration.#ctor(System.String,System.Boolean)">
            <summary>Create a new XML declaration</summary>
            <param name="name">of declaration</param>
            <param name="isProcessingInstruction">is processing instruction</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.XmlDeclaration.Name">
            <summary>Get the name of this declaration.</summary>
            <returns>name of this declaration.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Nodes.XmlDeclaration.GetWholeDeclaration">
            <summary>Get the unencoded XML declaration.</summary>
            <returns>XML declaration</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Parser.CharacterReader">
            <summary>CharacterReader consumes tokens off a string.</summary>
            <remarks>CharacterReader consumes tokens off a string. Used internally by jsoup. API subject to changes.</remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.CharacterReader.Pos">
            <summary>Gets the current cursor position in the content.</summary>
            <returns>current position</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.CharacterReader.IsEmpty">
            <summary>Tests if all the content has been read.</summary>
            <returns>true if nothing left to read.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.CharacterReader.Current">
            <summary>Get the char at the current position.</summary>
            <returns>char</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.CharacterReader.Unconsume">
            <summary>Unconsume one character (bufPos--).</summary>
            <remarks>Unconsume one character (bufPos--). MUST only be called directly after a consume(), and no chance of a bufferUp.
                </remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.CharacterReader.Advance">
            <summary>Moves the current position by one.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.CharacterReader.NextIndexOf(System.Char)">
            <summary>Returns the number of characters between the current position and the next instance of the input char
                </summary>
            <param name="c">scan target</param>
            <returns>offset between current position and next instance of target. -1 if not found.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.CharacterReader.NextIndexOf(System.String)">
            <summary>Returns the number of characters between the current position and the next instance of the input sequence
                </summary>
            <param name="seq">scan target</param>
            <returns>offset between current position and next instance of target. -1 if not found.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.CharacterReader.ConsumeTo(System.Char)">
            <summary>Reads characters up to the specific char.</summary>
            <param name="c">the delimiter</param>
            <returns>the chars read</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.CharacterReader.ConsumeToAny(System.Char[])">
            <summary>Read characters until the first of any delimiters is found.</summary>
            <param name="chars">delimiters to scan for</param>
            <returns>characters read up to the matched delimiter.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.CharacterReader.CacheString(System.Char[],System.String[],System.Int32,System.Int32)">
            <summary>Caches short strings, as a flywheel pattern, to reduce GC load.</summary>
            <remarks>
            Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
            <p />
            Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
            That saves both having to create objects as hash keys, and running through the entry list, at the expense of
            some more duplicates.
            </remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.CharacterReader.RangeEquals(System.Char[],System.Int32,System.Int32,System.String)">
            <summary>Check if the value of the provided range equals the string.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Parser.HtmlTreeBuilder">
            <summary>HTML Tree Builder; creates a DOM from Tokens.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.HtmlTreeBuilder.GenerateImpliedEndTags(System.String)">
            <summary>11.2.5.2 Closing elements that have implied end tags</summary>
            <remarks>
            11.2.5.2 Closing elements that have implied end tags
            <para />
            When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a
            dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,
            the UA must pop the current node off the stack of open elements.
            </remarks>
            <param name="excludeTag">
            If a step requires the UA to generate implied end tags but lists an element to exclude from the
            process, then the UA must perform the above steps as if that element was not in the above list.
            </param>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Parser.HtmlTreeBuilderState">
            <summary>The Tree Builder's current state.</summary>
            <remarks>The Tree Builder's current state. Each state embodies the processing for the state, and transitions to other states.
                </remarks>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Parser.ParseError">
            <summary>A Parse Error records an error in the input HTML that occurs in either the tokenisation or the tree building phase.
                </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.ParseError.GetErrorMessage">
            <summary>Retrieve the error message.</summary>
            <returns>the error message.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.ParseError.GetPosition">
            <summary>Retrieves the offset of the error.</summary>
            <returns>error offset within input</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Parser.ParseErrorList">
            <summary>A container for ParseErrors.</summary>
            <author>Jonathan Hedley</author>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.ParseErrorList.#ctor(iText.StyledXmlParser.Jsoup.Parser.ParseErrorList)">
            <summary>Create a new ParseErrorList with the same settings, but no errors in the list</summary>
            <param name="copy">initial and max size details to copy</param>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Parser.Parser">
            <summary>
            Parses HTML into a
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.Document"/>.
            </summary>
            <remarks>
            Parses HTML into a
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.Document"/>
            . Generally best to use one of the  more convenient parse methods
            in
            <see cref="T:iText.StyledXmlParser.Jsoup.Jsoup"/>.
            </remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Parser.#ctor(iText.StyledXmlParser.Jsoup.Parser.TreeBuilder)">
            <summary>Create a new Parser, using the specified TreeBuilder</summary>
            <param name="treeBuilder">TreeBuilder to use to parse input into Documents.</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Parser.NewInstance">
            <summary>Creates a new Parser as a deep copy of this; including initializing a new TreeBuilder.</summary>
            <remarks>Creates a new Parser as a deep copy of this; including initializing a new TreeBuilder. Allows independent (multi-threaded) use.
                </remarks>
            <returns>a copied parser</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Parser.GetTreeBuilder">
            <summary>Get the TreeBuilder currently in use.</summary>
            <returns>current TreeBuilder.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Parser.SetTreeBuilder(iText.StyledXmlParser.Jsoup.Parser.TreeBuilder)">
            <summary>Update the TreeBuilder used when parsing content.</summary>
            <param name="treeBuilder">current TreeBuilder</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Parser.IsTrackErrors">
            <summary>Check if parse error tracking is enabled.</summary>
            <returns>current track error state.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Parser.SetTrackErrors(System.Int32)">
            <summary>Enable or disable parse error tracking for the next parse.</summary>
            <param name="maxErrors">the maximum number of errors to track. Set to 0 to disable.</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Parser.GetErrors">
            <summary>Retrieve the parse errors, if any, from the last parse.</summary>
            <returns>list of parse errors, up to the size of the maximum errors tracked.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Parser.IsContentForTagData(System.String)">
            <summary>(An internal method, visible for Element.</summary>
            <remarks>
            (An internal method, visible for Element. For HTML parse, signals that script and style text should be treated as
            Data Nodes).
            </remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Parser.Parse(System.String,System.String)">
            <summary>Parse HTML into a Document.</summary>
            <param name="html">HTML to parse</param>
            <param name="baseUri">base URI of document (i.e. original fetch location), for resolving relative URLs.</param>
            <returns>parsed Document</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Parser.ParseFragment(System.String,iText.StyledXmlParser.Jsoup.Nodes.Element,System.String)">
            <summary>Parse a fragment of HTML into a list of nodes.</summary>
            <remarks>Parse a fragment of HTML into a list of nodes. The context element, if supplied, supplies parsing context.
                </remarks>
            <param name="fragmentHtml">the fragment of HTML to parse</param>
            <param name="context">
            (optional) the element that this HTML fragment is being parsed for (i.e. for inner HTML). This
            provides stack context (for implicit element creation).
            </param>
            <param name="baseUri">base URI of document (i.e. original fetch location), for resolving relative URLs.</param>
            <returns>list of nodes parsed from the input HTML. Note that the context element, if supplied, is not modified.
                </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Parser.ParseFragment(System.String,iText.StyledXmlParser.Jsoup.Nodes.Element,System.String,iText.StyledXmlParser.Jsoup.Parser.ParseErrorList)">
            <summary>Parse a fragment of HTML into a list of nodes.</summary>
            <remarks>Parse a fragment of HTML into a list of nodes. The context element, if supplied, supplies parsing context.
                </remarks>
            <param name="fragmentHtml">the fragment of HTML to parse</param>
            <param name="context">
            (optional) the element that this HTML fragment is being parsed for (i.e. for inner HTML). This
            provides stack context (for implicit element creation).
            </param>
            <param name="baseUri">base URI of document (i.e. original fetch location), for resolving relative URLs.</param>
            <param name="errorList">list to add errors to</param>
            <returns>list of nodes parsed from the input HTML. Note that the context element, if supplied, is not modified.
                </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Parser.ParseXmlFragment(System.String,System.String)">
            <summary>Parse a fragment of XML into a list of nodes.</summary>
            <param name="fragmentXml">the fragment of XML to parse</param>
            <param name="baseUri">base URI of document (i.e. original fetch location), for resolving relative URLs.</param>
            <returns>list of nodes parsed from the input XML.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Parser.ParseBodyFragment(System.String,System.String)">
            <summary>
            Parse a fragment of HTML into the
            <c>body</c>
            of a Document.
            </summary>
            <param name="bodyHtml">fragment of HTML</param>
            <param name="baseUri">base URI of document (i.e. original fetch location), for resolving relative URLs.</param>
            <returns>Document, with empty head, and HTML parsed into body</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Parser.UnescapeEntities(System.String,System.Boolean)">
            <summary>Utility method to unescape HTML entities from a string</summary>
            <param name="string">HTML escaped string</param>
            <param name="inAttribute">if the string is to be escaped in strict mode (as attributes are)</param>
            <returns>an unescaped string</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Parser.HtmlParser">
            <summary>Create a new HTML parser.</summary>
            <remarks>
            Create a new HTML parser. This parser treats input as HTML5, and enforces the creation of a normalised document,
            based on a knowledge of the semantics of the incoming tags.
            </remarks>
            <returns>a new HTML parser.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Parser.XmlParser">
            <summary>Create a new XML parser.</summary>
            <remarks>
            Create a new XML parser. This parser assumes no knowledge of the incoming tags and does not treat it as HTML,
            rather creates a simple tree directly from the input.
            </remarks>
            <returns>a new simple XML parser.</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Parser.ParseSettings">
            <summary>Controls parser settings, to optionally preserve tag and/or attribute name case.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Jsoup.Parser.ParseSettings.htmlDefault">
            <summary>HTML default settings: both tag and attribute names are lower-cased during parsing.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Jsoup.Parser.ParseSettings.preserveCase">
            <summary>Preserve both tag and attribute case.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.ParseSettings.PreserveTagCase">
            <summary>Returns true if preserving tag name case.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.ParseSettings.PreserveAttributeCase">
            <summary>Returns true if preserving attribute case.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.ParseSettings.#ctor(System.Boolean,System.Boolean)">
            <summary>Define parse settings.</summary>
            <param name="tag">preserve tag case?</param>
            <param name="attribute">preserve attribute name case?</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.ParseSettings.NormalizeTag(System.String)">
            <summary>Normalizes a tag name according to the case preservation setting.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.ParseSettings.NormalizeAttribute(System.String)">
            <summary>Normalizes an attribute according to the case preservation setting.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Parser.Tag">
            <summary>HTML Tag capabilities.</summary>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Tag.GetName">
            <summary>Get this tag's name.</summary>
            <returns>the tag's name</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Tag.NormalName">
            <summary>Get this tag's normalized (lowercased) name.</summary>
            <returns>the tag's normal name.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Tag.ValueOf(System.String,iText.StyledXmlParser.Jsoup.Parser.ParseSettings)">
            <summary>Get a Tag by name.</summary>
            <remarks>
            Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.
            <para />
            Pre-defined tags (P, DIV etc) will be ==, but unknown tags are not registered and will only .equals().
            </remarks>
            <param name="tagName">Name of tag, e.g. "p". Case insensitive.</param>
            <param name="settings">used to control tag name sensitivity</param>
            <returns>The tag, either defined or new generic.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Tag.ValueOf(System.String)">
            <summary>Get a Tag by name.</summary>
            <remarks>
            Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.
            <para />
            Pre-defined tags (P, DIV etc) will be ==, but unknown tags are not registered and will only .equals().
            </remarks>
            <param name="tagName">Name of tag, e.g. "p". <b>Case sensitive</b>.</param>
            <returns>The tag, either defined or new generic.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Tag.IsBlock">
            <summary>Gets if this is a block tag.</summary>
            <returns>if block tag</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Tag.FormatAsBlock">
            <summary>Gets if this tag should be formatted as a block (or as inline)</summary>
            <returns>if should be formatted as block or inline</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Tag.IsInline">
            <summary>Gets if this tag is an inline tag.</summary>
            <returns>if this tag is an inline tag.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Tag.IsEmpty">
            <summary>Get if this is an empty tag</summary>
            <returns>if this is an empty tag</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Tag.IsSelfClosing">
            <summary>Get if this tag is self closing.</summary>
            <returns>if this tag should be output as self closing.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Tag.IsKnownTag">
            <summary>Get if this is a pre-defined tag, or was auto created on parsing.</summary>
            <returns>if a known tag</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Tag.IsKnownTag(System.String)">
            <summary>Check if this tagname is a known tag.</summary>
            <param name="tagName">name of tag</param>
            <returns>if known HTML tag</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Tag.PreserveWhitespace">
            <summary>Get if this tag should preserve whitespace within child text nodes.</summary>
            <returns>if preserve whitespace</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Tag.IsFormListed">
            <summary>Get if this tag represents a control associated with a form.</summary>
            <remarks>Get if this tag represents a control associated with a form. E.g. input, textarea, output</remarks>
            <returns>if associated with a form</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Tag.IsFormSubmittable">
            <summary>Get if this tag represents an element that should be submitted with a form.</summary>
            <remarks>Get if this tag represents an element that should be submitted with a form. E.g. input, option</remarks>
            <returns>if submittable with a form</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Parser.Token">
            <summary>Parse tokens for the Tokeniser.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Token.Reset">
            <summary>Reset the data represent by this token, for reuse.</summary>
            <remarks>
            Reset the data represent by this token, for reuse. Prevents the need to create transfer objects for every
            piece of data, which immediately get GCed.
            </remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Token.Tag.Name">
            <summary>Preserves case</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Token.Tag.NormalName">
            <summary>Lower case</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Parser.Tokeniser">
            <summary>Readers the input stream into tokens.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.Tokeniser.UnescapeEntities(System.Boolean)">
            <summary>Utility method to consume reader and unescape entities found within.</summary>
            <param name="inAttribute">if the text to be unescaped is in an attribute</param>
            <returns>unescaped string from reader</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Parser.TokeniserState">
            <summary>States and transition activations for the Tokeniser.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokeniserState.HandleDataEndTag(iText.StyledXmlParser.Jsoup.Parser.Tokeniser,iText.StyledXmlParser.Jsoup.Parser.CharacterReader,iText.StyledXmlParser.Jsoup.Parser.TokeniserState)">
            <summary>Handles RawtextEndTagName, ScriptDataEndTagName, and ScriptDataEscapedEndTagName.</summary>
            <remarks>
            Handles RawtextEndTagName, ScriptDataEndTagName, and ScriptDataEscapedEndTagName. Same body impl, just
            different else exit transitions.
            </remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokeniserState.RcDataTS.Read(iText.StyledXmlParser.Jsoup.Parser.Tokeniser,iText.StyledXmlParser.Jsoup.Parser.CharacterReader)">
            handles data in title, textarea etc
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Parser.TokenQueue">
            <summary>A character queue with parsing helpers.</summary>
            <author>Jonathan Hedley</author>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.#ctor(System.String)">
            <summary>Create a new TokenQueue.</summary>
            <param name="data">string of data to back queue.</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.IsEmpty">
            <summary>Is the queue empty?</summary>
            <returns>true if no data left in queue.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.Peek">
            <summary>Retrieves but does not remove the first character from the queue.</summary>
            <returns>First character, or 0 if empty.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.AddFirst(System.Nullable{System.Char})">
            <summary>Add a character to the start of the queue (will be the next character retrieved).</summary>
            <param name="c">character to add</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.AddFirst(System.String)">
            <summary>Add a string to the start of the queue.</summary>
            <param name="seq">string to add.</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.Matches(System.String)">
            <summary>Tests if the next characters on the queue match the sequence.</summary>
            <remarks>Tests if the next characters on the queue match the sequence. Case insensitive.</remarks>
            <param name="seq">String to check queue for.</param>
            <returns>true if the next characters match.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.MatchesCS(System.String)">
            <summary>Case sensitive match test.</summary>
            <param name="seq">string to case sensitively check for</param>
            <returns>true if matched, false if not</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.MatchesAny(System.String[])">
            <summary>Tests if the next characters match any of the sequences.</summary>
            <remarks>Tests if the next characters match any of the sequences. Case insensitive.</remarks>
            <param name="seq">list of strings to case insensitively check for</param>
            <returns>true of any matched, false if none did</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.MatchChomp(System.String)">
            <summary>
            Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the
            queue.
            </summary>
            <param name="seq">String to search for, and if found, remove from queue.</param>
            <returns>true if found and removed, false if not found.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.MatchesWhitespace">
            <summary>Tests if queue starts with a whitespace character.</summary>
            <returns>if starts with whitespace</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.MatchesWord">
            <summary>Test if the queue matches a word character (letter or digit).</summary>
            <returns>if matches a word character</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.Advance">
            <summary>Drops the next character off the queue.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.Consume">
            <summary>Consume one character off queue.</summary>
            <returns>first character on queue.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.Consume(System.String)">
            <summary>Consumes the supplied sequence of the queue.</summary>
            <remarks>
            Consumes the supplied sequence of the queue. If the queue does not start with the supplied sequence, will
            throw an illegal state exception -- but you should be running match() against that condition.
            <para />
            Case insensitive.
            </remarks>
            <param name="seq">sequence to remove from head of queue.</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.ConsumeTo(System.String)">
            <summary>Pulls a string off the queue, up to but exclusive of the match sequence, or to the queue running out.
                </summary>
            <param name="seq">String to end on (and not include in return, but leave on queue). <b>Case sensitive.</b>
                </param>
            <returns>The matched data consumed from queue.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.ConsumeToAny(System.String[])">
            <summary>Consumes to the first sequence provided, or to the end of the queue.</summary>
            <remarks>Consumes to the first sequence provided, or to the end of the queue. Leaves the terminator on the queue.
                </remarks>
            <param name="seq">any number of terminators to consume to. <b>Case insensitive.</b></param>
            <returns>consumed string</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.ChompTo(System.String)">
            <summary>Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it).
                </summary>
            <remarks>
            Pulls a string off the queue (like consumeTo), and then pulls off the matched string (but does not return it).
            <para />
            If the queue runs out of characters before finding the seq, will return as much as it can (and queue will go
            isEmpty() == true).
            </remarks>
            <param name="seq">String to match up to, and not include in return, and to pull off queue. <b>Case sensitive.</b>
                </param>
            <returns>Data matched from queue.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.ChompBalanced(System.Char,System.Char)">
            <summary>Pulls a balanced string off the queue.</summary>
            <remarks>
            Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
            and leave " four" on the queue. Unbalanced openers and closers can be quoted (with ' or ") or escaped (with \). Those escapes will be left
            in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
            contains text strings; use unescape for that.
            </remarks>
            <param name="open">opener</param>
            <param name="close">closer</param>
            <returns>data matched from the queue</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.Unescape(System.String)">
            <summary>Unescape a \ escaped string.</summary>
            <param name="in">backslash escaped string</param>
            <returns>unescaped string</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.ConsumeWhitespace">
            <summary>Pulls the next run of whitespace characters of the queue.</summary>
            <returns>Whether consuming whitespace or not</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.ConsumeWord">
            <summary>Retrieves the next run of word type (letter or digit) off the queue.</summary>
            <returns>String of word characters from queue, or empty string if none.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.ConsumeTagName">
            <summary>Consume an tag name off the queue (word or :, _, -)</summary>
            <returns>tag name</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.ConsumeElementSelector">
            <summary>Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects).
                </summary>
            <returns>tag name</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.ConsumeCssIdentifier">
            <summary>
            Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _)
            http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier
            </summary>
            <returns>identifier</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.ConsumeAttributeKey">
            <summary>Consume an attribute key off the queue (letter, digit, -, _, :")</summary>
            <returns>attribute key</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TokenQueue.Remainder">
            <summary>Consume and return whatever is left on the queue.</summary>
            <returns>remained of queue.</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Parser.TreeBuilder">
            <author>Jonathan Hedley</author>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TreeBuilder.NewInstance">
            <summary>Create a new copy of this TreeBuilder</summary>
            <returns>copy, ready for a new parse</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TreeBuilder.Error(System.String)">
            <summary>If the parser is tracking errors, add an error at the current position.</summary>
            <param name="msg">error message</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.TreeBuilder.IsContentForTagData(System.String)">
            <summary>(An internal method, visible for Element.</summary>
            <remarks>
            (An internal method, visible for Element. For HTML parse, signals that script and style text should be treated as
            Data Nodes).
            </remarks>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Parser.XmlTreeBuilder">
            <summary>
            Use the
            <c>XmlTreeBuilder</c>
            when you want to parse XML without any of the HTML DOM rules being applied to the
            document.
            </summary>
            <remarks>
            Use the
            <c>XmlTreeBuilder</c>
            when you want to parse XML without any of the HTML DOM rules being applied to the
            document.
            <para />
            Usage example:
            <c>Document xmlDoc = Jsoup.parse(html, baseUrl, Parser.xmlParser());</c>
            </remarks>
            <author>Jonathan Hedley</author>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Parser.XmlTreeBuilder.PopStackToClose(iText.StyledXmlParser.Jsoup.Parser.Token.EndTag)">
            <summary>If the stack contains an element with this tag's name, pop up the stack to remove the first occurrence.
                </summary>
            <remarks>
            If the stack contains an element with this tag's name, pop up the stack to remove the first occurrence. If not
            found, skips.
            </remarks>
            <param name="endTag">tag to close</param>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Safety.Cleaner">
            <summary>The safelist based HTML cleaner.</summary>
            <remarks>
            The safelist based HTML cleaner. Use to ensure that end-user provided HTML contains only the elements and attributes
            that you are expecting; no junk, and no cross-site scripting attacks!
            <para />
            The HTML cleaner parses the input as HTML and then runs it through a safe-list, so the output HTML can only contain
            HTML that is allowed by the safelist.
            <para />
            It is assumed that the input HTML is a body fragment; the clean methods only pull from the source's body, and the
            canned safe-lists only allow body contained tags.
            <para />
            Rather than interacting directly with a Cleaner object, generally see the
            <c>clean</c>
            methods in
            <see cref="T:iText.StyledXmlParser.Jsoup.Jsoup"/>.
            </remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Cleaner.#ctor(iText.StyledXmlParser.Jsoup.Safety.Safelist)">
            <summary>Create a new cleaner, that sanitizes documents using the supplied safelist.</summary>
            <param name="safelist">safe-list to clean with</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Cleaner.#ctor(iText.StyledXmlParser.Jsoup.Safety.Whitelist)">
            <summary>
            Use
            <see cref="M:iText.StyledXmlParser.Jsoup.Safety.Cleaner.#ctor(iText.StyledXmlParser.Jsoup.Safety.Safelist)"/>
            instead.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Cleaner.Clean(iText.StyledXmlParser.Jsoup.Nodes.Document)">
            <summary>Creates a new, clean document, from the original dirty document, containing only elements allowed by the safelist.
                </summary>
            <remarks>
            Creates a new, clean document, from the original dirty document, containing only elements allowed by the safelist.
            The original document is not modified. Only elements from the dirty document's <c>body</c> are used. The
            OutputSettings of the original document are cloned into the clean document.
            </remarks>
            <param name="dirtyDocument">Untrusted base document to clean.</param>
            <returns>cleaned document.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Cleaner.IsValid(iText.StyledXmlParser.Jsoup.Nodes.Document)">
            <summary>Determines if the input document <b>body</b>is valid, against the safelist.</summary>
            <remarks>
            Determines if the input document <b>body</b>is valid, against the safelist. It is considered valid if all the tags and attributes
            in the input HTML are allowed by the safelist, and that there is no content in the <c>head</c>.
            <para />
            This method can be used as a validator for user input. An invalid document will still be cleaned successfully
            using the
            <see cref="M:iText.StyledXmlParser.Jsoup.Safety.Cleaner.Clean(iText.StyledXmlParser.Jsoup.Nodes.Document)"/>
            document. If using as a validator, it is recommended to still clean the document
            to ensure enforced attributes are set correctly, and that the output is tidied.
            </remarks>
            <param name="dirtyDocument">document to test</param>
            <returns>true if no tags or attributes need to be removed; false if they do</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Safety.Cleaner.CleaningVisitor">
            <summary>Iterates the input and copies trusted nodes (tags, attributes, text) into the destination.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Safety.Safelist">
            <summary>Safe-lists define what HTML (elements and attributes) to allow through the cleaner.</summary>
            <remarks>
            Safe-lists define what HTML (elements and attributes) to allow through the cleaner. Everything else is removed.
            <para />
            Start with one of the defaults:
            <list type="bullet">
            <item><description>
            <see cref="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.None"/>
            </description></item>
            <item><description>
            <see cref="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.SimpleText"/>
            </description></item>
            <item><description>
            <see cref="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.Basic"/>
            </description></item>
            <item><description>
            <see cref="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.BasicWithImages"/>
            </description></item>
            <item><description>
            <see cref="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.Relaxed"/>
            </description></item>
            </list>
            <para />
            If you need to allow more through (please be careful!), tweak a base safelist with:
            <list type="bullet">
            <item><description>
            <see cref="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.AddTags(System.String[])"/>
            </description></item>
            <item><description>
            <see cref="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.AddAttributes(System.String,System.String[])"/>
            </description></item>
            <item><description>
            <see cref="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.AddEnforcedAttribute(System.String,System.String,System.String)"/>
            </description></item>
            <item><description>
            <see cref="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.AddProtocols(System.String,System.String,System.String[])"/>
            </description></item>
            </list>
            <para />
            You can remove any setting from an existing safelist with:
            <list type="bullet">
            <item><description>
            <see cref="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.RemoveTags(System.String[])"/>
            </description></item>
            <item><description>
            <see cref="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.RemoveAttributes(System.String,System.String[])"/>
            </description></item>
            <item><description>
            <see cref="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.RemoveEnforcedAttribute(System.String,System.String)"/>
            </description></item>
            <item><description>
            <see cref="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.RemoveProtocols(System.String,System.String,System.String[])"/>
            </description></item>
            </list>
            <para />
            The cleaner and these safelists assume that you want to clean a <c>body</c> fragment of HTML (to add user
            supplied HTML into a templated page), and not to clean a full HTML document. If the latter is the case, either wrap the
            document HTML around the cleaned body HTML, or create a safelist that allows <c>html</c> and <c>head</c>
            elements as appropriate.
            <para />
            If you are going to extend a safelist, please be very careful. Make sure you understand what attributes may lead to
            XSS attack vectors. URL attributes are particularly vulnerable and require careful validation. See
            the <a href="https://owasp.org/www-community/xss-filter-evasion-cheatsheet">XSS Filter Evasion Cheat Sheet</a> for some
            XSS attack examples (that jsoup will safegaurd against the default Cleaner and Safelist configuration).
            </remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.None">
            <summary>This safelist allows only text nodes: all HTML will be stripped.</summary>
            <returns>safelist</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.SimpleText">
            <summary>This safelist allows only simple text formatting: <c>b, em, i, strong, u</c>.</summary>
            <remarks>
            This safelist allows only simple text formatting: <c>b, em, i, strong, u</c>. All other HTML (tags and
            attributes) will be removed.
            </remarks>
            <returns>safelist</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.Basic">
            <summary>
            <para />
            This safelist allows a fuller range of text nodes: <c>a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li,
            ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul</c>, and appropriate attributes.
            </summary>
            <remarks>
            <para />
            This safelist allows a fuller range of text nodes: <c>a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li,
            ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul</c>, and appropriate attributes.
            <para />
            Links (<c>a</c> elements) can point to <c>http, https, ftp, mailto</c>, and have an enforced
            <c>rel=nofollow</c> attribute.
            <para />
            Does not allow images.
            </remarks>
            <returns>safelist</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.BasicWithImages">
            <summary>
            This safelist allows the same text tags as
            <see cref="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.Basic"/>
            , and also allows <c>img</c> tags, with appropriate
            attributes, with <c>src</c> pointing to <c>http</c> or <c>https</c>.
            </summary>
            <returns>safelist</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.Relaxed">
            <summary>
            This safelist allows a full range of text and structural body HTML: <c>a, b, blockquote, br, caption, cite,
            code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub,
            sup, table, tbody, td, tfoot, th, thead, tr, u, ul</c>
            </summary>
            <remarks>
            This safelist allows a full range of text and structural body HTML: <c>a, b, blockquote, br, caption, cite,
            code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub,
            sup, table, tbody, td, tfoot, th, thead, tr, u, ul</c>
            <para />
            Links do not have an enforced <c>rel=nofollow</c> attribute, but you can add that if desired.
            </remarks>
            <returns>safelist</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.#ctor">
            <summary>Create a new, empty safelist.</summary>
            <remarks>Create a new, empty safelist. Generally it will be better to start with a default prepared safelist instead.
                </remarks>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.Basic"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.BasicWithImages"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.SimpleText"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.Relaxed"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.#ctor(iText.StyledXmlParser.Jsoup.Safety.Safelist)">
            <summary>Deep copy an existing Safelist to a new Safelist.</summary>
            <param name="copy">the Safelist to copy</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.AddTags(System.String[])">
            <summary>Add a list of allowed elements to a safelist.</summary>
            <remarks>Add a list of allowed elements to a safelist. (If a tag is not allowed, it will be removed from the HTML.)
                </remarks>
            <param name="tags">tag names to allow</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.RemoveTags(System.String[])">
            <summary>Remove a list of allowed elements from a safelist.</summary>
            <remarks>Remove a list of allowed elements from a safelist. (If a tag is not allowed, it will be removed from the HTML.)
                </remarks>
            <param name="tags">tag names to disallow</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.AddAttributes(System.String,System.String[])">
            <summary>Add a list of allowed attributes to a tag.</summary>
            <remarks>
            Add a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.)
            <para />
            E.g.: <c>addAttributes("a", "href", "class")</c> allows <c>href</c> and <c>class</c> attributes
            on <c>a</c> tags.
            <para />
            To make an attribute valid for <b>all tags</b>, use the pseudo tag <c>:all</c>, e.g.
            <c>addAttributes(":all", "class")</c>.
            </remarks>
            <param name="tag">The tag the attributes are for. The tag will be added to the allowed tag list if necessary.
                </param>
            <param name="attributes">List of valid attributes for the tag</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.RemoveAttributes(System.String,System.String[])">
            <summary>Remove a list of allowed attributes from a tag.</summary>
            <remarks>
            Remove a list of allowed attributes from a tag. (If an attribute is not allowed on an element, it will be removed.)
            <para />
            E.g.: <c>removeAttributes("a", "href", "class")</c> disallows <c>href</c> and <c>class</c>
            attributes on <c>a</c> tags.
            <para />
            To make an attribute invalid for <b>all tags</b>, use the pseudo tag <c>:all</c>, e.g.
            <c>removeAttributes(":all", "class")</c>.
            </remarks>
            <param name="tag">The tag the attributes are for.</param>
            <param name="attributes">List of invalid attributes for the tag</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.AddEnforcedAttribute(System.String,System.String,System.String)">
            <summary>Add an enforced attribute to a tag.</summary>
            <remarks>
            Add an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element
            already has the attribute set, it will be overridden with this value.
            <para />
            E.g.: <c>addEnforcedAttribute("a", "rel", "nofollow")</c> will make all <c>a</c> tags output as
            <c>&lt;a href="..." rel="nofollow"&gt;</c>
            </remarks>
            <param name="tag">The tag the enforced attribute is for. The tag will be added to the allowed tag list if necessary.
                </param>
            <param name="attribute">The attribute name</param>
            <param name="value">The enforced attribute value</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.RemoveEnforcedAttribute(System.String,System.String)">
            <summary>Remove a previously configured enforced attribute from a tag.</summary>
            <param name="tag">The tag the enforced attribute is for.</param>
            <param name="attribute">The attribute name</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.PreserveRelativeLinks(System.Boolean)">
            <summary>
            Configure this Safelist to preserve relative links in an element's URL attribute, or convert them to absolute
            links.
            </summary>
            <remarks>
            Configure this Safelist to preserve relative links in an element's URL attribute, or convert them to absolute
            links. By default, this is <b>false</b>: URLs will be  made absolute (e.g. start with an allowed protocol, like
            e.g.
            <c>http://</c>.
            <para />
            Note that when handling relative links, the input document must have an appropriate
            <c>base URI</c>
            set when
            parsing, so that the link's protocol can be confirmed. Regardless of the setting of the
            <c>
            preserve relative
            links
            </c>
            option, the link must be resolvable against the base URI to an allowed protocol; otherwise the attribute
            will be removed.
            </remarks>
            <param name="preserve">
            
            <see langword="true"/>
            to allow relative links,
            <see langword="false"/>
            (default) to deny
            </param>
            <returns>this Safelist, for chaining.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.AddProtocols(System.String,System.String,System.String[])"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.AddProtocols(System.String,System.String,System.String[])">
            <summary>Add allowed URL protocols for an element's URL attribute.</summary>
            <remarks>
            Add allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to
            URLs with the defined protocol.
            <para />
            E.g.: <c>addProtocols("a", "href", "ftp", "http", "https")</c>
            <para />
            To allow a link to an in-page URL anchor (i.e. <c>&lt;a href="#anchor"&gt;</c>, add a <c>#</c>:<br />
            E.g.: <c>addProtocols("a", "href", "#")</c>
            </remarks>
            <param name="tag">Tag the URL protocol is for</param>
            <param name="attribute">Attribute name</param>
            <param name="protocols">List of valid protocols</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.RemoveProtocols(System.String,System.String,System.String[])">
            <summary>Remove allowed URL protocols for an element's URL attribute.</summary>
            <remarks>
            Remove allowed URL protocols for an element's URL attribute. If you remove all protocols for an attribute, that
            attribute will allow any protocol.
            <para />
            E.g.: <c>removeProtocols("a", "href", "ftp")</c>
            </remarks>
            <param name="tag">Tag the URL protocol is for</param>
            <param name="attribute">Attribute name</param>
            <param name="removeProtocols">List of invalid protocols</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.IsSafeTag(System.String)">
            <summary>Test if the supplied tag is allowed by this safelist</summary>
            <param name="tag">test tag</param>
            <returns>true if allowed</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Safety.Safelist.IsSafeAttribute(System.String,iText.StyledXmlParser.Jsoup.Nodes.Element,iText.StyledXmlParser.Jsoup.Nodes.Attribute)">
            <summary>Test if the supplied attribute is allowed by this safelist for this tag</summary>
            <param name="tagName">tag to consider allowing the attribute in</param>
            <param name="el">element under test, to confirm protocol</param>
            <param name="attr">attribute under test</param>
            <returns>true if allowed</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Collector">
            <summary>Collects a list of elements that match the supplied criteria.</summary>
            <author>Jonathan Hedley</author>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Collector.Collect(iText.StyledXmlParser.Jsoup.Select.Evaluator,iText.StyledXmlParser.Jsoup.Nodes.Element)">
            <summary>Build a list of elements, by visiting root and every descendant of root, and testing it against the evaluator.
                </summary>
            <param name="eval">Evaluator to test elements against</param>
            <param name="root">root of tree to descend</param>
            <returns>list of matches; empty if none</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Collector.FindFirst(iText.StyledXmlParser.Jsoup.Select.Evaluator,iText.StyledXmlParser.Jsoup.Nodes.Element)">
            <summary>
            Finds the first Element that matches the Evaluator that descends from the root, and stops the query once that first
            match is found.
            </summary>
            <param name="eval">Evaluator to test elements against</param>
            <param name="root">root of tree to descend</param>
            <returns>
            the first match;
            <see langword="null"/>
            if none
            </returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.CombiningEvaluator">
            <summary>Base combining (and, or) evaluator.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.CombiningEvaluator.OR.#ctor(System.Collections.Generic.ICollection{iText.StyledXmlParser.Jsoup.Select.Evaluator})">
            <summary>Create a new Or evaluator.</summary>
            <remarks>Create a new Or evaluator. The initial evaluators are ANDed together and used as the first clause of the OR.
                </remarks>
            <param name="evaluators">initial OR clause (these are wrapped into an AND evaluator).</param>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Elements">
            <summary>
            A list of
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.Element"/>
            s, with methods that act on every element in the list.
            </summary>
            <remarks>
            A list of
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.Element"/>
            s, with methods that act on every element in the list.
            <para />
            To get an
            <c>Elements</c>
            object, use the
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Select(System.String)"/>
            method.
            </remarks>
            <author>Jonathan Hedley, jonathan@hedley.net</author>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Clone">
            <summary>Creates a deep copy of these elements.</summary>
            <returns>a deep copy</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Attr(System.String)">
            <summary>Get an attribute value from the first matched element that has the attribute.</summary>
            <param name="attributeKey">The attribute key.</param>
            <returns>
            The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true),
            or if the no elements have the attribute, returns empty string.
            </returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Select.Elements.HasAttr(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.HasAttr(System.String)">
            <summary>Checks if any of the matched elements have this attribute defined.</summary>
            <param name="attributeKey">attribute key</param>
            <returns>true if any of the elements have the attribute; false if none do.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.EachAttr(System.String)">
            <summary>Get the attribute value for each of the matched elements.</summary>
            <remarks>
            Get the attribute value for each of the matched elements. If an element does not have this attribute, no value is
            included in the result set for that element.
            </remarks>
            <param name="attributeKey">
            the attribute name to return values for. You can add the
            <c>abs:</c>
            prefix to the key to
            get absolute URLs from relative URLs, e.g.:
            <c>doc.select("a").eachAttr("abs:href")</c>
            .
            </param>
            <returns>a list of each element's attribute value for the attribute</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Attr(System.String,System.String)">
            <summary>Set an attribute on all matched elements.</summary>
            <param name="attributeKey">attribute key</param>
            <param name="attributeValue">attribute value</param>
            <returns>this</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.RemoveAttr(System.String)">
            <summary>Remove an attribute from every matched element.</summary>
            <param name="attributeKey">The attribute to remove.</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.AddClass(System.String)">
            <summary>
            Add the class name to every matched element's
            <c>class</c>
            attribute.
            </summary>
            <param name="className">class name to add</param>
            <returns>this</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.RemoveClass(System.String)">
            <summary>
            Remove the class name from every matched element's
            <c>class</c>
            attribute, if present.
            </summary>
            <param name="className">class name to remove</param>
            <returns>this</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.ToggleClass(System.String)">
            <summary>
            Toggle the class name on every matched element's
            <c>class</c>
            attribute.
            </summary>
            <param name="className">class name to add if missing, or remove if present, from every element.</param>
            <returns>this</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.HasClass(System.String)">
            <summary>
            Determine if any of the matched elements have this class name set in their
            <c>class</c>
            attribute.
            </summary>
            <param name="className">class name to check for</param>
            <returns>true if any do, false if none do</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Val">
            <summary>Get the form element's value of the first matched element.</summary>
            <returns>The form element's value, or empty if not set.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Val"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Val(System.String)">
            <summary>Set the form element's value in each of the matched elements.</summary>
            <param name="value">The value to set into each matched element</param>
            <returns>this (for chaining)</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Text">
            <summary>Get the combined text of all the matched elements.</summary>
            <remarks>
            Get the combined text of all the matched elements.
            <para />
            Note that it is possible to get repeats if the matched elements contain both parent elements and their own
            children, as the Element.text() method returns the combined text of a parent and all its children.
            </remarks>
            <returns>string of all text: unescaped and no HTML.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Text"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Select.Elements.EachText"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.HasText">
            <summary>Test if any matched Element has any text content, that is not just whitespace.</summary>
            <returns>true if any element has non-blank text content.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.HasText"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.EachText">
            <summary>Get the text content of each of the matched elements.</summary>
            <remarks>
            Get the text content of each of the matched elements. If an element has no text, then it is not included in the
            result.
            </remarks>
            <returns>A list of each matched element's text content.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Text"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.HasText"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Select.Elements.Text"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Html">
            <summary>Get the combined inner HTML of all matched elements.</summary>
            <returns>string of all element's inner HTML.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Select.Elements.Text"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Select.Elements.OuterHtml"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.OuterHtml">
            <summary>Get the combined outer HTML of all matched elements.</summary>
            <returns>string of all element's outer HTML.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Select.Elements.Text"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Select.Elements.Html"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.ToString">
            <summary>Get the combined outer HTML of all matched elements.</summary>
            <remarks>
            Get the combined outer HTML of all matched elements. Alias of
            <see cref="M:iText.StyledXmlParser.Jsoup.Select.Elements.OuterHtml"/>.
            </remarks>
            <returns>string of all element's outer HTML.</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Select.Elements.Text"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Select.Elements.Html"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.TagName(System.String)">
            <summary>Update (rename) the tag name of each matched element.</summary>
            <remarks>
            Update (rename) the tag name of each matched element. For example, to change each
            <c>&lt;i&gt;</c>
            to a
            <c>&lt;em&gt;</c>
            , do
            <c>doc.select("i").tagName("em");</c>
            </remarks>
            <param name="tagName">the new tag name</param>
            <returns>this, for chaining</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.TagName(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Html(System.String)">
            <summary>Set the inner HTML of each matched element.</summary>
            <param name="html">HTML to parse and set into each matched element.</param>
            <returns>this, for chaining</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Html(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Prepend(System.String)">
            <summary>Add the supplied HTML to the start of each matched element's inner HTML.</summary>
            <param name="html">HTML to add inside each element, before the existing HTML</param>
            <returns>this, for chaining</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Prepend(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Append(System.String)">
            <summary>Add the supplied HTML to the end of each matched element's inner HTML.</summary>
            <param name="html">HTML to add inside each element, after the existing HTML</param>
            <returns>this, for chaining</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Append(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Before(System.String)">
            <summary>Insert the supplied HTML before each matched element's outer HTML.</summary>
            <param name="html">HTML to insert before each element</param>
            <returns>this, for chaining</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Before(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.After(System.String)">
            <summary>Insert the supplied HTML after each matched element's outer HTML.</summary>
            <param name="html">HTML to insert after each element</param>
            <returns>this, for chaining</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.After(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Wrap(System.String)">
            <summary>Wrap the supplied HTML around each matched elements.</summary>
            <remarks>
            Wrap the supplied HTML around each matched elements. For example, with HTML
            <c>&lt;p&gt;&lt;b&gt;This&lt;/b&gt; is &lt;b&gt;Jsoup&lt;/b&gt;&lt;/p&gt;</c>
            ,
            <c>doc.select("b").wrap("&lt;i&gt;&lt;/i&gt;");</c>
            becomes
            <c>&lt;p&gt;&lt;i&gt;&lt;b&gt;This&lt;/b&gt;&lt;/i&gt; is &lt;i&gt;&lt;b&gt;jsoup&lt;/b&gt;&lt;/i&gt;&lt;/p&gt;
                </c>
            </remarks>
            <param name="html">
            HTML to wrap around each element, e.g.
            <c>&lt;div class="head"&gt;&lt;/div&gt;</c>
            . Can be arbitrarily deep.
            </param>
            <returns>this (for chaining)</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Wrap(System.String)"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Unwrap">
            <summary>Removes the matched elements from the DOM, and moves their children up into their parents.</summary>
            <remarks>
            Removes the matched elements from the DOM, and moves their children up into their parents. This has the effect of
            dropping the elements but keeping their children.
            <para />
            This is useful for e.g removing unwanted formatting elements but keeping their contents.
            E.g. with HTML: <para />
            <c>&lt;div&gt;&lt;font&gt;One&lt;/font&gt; &lt;font&gt;&lt;a href="/"&gt;Two&lt;/a&gt;&lt;/font&gt;&lt;/div&gt;
                </c>
            <para />
            <c>doc.select("font").unwrap();</c>
            <para />
            HTML =
            <c>&lt;div&gt;One &lt;a href="/"&gt;Two&lt;/a&gt;&lt;/div&gt;</c>
            </remarks>
            <returns>this (for chaining)</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Unwrap"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Empty">
            <summary>Empty (remove all child nodes from) each matched element.</summary>
            <remarks>
            Empty (remove all child nodes from) each matched element. This is similar to setting the inner HTML of each
            element to nothing.
            <para />
            E.g. HTML:
            <c>&lt;div&gt;&lt;p&gt;Hello &lt;b&gt;there&lt;/b&gt;&lt;/p&gt; &lt;p&gt;now&lt;/p&gt;&lt;/div&gt;</c>
            <br />
            <c>doc.select("p").empty();</c><br />
            HTML =
            <c>&lt;div&gt;&lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt;&lt;/div&gt;</c>
            </remarks>
            <returns>this, for chaining</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Empty"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Select.Elements.Remove"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Remove">
            <summary>Remove each matched element from the DOM.</summary>
            <remarks>
            Remove each matched element from the DOM. This is similar to setting the outer HTML of each element to nothing.
            <para />
            E.g. HTML:
            <c>&lt;div&gt;&lt;p&gt;Hello&lt;/p&gt; &lt;p&gt;there&lt;/p&gt; &lt;img /&gt;&lt;/div&gt;</c>
            <br />
            <c>doc.select("p").remove();</c><br />
            HTML =
            <c>&lt;div&gt; &lt;img /&gt;&lt;/div&gt;</c>
            <para />
            Note that this method should not be used to clean user-submitted HTML; rather, use
            <see cref="T:iText.StyledXmlParser.Jsoup.Safety.Cleaner"/>
            to clean HTML.
            </remarks>
            <returns>this, for chaining</returns>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Nodes.Element.Empty"/>
            <seealso cref="M:iText.StyledXmlParser.Jsoup.Select.Elements.Empty"/>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Select(System.String)">
            <summary>Find matching elements within this element list.</summary>
            <param name="query">
            A
            <see cref="T:iText.StyledXmlParser.Jsoup.Select.Selector"/>
            query
            </param>
            <returns>the filtered list of elements, or an empty list if none match.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Not(System.String)">
            <summary>
            Remove elements from this list that match the
            <see cref="T:iText.StyledXmlParser.Jsoup.Select.Selector"/>
            query.
            </summary>
            <remarks>
            Remove elements from this list that match the
            <see cref="T:iText.StyledXmlParser.Jsoup.Select.Selector"/>
            query.
            <para />
            E.g. HTML:
            <c>&lt;div class=logo&gt;One&lt;/div&gt; &lt;div&gt;Two&lt;/div&gt;</c>
            <br />
            <c>Elements divs = doc.select("div").not(".logo");</c><br />
            Result:
            <c>divs: [&lt;div&gt;Two&lt;/div&gt;]</c>
            <para />
            </remarks>
            <param name="query">the selector query whose results should be removed from these elements</param>
            <returns>a new elements list that contains only the filtered results</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Eq(System.Int32)">
            <summary>Get the <i>nth</i> matched element as an Elements object.</summary>
            <remarks>
            Get the <i>nth</i> matched element as an Elements object.
            <para />
            See also
            <see cref="!:System.Collections.Generic.List&lt;E&gt;.Get(int)"/>
            to retrieve an Element.
            </remarks>
            <param name="index">the (zero-based) index of the element in the list to retain</param>
            <returns>Elements containing only the specified element, or, if that element did not exist, an empty list.
                </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Is(System.String)">
            <summary>Test if any of the matched elements match the supplied query.</summary>
            <param name="query">A selector</param>
            <returns>true if at least one element in the list matches the query.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Next">
            <summary>Get the immediate next element sibling of each element in this list.</summary>
            <returns>next element siblings.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Next(System.String)">
            <summary>Get the immediate next element sibling of each element in this list, filtered by the query.</summary>
            <param name="query">CSS query to match siblings against</param>
            <returns>next element siblings.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.NextAll">
            <summary>Get each of the following element siblings of each element in this list.</summary>
            <returns>all following element siblings.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.NextAll(System.String)">
            <summary>Get each of the following element siblings of each element in this list, that match the query.</summary>
            <param name="query">CSS query to match siblings against</param>
            <returns>all following element siblings.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Prev">
            <summary>Get the immediate previous element sibling of each element in this list.</summary>
            <returns>previous element siblings.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Prev(System.String)">
            <summary>Get the immediate previous element sibling of each element in this list, filtered by the query.</summary>
            <param name="query">CSS query to match siblings against</param>
            <returns>previous element siblings.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.PrevAll">
            <summary>Get each of the previous element siblings of each element in this list.</summary>
            <returns>all previous element siblings.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.PrevAll(System.String)">
            <summary>Get each of the previous element siblings of each element in this list, that match the query.</summary>
            <param name="query">CSS query to match siblings against</param>
            <returns>all previous element siblings.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Parents">
            <summary>Get all of the parents and ancestor elements of the matched elements.</summary>
            <returns>all of the parents and ancestor elements of the matched elements</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.First">
            <summary>Get the first matched element.</summary>
            <returns>The first matched element, or <c>null</c> if contents is empty.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Last">
            <summary>Get the last matched element.</summary>
            <returns>The last matched element, or <c>null</c> if contents is empty.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Traverse(iText.StyledXmlParser.Jsoup.Select.NodeVisitor)">
            <summary>Perform a depth-first traversal on each of the selected elements.</summary>
            <param name="nodeVisitor">the visitor callbacks to perform on each node</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Filter(iText.StyledXmlParser.Jsoup.Select.NodeFilter)">
            <summary>Perform a depth-first filtering on each of the selected elements.</summary>
            <param name="nodeFilter">the filter callbacks to perform on each node</param>
            <returns>this, for chaining</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Forms">
            <summary>
            Get the
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.FormElement"/>
            forms from the selected elements, if any.
            </summary>
            <returns>
            a list of
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.FormElement"/>
            s pulled from the matched elements. The list will be empty if the elements contain
            no forms.
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.Comments">
            <summary>
            Get
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.Comment"/>
            nodes that are direct child nodes of the selected elements.
            </summary>
            <returns>Comment nodes, or an empty list if none.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.TextNodes">
            <summary>
            Get
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.TextNode"/>
            nodes that are direct child nodes of the selected elements.
            </summary>
            <returns>TextNode nodes, or an empty list if none.</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Elements.DataNodes">
            <summary>
            Get
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.DataNode"/>
            nodes that are direct child nodes of the selected elements.
            </summary>
            <remarks>
            Get
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.DataNode"/>
            nodes that are direct child nodes of the selected elements. DataNode nodes contain the
            content of tags such as
            <c>script</c>
            ,
            <c>style</c>
            etc and are distinct from
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.TextNode"/>
            s.
            </remarks>
            <returns>Comment nodes, or an empty list if none.</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator">
            <summary>Evaluates that an element matches the selector.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Evaluator.Matches(iText.StyledXmlParser.Jsoup.Nodes.Element,iText.StyledXmlParser.Jsoup.Nodes.Element)">
            <summary>Test if the element meets the evaluator's requirements.</summary>
            <param name="root">Root of the matching subtree</param>
            <param name="element">tested element</param>
            <returns>
            Returns <tt>true</tt> if the requirements are met or
            <tt>false</tt> otherwise
            </returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.Tag">
            <summary>Evaluator for tag name</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.TagEndsWith">
            <summary>Evaluator for tag name that ends with</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.ID">
            <summary>Evaluator for element id</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.Class">
            <summary>Evaluator for element class</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.Attribute">
            <summary>Evaluator for attribute name matching</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.AttributeStarting">
            <summary>Evaluator for attribute name prefix matching</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.AttributeWithValue">
            <summary>Evaluator for attribute name/value matching</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.AttributeWithValueNot">
            <summary>Evaluator for attribute name != value matching</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.AttributeWithValueStarting">
            <summary>Evaluator for attribute name/value matching (value prefix)</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.AttributeWithValueEnding">
            <summary>Evaluator for attribute name/value matching (value ending)</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.AttributeWithValueContaining">
            <summary>Evaluator for attribute name/value matching (value containing)</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.AttributeWithValueMatching">
            <summary>Evaluator for attribute name/value matching (value regex matching)</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.AttributeKeyPair">
            <summary>Abstract evaluator for attribute name/value matching</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.AllElements">
            <summary>Evaluator for any / all element matching</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.IndexLessThan">
            <summary>
            Evaluator for matching by sibling index number (e
            <c>&lt;</c>
            idx)
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.IndexGreaterThan">
            <summary>
            Evaluator for matching by sibling index number (e
            <c>&gt;</c>
            idx)
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.IndexEquals">
            <summary>Evaluator for matching by sibling index number (e = idx)</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.IsLastChild">
            <summary>Evaluator for matching the last sibling (css :last-child)</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.IsNthChild">
            <summary>css-compatible Evaluator for :eq (css :nth-child)</summary>
            <seealso cref="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.IndexEquals"/>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.IsNthLastChild">
            <summary>css pseudo class :nth-last-child)</summary>
            <seealso cref="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.IndexEquals"/>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.IsNthOfType">
            <summary>css pseudo class nth-of-type</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.IsFirstChild">
            <summary>Evaluator for matching the first sibling (css :first-child)</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.IsRoot">
            <summary>css3 pseudo-class :root</summary>
            <seealso><a href="http://www.w3.org/tr/selectors/#root-pseudo">:root selector</a></seealso>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.IndexEvaluator">
            <summary>Abstract evaluator for sibling index matching</summary>
            <author>ant</author>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.ContainsText">
            <summary>Evaluator for matching Element (and its descendants) text</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.ContainsData">
            <summary>Evaluator for matching Element (and its descendants) data</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.ContainsOwnText">
            <summary>Evaluator for matching Element's own text</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.Evaluator.MatchesOwn">
            <summary>Evaluator for matching Element's own text with regex</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.MatchesElement">
            <summary>Evaluator for matching Element (and its descendants) text with regex</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.NodeFilter">
            <summary>Node filter interface.</summary>
            <remarks>
            Node filter interface. Provide an implementing class to
            <see cref="T:iText.StyledXmlParser.Jsoup.Select.NodeTraversor"/>
            to iterate through nodes.
            <para />
            This interface provides two methods,
            <c>head</c>
            and
            <c>tail</c>
            . The head method is called when the node is first
            seen, and the tail method when all of the node's children have been visited. As an example, head can be used to
            create a start tag for a node, and tail to create the end tag.
            <para />
            For every node, the filter has to decide whether to
            <list type="bullet">
            <item><description>continue (
            <see cref="F:iText.StyledXmlParser.Jsoup.Select.NodeFilter.FilterResult.CONTINUE"/>
            ),
            </description></item>
            <item><description>skip all children (
            <see cref="F:iText.StyledXmlParser.Jsoup.Select.NodeFilter.FilterResult.SKIP_CHILDREN"/>
            ),
            </description></item>
            <item><description>skip node entirely (
            <see cref="F:iText.StyledXmlParser.Jsoup.Select.NodeFilter.FilterResult.SKIP_ENTIRELY"/>
            ),
            </description></item>
            <item><description>remove the subtree (
            <see cref="F:iText.StyledXmlParser.Jsoup.Select.NodeFilter.FilterResult.REMOVE"/>
            ),
            </description></item>
            <item><description>interrupt the iteration and return (
            <see cref="F:iText.StyledXmlParser.Jsoup.Select.NodeFilter.FilterResult.STOP"/>
            ).
            </description></item>
            </list>
            The difference between
            <see cref="F:iText.StyledXmlParser.Jsoup.Select.NodeFilter.FilterResult.SKIP_CHILDREN"/>
            and
            <see cref="F:iText.StyledXmlParser.Jsoup.Select.NodeFilter.FilterResult.SKIP_ENTIRELY"/>
            is that the first
            will invoke
            <see cref="M:iText.StyledXmlParser.Jsoup.Select.NodeFilter.Tail(iText.StyledXmlParser.Jsoup.Nodes.Node,System.Int32)"/>
            on the node, while the latter will not.
            Within
            <see cref="M:iText.StyledXmlParser.Jsoup.Select.NodeFilter.Tail(iText.StyledXmlParser.Jsoup.Nodes.Node,System.Int32)"/>
            , both are equivalent to
            <see cref="F:iText.StyledXmlParser.Jsoup.Select.NodeFilter.FilterResult.CONTINUE"/>.
            </remarks>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.NodeFilter.FilterResult">
            <summary>Filter decision.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Jsoup.Select.NodeFilter.FilterResult.CONTINUE">
            <summary>Continue processing the tree</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Jsoup.Select.NodeFilter.FilterResult.SKIP_CHILDREN">
            <summary>
            Skip the child nodes, but do call
            <see cref="M:iText.StyledXmlParser.Jsoup.Select.NodeFilter.Tail(iText.StyledXmlParser.Jsoup.Nodes.Node,System.Int32)"/>
            next.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Jsoup.Select.NodeFilter.FilterResult.SKIP_ENTIRELY">
            <summary>
            Skip the subtree, and do not call
            <see cref="M:iText.StyledXmlParser.Jsoup.Select.NodeFilter.Tail(iText.StyledXmlParser.Jsoup.Nodes.Node,System.Int32)"/>.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Jsoup.Select.NodeFilter.FilterResult.REMOVE">
            <summary>Remove the node and its children</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Jsoup.Select.NodeFilter.FilterResult.STOP">
            <summary>Stop processing</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.NodeFilter.Head(iText.StyledXmlParser.Jsoup.Nodes.Node,System.Int32)">
            <summary>Callback for when a node is first visited.</summary>
            <param name="node">the node being visited.</param>
            <param name="depth">the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1.
                </param>
            <returns>Filter decision</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.NodeFilter.Tail(iText.StyledXmlParser.Jsoup.Nodes.Node,System.Int32)">
            <summary>Callback for when a node is last visited, after all of its descendants have been visited.</summary>
            <param name="node">the node being visited.</param>
            <param name="depth">the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1.
                </param>
            <returns>Filter decision</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.NodeTraversor">
            <summary>Depth-first node traversor.</summary>
            <remarks>
            Depth-first node traversor. Use to iterate through all nodes under and including the specified root node.
            <para />
            This implementation does not use recursion, so a deep DOM does not risk blowing the stack.
            </remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.NodeTraversor.Traverse(iText.StyledXmlParser.Jsoup.Select.NodeVisitor,iText.StyledXmlParser.Jsoup.Nodes.Node)">
            <summary>Start a depth-first traverse of the root and all of its descendants.</summary>
            <param name="visitor">Node visitor.</param>
            <param name="root">the root node point to traverse.</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.NodeTraversor.Traverse(iText.StyledXmlParser.Jsoup.Select.NodeVisitor,iText.StyledXmlParser.Jsoup.Select.Elements)">
            <summary>Start a depth-first traverse of all elements.</summary>
            <param name="visitor">Node visitor.</param>
            <param name="elements">Elements to filter.</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.NodeTraversor.Filter(iText.StyledXmlParser.Jsoup.Select.NodeFilter,iText.StyledXmlParser.Jsoup.Nodes.Node)">
            <summary>Start a depth-first filtering of the root and all of its descendants.</summary>
            <param name="filter">Node visitor.</param>
            <param name="root">the root node point to traverse.</param>
            <returns>
            The filter result of the root node, or
            <see cref="!:FilterResult.STOP"/>.
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.NodeTraversor.Filter(iText.StyledXmlParser.Jsoup.Select.NodeFilter,iText.StyledXmlParser.Jsoup.Select.Elements)">
            <summary>Start a depth-first filtering of all elements.</summary>
            <param name="filter">Node filter.</param>
            <param name="elements">Elements to filter.</param>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.NodeVisitor">
            <summary>Node visitor interface.</summary>
            <remarks>
            Node visitor interface. Provide an implementing class to
            <see cref="T:iText.StyledXmlParser.Jsoup.Select.NodeTraversor"/>
            to iterate through nodes.
            <para />
            This interface provides two methods,
            <c>head</c>
            and
            <c>tail</c>
            . The head method is called when the node is first
            seen, and the tail method when all of the node's children have been visited. As an example,
            <c>head</c>
            can be used to
            emit a start tag for a node, and
            <c>tail</c>
            to create the end tag.
            </remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.NodeVisitor.Head(iText.StyledXmlParser.Jsoup.Nodes.Node,System.Int32)">
            <summary>Callback for when a node is first visited.</summary>
            <remarks>
            Callback for when a node is first visited.
            <para />
            The node may be modified (e.g.
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.Attr(System.String)"/>
            or replaced
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ReplaceWith(iText.StyledXmlParser.Jsoup.Nodes.Node)"/>
            ). If it's
            <c>instanceOf Element</c>
            , you may cast it to an
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.Element"/>
            and access those methods.
            <para />
            Note that nodes may not be removed during traversal using this method; use
            <see cref="M:iText.StyledXmlParser.Jsoup.Select.NodeTraversor.Filter(iText.StyledXmlParser.Jsoup.Select.NodeFilter,iText.StyledXmlParser.Jsoup.Nodes.Node)"/>
            with a
            <see cref="!:FilterResult.REMOVE"/>
            return instead.
            </remarks>
            <param name="node">the node being visited.</param>
            <param name="depth">
            the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node
            of that will have depth 1.
            </param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.NodeVisitor.Tail(iText.StyledXmlParser.Jsoup.Nodes.Node,System.Int32)">
            <summary>Callback for when a node is last visited, after all of its descendants have been visited.</summary>
            <remarks>
            Callback for when a node is last visited, after all of its descendants have been visited.
            <para />
            Note that replacement with
            <see cref="M:iText.StyledXmlParser.Jsoup.Nodes.Node.ReplaceWith(iText.StyledXmlParser.Jsoup.Nodes.Node)"/>
            is not supported in
            <c>tail</c>.
            </remarks>
            <param name="node">the node being visited.</param>
            <param name="depth">
            the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node
            of that will have depth 1.
            </param>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.QueryParser">
            <summary>Parses a CSS selector into an Evaluator tree.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.QueryParser.#ctor(System.String)">
            <summary>Create a new QueryParser.</summary>
            <param name="query">CSS query</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.QueryParser.Parse(System.String)">
            <summary>Parse a CSS query into an Evaluator.</summary>
            <param name="query">CSS query</param>
            <returns>Evaluator</returns>
            <seealso cref="T:iText.StyledXmlParser.Jsoup.Select.Selector">selector query syntax</seealso>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.QueryParser.Parse">
            <summary>Parse the query</summary>
            <returns>Evaluator</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.StyledXmlParser.Jsoup.Select.Selector" -->
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Selector.Select(System.String,iText.StyledXmlParser.Jsoup.Nodes.Element)">
            <summary>Find elements matching selector.</summary>
            <param name="query">CSS selector</param>
            <param name="root">root element to descend into</param>
            <returns>matching elements, empty if none</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Selector.Select(iText.StyledXmlParser.Jsoup.Select.Evaluator,iText.StyledXmlParser.Jsoup.Nodes.Element)">
            <summary>Find elements matching selector.</summary>
            <param name="evaluator">CSS selector</param>
            <param name="root">root element to descend into</param>
            <returns>matching elements, empty if none</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Selector.Select(System.String,System.Collections.Generic.IEnumerable{iText.StyledXmlParser.Jsoup.Nodes.Element})">
            <summary>Find elements matching selector.</summary>
            <param name="query">CSS selector</param>
            <param name="roots">root elements to descend into</param>
            <returns>matching elements, empty if none</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.Select.Selector.SelectFirst(System.String,iText.StyledXmlParser.Jsoup.Nodes.Element)">
            <summary>Find the first element that matches the query.</summary>
            <param name="cssQuery">CSS selector</param>
            <param name="root">root element to descend into</param>
            <returns>the matching element, or <b>null</b> if none.</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.Select.StructuralEvaluator">
            <summary>Base structural evaluator.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Jsoup.SerializationException">
            <summary>A SerializationException is raised whenever serialization of a DOM element fails.</summary>
            <remarks>
            A SerializationException is raised whenever serialization of a DOM element fails. This exception usually wraps an
            <see cref="T:System.IO.IOException"/>
            that may be thrown due to an inaccessible output stream.
            </remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.SerializationException.#ctor">
            <summary>Creates and initializes a new serialization exception with no error message and cause.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.SerializationException.#ctor(System.String)">
            <summary>Creates and initializes a new serialization exception with the given error message and no cause.</summary>
            <param name="message">the error message of the new serialization exception (may be <c>null</c>).</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.SerializationException.#ctor(System.Exception)">
            <summary>
            Creates and initializes a new serialization exception with the specified cause and an error message of
            <c>(cause==null ? null : cause.toString())</c> (which typically contains the class and error message of
            <c>cause</c>).
            </summary>
            <param name="cause">the cause of the new serialization exception (may be <c>null</c>).</param>
        </member>
        <member name="M:iText.StyledXmlParser.Jsoup.SerializationException.#ctor(System.String,System.Exception)">
            <summary>Creates and initializes a new serialization exception with the given error message and cause.</summary>
            <param name="message">the error message of the new serialization exception.</param>
            <param name="cause">the cause of the new serialization exception.</param>
        </member>
        <member name="T:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant">
            <summary>Class that bundles all the error message templates as constants.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.SHORTHAND_PROPERTY_CANNOT_BE_EMPTY">
            <summary>The Constant SHORTHAND_PROPERTY_CANNOT_BE_EMPTY.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.DEFAULT_VALUE_OF_CSS_PROPERTY_UNKNOWN">
            <summary>The Constant DEFAULT_VALUE_OF_CSS_PROPERTY_UNKNOWN.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.ERROR_ADDING_CHILD_NODE">
            <summary>The Constant ERROR_ADDING_CHILD_NODE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.ERROR_PARSING_COULD_NOT_MAP_NODE">
            <summary>The Constant ERROR_PARSING_COULD_NOT_MAP_NODE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.ERROR_PARSING_CSS_SELECTOR">
            <summary>The Constant ERROR_PARSING_CSS_SELECTOR.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.ONLY_THE_LAST_BACKGROUND_CAN_INCLUDE_BACKGROUND_COLOR">
            <summary>The Constant ONLY_THE_LAST_BACKGROUND_CAN_INCLUDE_BACKGROUND_COLOR.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.UNKNOWN_ABSOLUTE_METRIC_LENGTH_PARSED">
            <summary>The Constant UNKNOWN_ABSOLUTE_METRIC_LENGTH_PARSED.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.UNKNOWN_PROPERTY">
            <summary>The Constant UNKNOWN__PROPERTY.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.QUOTES_PROPERTY_INVALID">
            <summary>The Constant QUOTES_PROPERTY_INVALID.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.QUOTE_IS_NOT_CLOSED_IN_CSS_EXPRESSION">
            <summary>The Constant QUOTE_IS_NOT_CLOSED_IN_CSS_EXPRESSION.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.INVALID_CSS_PROPERTY_DECLARATION">
            <summary>The Constant INVALID_CSS_PROPERTY_DECLARATION.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.INCORRECT_CHARACTER_SEQUENCE">
            <summary>The Constant INCORRECT_CHARACTER_SEQUENCE.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.RULE_IS_NOT_SUPPORTED">
            <summary>The Constant RULE_IS_NOT_SUPPORTED.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.RESOURCE_WITH_GIVEN_URL_WAS_FILTERED_OUT">
            <summary>The Constant RESOURCE_WITH_GIVEN_URL_WAS_FILTERED_OUT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.UNABLE_TO_RETRIEVE_IMAGE_WITH_GIVEN_DATA_URI">
            <summary>The Constant UNABLE_TO_RETRIEVE_IMAGE_WITH_GIVEN_DATA_URI.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.UNABLE_TO_RETRIEVE_RESOURCE_WITH_GIVEN_RESOURCE_SIZE_BYTE_LIMIT">
            <summary>The Constant UNABLE_TO_RETRIEVE_RESOURCE_WITH_GIVEN_RESOURCE_SIZE_BYTE_LIMIT.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.UNABLE_TO_RETRIEVE_IMAGE_WITH_GIVEN_BASE_URI">
            <summary>The Constant UNABLE_TO_RETRIEVE_IMAGE_WITH_GIVEN_BASE_URI.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.UNABLE_TO_RETRIEVE_STREAM_WITH_GIVEN_BASE_URI">
            <summary>The Constant UNABLE_TO_RETRIEVE_STREAM_WITH_GIVEN_BASE_URI.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.WAS_NOT_ABLE_TO_DEFINE_BACKGROUND_CSS_SHORTHAND_PROPERTIES">
            <summary>The Constant WAS_NOT_ABLE_TO_DEFINE_BACKGROUND_CSS_SHORTHAND_PROPERTIES.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.ERROR_RESOLVING_PARENT_STYLES">
            <summary>The Constant ERROR_RESOLVING_PARENT_STYLES.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Logs.StyledXmlParserLogMessageConstant.#ctor">
            <summary>Instantiates a new log message constant.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Node.IAttribute">
            <summary>Interface for HTML attributes.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Node.IAttribute.GetKey">
            <summary>Gets the key.</summary>
            <returns>the key</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Node.IAttribute.GetValue">
            <summary>Gets the value.</summary>
            <returns>the value</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Node.IAttributes">
            <summary>Interface for a series of HTML attributes.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Node.IAttributes.GetAttribute(System.String)">
            <summary>Gets the value of an attribute, given a key.</summary>
            <param name="key">the key</param>
            <returns>the attribute</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Node.IAttributes.SetAttribute(System.String,System.String)">
            <summary>Adds a key and a value of an attributes.</summary>
            <param name="key">the key</param>
            <param name="value">the value</param>
        </member>
        <member name="M:iText.StyledXmlParser.Node.IAttributes.Size">
            <summary>Returns the number of attributes.</summary>
            <returns>the number of attributes</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Node.ICustomElementNode">
            <summary>
            Interface that serves as a marker indicating that this particular
            <see cref="T:iText.StyledXmlParser.Node.IElementNode"/>
            is something non-standard.
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Node.IDataNode">
            <summary>Interface for data nodes.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Node.IDataNode.GetWholeData">
            <summary>Gets all the data.</summary>
            <returns>the data</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Node.IDocumentNode">
            <summary>
            Interface implemented by classes that are a top node,
            and as such represent a Document.
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Node.IDocumentTypeNode">
            <summary>Interface for the document type node.</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Node.IElementNode">
            <summary>
            Interface for node classes that have a parent and children, and for which
            styles can be defined; each of these nodes can also have a name and attributes.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Node.IElementNode.Name">
            <summary>Gets the name of the element node.</summary>
            <returns>the string</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Node.IElementNode.GetAttributes">
            <summary>Gets the attributes.</summary>
            <returns>the attributes</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Node.IElementNode.GetAttribute(System.String)">
            <summary>Gets an attribute.</summary>
            <param name="key">the key of the attribute we want to get</param>
            <returns>the value of the attribute</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Node.IElementNode.GetAdditionalHtmlStyles">
            <summary>
            Gets additional styles, more specifically styles that affect an element
            based on its position in the HTML DOM, e.g. cell borders that are set
            due to the parent table "border" attribute, or styles from "col" tags
            that affect table elements, or blocks horizontal alignment that is
            the result of parent's "align" attribute.
            </summary>
            <returns>the additional html styles</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Node.IElementNode.AddAdditionalHtmlStyles(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Adds additional HTML styles.</summary>
            <param name="styles">the styles</param>
        </member>
        <member name="M:iText.StyledXmlParser.Node.IElementNode.GetLang">
            <summary>Gets the language.</summary>
            <returns>the language value</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Node.Impl.Jsoup.JsoupHtmlParser">
            <summary>Class that uses JSoup to parse HTML.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Node.Impl.Jsoup.JsoupHtmlParser.logger">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Node.Impl.Jsoup.JsoupHtmlParser.WrapJsoupHierarchy(iText.StyledXmlParser.Jsoup.Nodes.Node)">
            <summary>
            Wraps JSoup nodes into pdfHTML
            <see cref="T:iText.StyledXmlParser.Node.INode"/>
            classes.
            </summary>
            <param name="jsoupNode">the JSoup node instance</param>
            <returns>
            the
            <see cref="T:iText.StyledXmlParser.Node.INode"/>
            instance
            </returns>
        </member>
        <member name="T:iText.StyledXmlParser.Node.Impl.Jsoup.JsoupXmlParser">
            <summary>Class that uses JSoup to parse HTML.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Node.Impl.Jsoup.JsoupXmlParser.logger">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Node.Impl.Jsoup.JsoupXmlParser.WrapJsoupHierarchy(iText.StyledXmlParser.Jsoup.Nodes.Node)">
            <summary>
            Wraps JSoup nodes into pdfHTML
            <see cref="T:iText.StyledXmlParser.Node.INode"/>
            classes.
            </summary>
            <param name="jsoupNode">the JSoup node instance</param>
            <returns>
            the
            <see cref="T:iText.StyledXmlParser.Node.INode"/>
            instance
            </returns>
        </member>
        <member name="T:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupAttribute">
            <summary>
            Implementation of the
            <see cref="T:iText.StyledXmlParser.Node.IAttribute"/>
            interface; wrapper for the JSoup
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.Attribute"/>
            class.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupAttribute.attribute">
            <summary>
            The JSoup
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.Attribute"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupAttribute.#ctor(iText.StyledXmlParser.Jsoup.Nodes.Attribute)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupAttribute"/>
            instance.
            </summary>
            <param name="attribute">the attribute</param>
        </member>
        <member name="T:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupAttributes">
            <summary>
            Implementation of the <see cref="T:iText.StyledXmlParser.Node.IAttributes"/> interface; wrapper for the JSoup <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.Attributes"/> class.
            </summary>
        </member>
        <member name="T:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupDataNode">
            <summary>
            Implementation of the
            <see cref="T:iText.StyledXmlParser.Node.IDataNode"/>
            interface; wrapper for the JSoup
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.DataNode"/>
            class.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupDataNode.dataNode">
            <summary>The JSoup data node instance.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupDataNode.#ctor(iText.StyledXmlParser.Jsoup.Nodes.DataNode)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupDataNode"/>
            instance.
            </summary>
            <param name="dataNode">the data node</param>
        </member>
        <member name="T:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupDocumentNode">
            <summary>
            Implementation of the
            <see cref="T:iText.StyledXmlParser.Node.IDocumentNode"/>
            interface; wrapper for the JSoup
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.Document"/>
            class.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupDocumentNode.document">
            <summary>The JSoup document instance.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupDocumentNode.#ctor(iText.StyledXmlParser.Jsoup.Nodes.Document)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupDocumentNode"/>
            instance.
            </summary>
            <param name="document">the document</param>
        </member>
        <member name="M:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupDocumentNode.GetDocument">
            <summary>Gets the JSoup document.</summary>
            <returns>the document</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupDocumentTypeNode">
            <summary>
            Implementation of the
            <see cref="T:iText.StyledXmlParser.Node.IDocumentTypeNode"/>
            interface; wrapper for the JSoup
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.DocumentType"/>
            class.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupDocumentTypeNode.#ctor(iText.StyledXmlParser.Jsoup.Nodes.DocumentType)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupDocumentTypeNode"/>
            instance.
            </summary>
            <param name="node">the node</param>
        </member>
        <member name="T:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupElementNode">
            <summary>
            Implementation of the
            <see cref="T:iText.StyledXmlParser.Node.IElementNode"/>
            interface; wrapper for the JSoup
            <see cref="T:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupNode"/>
            class.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupElementNode.element">
            <summary>The JSoup element.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupElementNode.attributes">
            <summary>The attributes.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupElementNode.elementResolvedStyles">
            <summary>The resolved styles.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupElementNode.customDefaultStyles">
            <summary>The custom default styles.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupElementNode.lang">
            <summary>The language.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupElementNode.#ctor(iText.StyledXmlParser.Jsoup.Nodes.Element)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupElementNode"/>
            instance.
            </summary>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupElementNode.Text">
            <summary>Returns the element text.</summary>
            <returns>the text</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupNode">
            <summary>
            Implementation of the
            <see cref="T:iText.StyledXmlParser.Node.INode"/>
            interface; wrapper for the JSoup
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.Node"/>
            class.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupNode.node">
            <summary>The JSoup node instance.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupNode.childNodes">
            <summary>The child nodes.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupNode.parentNode">
            <summary>The parent node.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupNode.#ctor(iText.StyledXmlParser.Jsoup.Nodes.Node)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupNode"/>
            instance.
            </summary>
            <param name="node">the node</param>
        </member>
        <member name="T:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupTextNode">
            <summary>
            Implementation of the
            <see cref="T:iText.StyledXmlParser.Node.ITextNode"/>
            interface; wrapper for the JSoup
            <see cref="T:iText.StyledXmlParser.Jsoup.Nodes.TextNode"/>
            class.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupTextNode.textNode">
            <summary>The text node.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupTextNode.#ctor(iText.StyledXmlParser.Jsoup.Nodes.TextNode)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupTextNode"/>
            instance.
            </summary>
            <param name="textNode">the text node</param>
        </member>
        <member name="T:iText.StyledXmlParser.Node.INode">
            <summary>Interface for classes that describe a Node with a parent and children.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Node.INode.ChildNodes">
            <summary>Gets the child nodes.</summary>
            <returns>
            a list of
            <see cref="T:iText.StyledXmlParser.Node.INode"/>
            instances.
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Node.INode.AddChild(iText.StyledXmlParser.Node.INode)">
            <summary>Adds a child node.</summary>
            <param name="node">a child node that will be added to the current node</param>
        </member>
        <member name="M:iText.StyledXmlParser.Node.INode.ParentNode">
            <summary>Gets the parent node.</summary>
            <returns>the parent node</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Node.IStylesContainer">
            <summary>Interface for classes that can get and set styles.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Node.IStylesContainer.SetStyles(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Sets the styles.</summary>
            <param name="stringStringMap">
            a
            <see cref="!:System.Collections.IDictionary&lt;K, V&gt;"/>
            with style keys and values.
            </param>
        </member>
        <member name="M:iText.StyledXmlParser.Node.IStylesContainer.GetStyles">
            <summary>Gets the styles.</summary>
            <returns>the styles</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Node.ITextNode">
            <summary>Interface for text nodes.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Node.ITextNode.WholeText">
            <summary>Returns all the text.</summary>
            <returns>the text</returns>
        </member>
        <member name="T:iText.StyledXmlParser.PortUtil">
            <summary>
            This file is a helper class for internal usage only.
            Be aware that its API and functionality may be changed in future.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.PortUtil.CreateRegexPatternWithDotMatchingNewlines(System.String)">
            <summary>
            By default "." symbol in regular expressions does not match line terminators.
            The issue is more complicated by the fact that "." does not match only "\n" in C#, while it does not
            match several other characters as well in Java.
            This utility method creates a pattern in which dots match any character, including line terminators
            </summary>
            <param name="regex">regular expression string</param>
            <returns>pattern in which dot characters match any Unicode char, including line terminators</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Resolver.Font.BasicFontProvider">
            <summary>
            A basic
            <see cref="T:iText.Layout.Font.FontProvider"/>
            that allows configuring in the constructor which fonts are loaded by default.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Font.BasicFontProvider.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Resolver.Font.BasicFontProvider"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Font.BasicFontProvider.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Resolver.Font.BasicFontProvider"/>
            instance.
            </summary>
            <param name="registerStandardPdfFonts">use true if you want to register the standard Type 1 fonts (can't be embedded)
                </param>
            <param name="registerSystemFonts">use true if you want to register the system fonts (can require quite some resources)
                </param>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Font.BasicFontProvider.#ctor(System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Resolver.Font.BasicFontProvider"/>
            instance.
            </summary>
            <param name="registerStandardPdfFonts">use true if you want to register the standard Type 1 fonts (can't be embedded)
                </param>
            <param name="registerSystemFonts">use true if you want to register the system fonts (can require quite some resources)
                </param>
            <param name="defaultFontFamily">default font family</param>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Font.BasicFontProvider.#ctor(iText.Layout.Font.FontSet,System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Resolver.Font.BasicFontProvider"/>
            instance.
            </summary>
            <param name="fontSet">predefined set of fonts, could be null.</param>
            <param name="defaultFontFamily">default font family.</param>
        </member>
        <member name="T:iText.StyledXmlParser.Resolver.Resource.DefaultResourceRetriever">
            <summary>
            Default implementation of the
            <see cref="T:iText.StyledXmlParser.Resolver.Resource.IResourceRetriever"/>
            interface, which can set a limit
            on the size of retrieved resources using input stream with a limit on the number of bytes read.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.DefaultResourceRetriever.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Resolver.Resource.DefaultResourceRetriever"/>
            instance.
            </summary>
            <remarks>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Resolver.Resource.DefaultResourceRetriever"/>
            instance.
            The limit on the size of retrieved resources is by default equal to
            <see cref="F:System.Int64.MaxValue"/>
            bytes.
            </remarks>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.DefaultResourceRetriever.GetResourceSizeByteLimit">
            <summary>Gets the resource size byte limit.</summary>
            <remarks>
            Gets the resource size byte limit.
            The resourceSizeByteLimit is used to create input stream with a limit on the number of bytes read.
            </remarks>
            <returns>the resource size byte limit</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.DefaultResourceRetriever.SetResourceSizeByteLimit(System.Int64)">
            <summary>Sets the resource size byte limit.</summary>
            <remarks>
            Sets the resource size byte limit.
            The resourceSizeByteLimit is used to create input stream with a limit on the number of bytes read.
            </remarks>
            <param name="resourceSizeByteLimit">the resource size byte limit</param>
            <returns>
            the
            <see cref="T:iText.StyledXmlParser.Resolver.Resource.IResourceRetriever"/>
            instance
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.DefaultResourceRetriever.GetInputStreamByUrl(System.Uri)">
            <summary>
            Gets the input stream with current limit on the number of bytes read,
            that connect with source URL for retrieving data from that connection.
            </summary>
            <param name="url">the source URL</param>
            <returns>the limited input stream or null if the URL was filtered</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.DefaultResourceRetriever.GetByteArrayByUrl(System.Uri)">
            <summary>Gets the byte array that are retrieved from the source URL.</summary>
            <param name="url">the source URL</param>
            <returns>
            the byte array or null if the retrieving failed or the
            URL was filtered or the resourceSizeByteLimit was violated
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.DefaultResourceRetriever.UrlFilter(System.Uri)">
            <summary>Method for filtering resources by URL.</summary>
            <remarks>
            Method for filtering resources by URL.
            The default implementation allows for all URLs. Override this method if want to set filtering.
            </remarks>
            <param name="url">the source URL</param>
            <returns>true if the resource can be retrieved and false otherwise</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Resolver.Resource.IResourceRetriever">
            <summary>Interface for classes that can retrieve data from resources by URL.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.IResourceRetriever.GetInputStreamByUrl(System.Uri)">
            <summary>
            Gets the
            <see cref="T:System.IO.Stream"/>
            that connect with source URL for retrieving data from that connection.
            </summary>
            <param name="url">the source URL</param>
            <returns>the input stream or null if the retrieving failed</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.IResourceRetriever.GetByteArrayByUrl(System.Uri)">
            <summary>Gets the byte array that are retrieved from the source URL.</summary>
            <param name="url">the source URL</param>
            <returns>the byte array or null if the retrieving failed</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Resolver.Resource.LimitedInputStream">
             <summary>
             Implementation of the
             <see cref="T:System.IO.Stream"/>
             abstract class, which is used to restrict
             reading bytes from input stream i.e. if more bytes are read than the readingByteLimit,
             an
             <see cref="T:iText.StyledXmlParser.Exceptions.ReadingByteLimitException"/>
             exception will be thrown.
            
             Note that the readingByteLimit is not taken into account in the <see cref="M:iText.StyledXmlParser.Resolver.Resource.LimitedInputStream.Seek(System.Int64,System.IO.SeekOrigin)"/>,
             <see cref="M:iText.StyledXmlParser.Resolver.Resource.LimitedInputStream.set_Position(System.Int64)"/> methods.
             </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.LimitedInputStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Resolver.Resource.LimitedInputStream"/>
            instance.
            </summary>
            <param name="inputStream">the input stream, the reading of bytes from which will be limited</param>
            <param name="readingByteLimit">the reading byte limit, must not be less than zero</param>
        </member>
        <member name="T:iText.StyledXmlParser.Resolver.Resource.ResourceResolver">
            <summary>Utilities class to resolve resources.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Resolver.Resource.ResourceResolver.BASE64_IDENTIFIER">
            <summary>Identifier string used when loading in base64 images.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Resolver.Resource.ResourceResolver.DATA_SCHEMA_PREFIX">
            <summary>Identifier string used to detect that the source is under data URI scheme.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Resolver.Resource.ResourceResolver.uriResolver">
            <summary>
            The
            <see cref="T:iText.StyledXmlParser.Resolver.Resource.UriResolver"/>
            instance.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Resolver.Resource.ResourceResolver.imageCache">
            <summary>
            The
            <see cref="T:iText.StyledXmlParser.Resolver.Resource.SimpleImageCache"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.ResourceResolver.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Resolver.Resource.ResourceResolver"/>
            instance.
            </summary>
            <remarks>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Resolver.Resource.ResourceResolver"/>
            instance.
            If
            <paramref name="baseUri"/>
            is a string that represents an absolute URI with any schema except "file" - resources
            url values will be resolved exactly as "new URL(baseUrl, uriString)". Otherwise base URI will be handled
            as path in local file system.
            <para />
            If empty string or relative URI string is passed as base URI, then it will be resolved against current
            working directory of this application instance.
            </remarks>
            <param name="baseUri">base URI against which all relative resource URIs will be resolved</param>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.ResourceResolver.#ctor(System.String,iText.StyledXmlParser.Resolver.Resource.IResourceRetriever)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Resolver.Resource.ResourceResolver"/>
            instance.
            </summary>
            <remarks>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Resolver.Resource.ResourceResolver"/>
            instance.
            If
            <paramref name="baseUri"/>
            is a string that represents an absolute URI with any schema except "file" - resources
            url values will be resolved exactly as "new URL(baseUrl, uriString)". Otherwise base URI will be handled
            as path in local file system.
            <para />
            If empty string or relative URI string is passed as base URI, then it will be resolved against current
            working directory of this application instance.
            </remarks>
            <param name="baseUri">base URI against which all relative resource URIs will be resolved</param>
            <param name="retriever">the resource retriever with the help of which data from resources will be retrieved
                </param>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.ResourceResolver.GetRetriever">
            <summary>Gets the resource retriever.</summary>
            <remarks>
            Gets the resource retriever.
            The retriever is used to retrieve data from resources by URL.
            </remarks>
            <returns>the resource retriever</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.ResourceResolver.SetRetriever(iText.StyledXmlParser.Resolver.Resource.IResourceRetriever)">
            <summary>Sets the resource retriever.</summary>
            <remarks>
            Sets the resource retriever.
            The retriever is used to retrieve data from resources by URL.
            </remarks>
            <param name="retriever">the resource retriever</param>
            <returns>
            the
            <see cref="T:iText.StyledXmlParser.Resolver.Resource.ResourceResolver"/>
            instance
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.ResourceResolver.RetrieveImage(System.String)">
            <summary>
            Retrieve image as either
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfImageXObject"/>
            , or
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfFormXObject"/>.
            </summary>
            <param name="src">either link to file or base64 encoded stream</param>
            <returns>PdfXObject on success, otherwise null</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.ResourceResolver.RetrieveBytesFromResource(System.String)">
            <summary>
            Retrieve a resource as a byte array from a source that
            can either be a link to a file, or a base64 encoded
            <see cref="T:System.String"/>.
            </summary>
            <param name="src">either link to file or base64 encoded stream</param>
            <returns>byte[] on success, otherwise null</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.ResourceResolver.RetrieveResourceAsInputStream(System.String)">
            <summary>Retrieve the resource found in src as an InputStream</summary>
            <param name="src">path to the resource</param>
            <returns>InputStream for the resource on success, otherwise null</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.ResourceResolver.IsDataSrc(System.String)">
            <summary>Checks if source is under data URI scheme.</summary>
            <remarks>Checks if source is under data URI scheme. (eg data:[&lt;media type&gt;][;base64],&lt;data&gt;).</remarks>
            <param name="src">string to test</param>
            <returns>true if source is under data URI scheme</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.ResourceResolver.ResolveAgainstBaseUri(System.String)">
            <summary>Resolves a given URI against the base URI.</summary>
            <param name="uri">the uri</param>
            <returns>the url</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.ResourceResolver.ResetCache">
            <summary>Resets the simple image cache.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.ResourceResolver.CreateImageByUrl(System.Uri)">
            <summary>Create a iText XObject based on the image stored at the passed location.</summary>
            <param name="url">location of the Image file.</param>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfXObject"/>
            containing the Image loaded in.
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.ResourceResolver.IsContains64Mark(System.String)">
            <summary>Checks if string contains base64 mark.</summary>
            <remarks>
            Checks if string contains base64 mark.
            It does not guarantee that src is a correct base64 data-string.
            </remarks>
            <param name="src">string to test</param>
            <returns>true if string contains base64 mark</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Resolver.Resource.SimpleImageCache">
            <summary>Simple implementation of an image cache.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Resolver.Resource.SimpleImageCache.cache">
            <summary>The cache mapping a source path to an Image XObject.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Resolver.Resource.SimpleImageCache.imagesFrequency">
            <summary>Stores how many times each image is used.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Resolver.Resource.SimpleImageCache.capacity">
            <summary>The capacity of the cache.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.SimpleImageCache.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Resolver.Resource.SimpleImageCache"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.SimpleImageCache.#ctor(System.Int32)">
            <summary>
            Creates a new
            <see cref="T:iText.StyledXmlParser.Resolver.Resource.SimpleImageCache"/>
            instance.
            </summary>
            <param name="capacity">the capacity</param>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.SimpleImageCache.PutImage(System.String,iText.Kernel.Pdf.Xobject.PdfXObject)">
            <summary>Adds an image to the cache.</summary>
            <param name="src">the source path</param>
            <param name="imageXObject">the image XObject to be cached</param>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.SimpleImageCache.GetImage(System.String)">
            <summary>Gets an image from the cache.</summary>
            <param name="src">the source path</param>
            <returns>the image XObject</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.SimpleImageCache.Size">
            <summary>Gets the size of the cache.</summary>
            <returns>the cache size</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.SimpleImageCache.Reset">
            <summary>Resets the cache.</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.SimpleImageCache.EnsureCapacity">
            <summary>
            Ensures the capacity of the cache by removing the least important images
            (based on the number of times an image is used).
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Resolver.Resource.UriEncodeUtil.unreservedAndReserved">
            <summary>
            Set of 256 characters with the bits that don't need encoding set to on.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Resolver.Resource.UriEncodeUtil.caseDiff">
            <summary>
            The difference between the value a character in lower cases and the upper case character value.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Resolver.Resource.UriEncodeUtil.dfltEncName">
            <summary>
            The default encoding ("UTF-8").
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.UriEncodeUtil.Encode(System.String)">
            <summary>
            Encodes a <see cref="T:System.String"/> in the default encoding and default uri scheme to an HTML-encoded <see cref="T:System.String"/>.
            </summary>
            <param name="s">the original string</param>
            <returns>the encoded string</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.UriEncodeUtil.Encode(System.String,System.String)">
            <summary>
            Encodes a <see cref="T:System.String"/> in a specific encoding and specific uri scheme to an HTML-encoded <see cref="T:System.String"/>.
            </summary>
            <param name="s">the original string</param>
            <param name="enc">the encoding</param>
            <returns>the encoded string</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Resolver.Resource.UriResolver">
            <summary>
            Utilities class to resolve URIs.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Resolver.Resource.UriResolver.baseUrl">
            <summary>
            The base url.
            </summary>
        </member>
        <member name="F:iText.StyledXmlParser.Resolver.Resource.UriResolver.isLocalBaseUri">
            <summary>
            Indicates if the Uri refers to a local resource.
            </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.UriResolver.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:iText.StyledXmlParser.Resolver.Resource.UriResolver"/> instance.
            </summary>
            <param name="baseUri"> the base URI</param>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.UriResolver.GetBaseUri">
            <summary>
            Gets the base URI.
            </summary>
            <returns>the base uri</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.UriResolver.ResolveAgainstBaseUri(System.String)">
            <summary>
            Resolve a given URI against the base URI.
            </summary>
            <param name="uriString">the given URI</param>
            <returns>the resolved URI</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.UriResolver.ResolveBaseUrlOrPath(System.String)">
            <summary>
            Resolves the base URI to an URL or path.
            </summary>
            <param name="base">the base URI</param>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.UriResolver.BaseUriAsUrl(System.String)">
            <summary>
            Resolves a base URI as an URL.
            </summary>
            <param name="baseUriString">the base URI</param>
            <returns>the URL, or null if not successful</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.UriResolver.UriAsFileUrl(System.String)">
            <summary>
            Resolves a base URI as a file URL.
            </summary>
            <param name="baseUriString">the base URI</param>
            <returns>the file URL</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Resolver.Resource.UriResolver.IsLocalBaseUri">
            <summary>
            Check if baseURI is local
            </summary>
            <returns>true if baseURI is local, otherwise false</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Util.FontFamilySplitterUtil">
            <summary>Split CSS 'font-family' string into list of font-families or generic-families</summary>
        </member>
        <member name="T:iText.StyledXmlParser.Util.StyleUtil">
            <summary>Utility class for resolving parent-inheritance of style and attribute declarations.</summary>
        </member>
        <member name="F:iText.StyledXmlParser.Util.StyleUtil.fontSizeDependentPercentage">
            <summary>List to store the properties whose value can depend on parent or element font-size</summary>
        </member>
        <member name="M:iText.StyledXmlParser.Util.StyleUtil.MergeParentStyleDeclaration(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.String,System.Collections.Generic.ICollection{iText.StyledXmlParser.Css.Resolve.IStyleInheritance})">
            <summary>Merge parent CSS declarations.</summary>
            <param name="styles">the styles map</param>
            <param name="styleProperty">the CSS property</param>
            <param name="parentPropValue">the parent properties value</param>
            <param name="parentFontSizeString">is a font size of parent element</param>
            <param name="inheritanceRules">set of inheritance rules</param>
            <returns>a map of updated styles after merging parent and child style declarations</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Util.StyleUtil.CheckInheritance(System.String,System.Collections.Generic.ICollection{iText.StyledXmlParser.Css.Resolve.IStyleInheritance})">
            <summary>Check all inheritance rule-sets to see if the passed property is inheritable</summary>
            <param name="styleProperty">property identifier to check</param>
            <param name="inheritanceRules">a set of inheritance rules</param>
            <returns>
            True if the property is inheritable by one of the rule-sets,
            false if it is not marked as inheritable in all rule-sets
            </returns>
        </member>
        <member name="M:iText.StyledXmlParser.Util.StyleUtil.ValueIsOfMeasurement(System.String,System.String)">
            <summary>Check to see if the passed value is a measurement of the type based on the passed measurement symbol string
                </summary>
            <param name="value">string containing value to check</param>
            <param name="measurement">measurement symbol (e.g. % for relative, px for pixels)</param>
            <returns>True if the value is numerical and ends with the measurement symbol, false otherwise</returns>
        </member>
        <member name="T:iText.StyledXmlParser.Util.WhiteSpaceUtil">
            <summary>Utility class for white-space handling methods that are used both in pdfHTML and the iText-core SVG module
                </summary>
        </member>
        <member name="M:iText.StyledXmlParser.Util.WhiteSpaceUtil.CollapseConsecutiveSpaces(System.String)">
            <summary>Collapse all consecutive spaces of the passed String into single spaces</summary>
            <param name="s">String to collapse</param>
            <returns>a String containing the contents of the input, with consecutive spaces collapsed</returns>
        </member>
        <member name="M:iText.StyledXmlParser.Util.WhiteSpaceUtil.IsNonEmSpace(System.Char)">
            <summary>Checks if a character is white space value that is not em, en or similar special whitespace character.
                </summary>
            <param name="ch">the character</param>
            <returns>true, if the character is a white space character, but no em, en or similar</returns>
        </member>
    </members>
</doc>
