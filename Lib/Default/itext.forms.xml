<?xml version="1.0"?>
<doc>
    <assembly>
        <name>itext.forms</name>
    </assembly>
    <members>
        <member name="M:iText.Forms.Exceptions.AttributeNotFoundException.#ctor(System.String)">
            <summary>The exception thrown when the attribute with given name is not found in the object attributes list.
                </summary>
            <param name="attribute">the name of missing attribute.</param>
        </member>
        <member name="T:iText.Forms.Exceptions.FormsExceptionMessageConstant">
            <summary>Class that bundles all the error message templates as constants.</summary>
        </member>
        <member name="F:iText.Forms.Exceptions.XfdfException.ATTRIBUTE_NAME_OR_VALUE_MISSING">
            <summary>Message in case one tries to add attribute with null name or value</summary>
        </member>
        <member name="F:iText.Forms.Exceptions.XfdfException.PAGE_IS_MISSING">
            <summary>Message in case one tries to add annotation without indicating the page it belongs to</summary>
        </member>
        <member name="F:iText.Forms.Fields.Borders.AbstractFormBorder.FORM_UNDERLINE">
            <summary>The form underline border.</summary>
            <seealso cref="T:iText.Forms.Fields.Borders.UnderlineBorder"/>
        </member>
        <member name="F:iText.Forms.Fields.Borders.AbstractFormBorder.FORM_BEVELED">
            <summary>The form beveled border.</summary>
            <seealso cref="T:iText.Forms.Fields.Borders.BeveledBorder"/>
        </member>
        <member name="F:iText.Forms.Fields.Borders.AbstractFormBorder.FORM_INSET">
            <summary>The form inset border.</summary>
            <seealso cref="T:iText.Forms.Fields.Borders.InsetBorder"/>
        </member>
        <member name="M:iText.Forms.Fields.Borders.BeveledBorder.Draw(iText.Kernel.Pdf.Canvas.PdfCanvas,System.Single,System.Single,System.Single,System.Single,iText.Layout.Borders.Border.Side,System.Single,System.Single)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Forms.Fields.Borders.BeveledBorder.DrawCellBorder(iText.Kernel.Pdf.Canvas.PdfCanvas,System.Single,System.Single,System.Single,System.Single,iText.Layout.Borders.Border.Side)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Forms.Fields.Borders.BeveledBorder.GetBorderType">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Forms.Fields.Borders.FormBorderFactory">
            <summary>
            A factory for creating
            <see cref="T:iText.Forms.Fields.Borders.AbstractFormBorder"/>
            implementations.
            </summary>
        </member>
        <member name="M:iText.Forms.Fields.Borders.FormBorderFactory.GetBorder(iText.Kernel.Pdf.PdfDictionary,System.Single,iText.Kernel.Colors.Color,iText.Kernel.Colors.Color)">
            <summary>
            Returns
            <see cref="T:iText.Layout.Borders.Border"/>
            for specific borderStyle.
            </summary>
            <param name="borderStyle">border style dictionary. ISO 32000-1 12.5.4</param>
            <param name="borderWidth">width of the border</param>
            <param name="borderColor">color of the border</param>
            <param name="backgroundColor">element background color. This param used for drawing beveled border type</param>
            <returns>
            
            <see cref="T:iText.Layout.Borders.Border"/>
            implementation or
            <see langword="null"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.Borders.InsetBorder.Draw(iText.Kernel.Pdf.Canvas.PdfCanvas,System.Single,System.Single,System.Single,System.Single,iText.Layout.Borders.Border.Side,System.Single,System.Single)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Forms.Fields.Borders.InsetBorder.DrawCellBorder(iText.Kernel.Pdf.Canvas.PdfCanvas,System.Single,System.Single,System.Single,System.Single,iText.Layout.Borders.Border.Side)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Forms.Fields.Borders.InsetBorder.GetBorderType">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Forms.Fields.Borders.UnderlineBorder.Draw(iText.Kernel.Pdf.Canvas.PdfCanvas,System.Single,System.Single,System.Single,System.Single,iText.Layout.Borders.Border.Side,System.Single,System.Single)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Forms.Fields.Borders.UnderlineBorder.DrawCellBorder(iText.Kernel.Pdf.Canvas.PdfCanvas,System.Single,System.Single,System.Single,System.Single,iText.Layout.Borders.Border.Side)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Forms.Fields.Borders.UnderlineBorder.GetBorderType">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Forms.Fields.FormFieldValueNonTrimmingTextRenderer">
            <summary>Custom implementation for rendering form field values.</summary>
            <remarks>
            Custom implementation for rendering form field values. It makes sure that text value
            trimming strategy matches Acrobat's behavior
            </remarks>
        </member>
        <member name="T:iText.Forms.Fields.FormsMetaInfoStaticContainer">
            <summary>Class to store meta info that will be used in forms module in static context.</summary>
        </member>
        <member name="M:iText.Forms.Fields.FormsMetaInfoStaticContainer.UseMetaInfoDuringTheAction(iText.Layout.Renderer.MetaInfoContainer,iText.Commons.Utils.Action)">
            <summary>Sets meta info related to forms into static context, executes the action and then cleans meta info.
                </summary>
            <remarks>
            Sets meta info related to forms into static context, executes the action and then cleans meta info.
            <para />
            Keep in mind that this instance will only be accessible from the same thread.
            </remarks>
            <param name="metaInfoContainer">instance to be set.</param>
            <param name="action">action which will be executed while meta info is set to static context.</param>
        </member>
        <member name="M:iText.Forms.Fields.FormsMetaInfoStaticContainer.GetMetaInfoForLayout">
            <summary>Gets meta info which was set previously.</summary>
            <remarks>
            Gets meta info which was set previously.
            <para />
            Keep in mind that this operation will return meta info instance which was set previously from the same thread.
            </remarks>
            <returns>meta info instance.</returns>
        </member>
        <member name="T:iText.Forms.Fields.PdfButtonFormField">
            <summary>An interactive control on the screen that raises events and/or can retain data.</summary>
        </member>
        <member name="F:iText.Forms.Fields.PdfButtonFormField.FF_NO_TOGGLE_TO_OFF">
            <summary>Button field flags</summary>
        </member>
        <member name="M:iText.Forms.Fields.PdfButtonFormField.GetFormType">
            <summary>Returns <c>Btn</c>, the form type for choice form fields.</summary>
            <returns>
            the form type, as a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfButtonFormField.IsRadio">
            <summary>
            If true, the field is a set of radio buttons; if false, the field is a
            check box.
            </summary>
            <remarks>
            If true, the field is a set of radio buttons; if false, the field is a
            check box. This flag only works if the Pushbutton flag is set to false.
            </remarks>
            <returns>whether the field is currently radio buttons or a checkbox</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfButtonFormField.SetRadio(System.Boolean)">
            <summary>
            If true, the field is a set of radio buttons; if false, the field is a
            check box.
            </summary>
            <remarks>
            If true, the field is a set of radio buttons; if false, the field is a
            check box. This flag should be set only if the Pushbutton flag is set to false.
            </remarks>
            <param name="radio">whether the field should be radio buttons or a checkbox</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfButtonFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfButtonFormField.IsToggleOff">
            <summary>
            If true, clicking the selected button deselects it, leaving no button
            selected.
            </summary>
            <remarks>
            If true, clicking the selected button deselects it, leaving no button
            selected. If false, exactly one radio button shall be selected at all
            times. Only valid for radio buttons.
            </remarks>
            <returns>whether a radio button currently allows to choose no options</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfButtonFormField.SetToggleOff(System.Boolean)">
            <summary>If true, clicking the selected button deselects it, leaving no button selected.</summary>
            <remarks>
            If true, clicking the selected button deselects it, leaving no button selected.
            If false, exactly one radio button shall be selected at all times.
            </remarks>
            <param name="toggleOff">whether a radio button may allow to choose no options</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfButtonFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfButtonFormField.IsPushButton">
            <summary>If true, the field is a pushbutton that does not retain a permanent value.</summary>
            <returns>whether or not the field is currently a pushbutton</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfButtonFormField.SetPushButton(System.Boolean)">
            <summary>If true, the field is a pushbutton that does not retain a permanent value.</summary>
            <param name="pushButton">whether or not to set the field to a pushbutton</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfButtonFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfButtonFormField.IsRadiosInUnison">
            <summary>
            If true, a group of radio buttons within a radio button field that use
            the same value for the on state will turn on and off in unison;
            that is if one is checked, they are all checked.
            </summary>
            <remarks>
            If true, a group of radio buttons within a radio button field that use
            the same value for the on state will turn on and off in unison;
            that is if one is checked, they are all checked.
            If false, the buttons are mutually exclusive
            </remarks>
            <returns>whether or not buttons are turned off in unison</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfButtonFormField.SetRadiosInUnison(System.Boolean)">
            <summary>
            If true, a group of radio buttons within a radio button field that use
            the same value for the on state will turn on and off in unison; that is
            if one is checked, they are all checked.
            </summary>
            <remarks>
            If true, a group of radio buttons within a radio button field that use
            the same value for the on state will turn on and off in unison; that is
            if one is checked, they are all checked.
            If false, the buttons are mutually exclusive
            </remarks>
            <param name="radiosInUnison">whether or not buttons should turn off in unison</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfButtonFormField"/>
            </returns>
        </member>
        <member name="T:iText.Forms.Fields.PdfChoiceFormField">
            <summary>An AcroForm field type representing any type of choice field.</summary>
            <remarks>
            An AcroForm field type representing any type of choice field. Choice fields
            are to be represented by a viewer as a list box or a combo box.
            </remarks>
        </member>
        <member name="F:iText.Forms.Fields.PdfChoiceFormField.FF_COMBO">
            <summary>Choice field flags</summary>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.GetFormType">
            <summary>Returns <c>Ch</c>, the form type for choice form fields.</summary>
            <returns>
            the form type, as a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.SetTopIndex(System.Int32)">
            <summary>Sets the index of the first visible option in a scrollable list.</summary>
            <param name="index">the index of the first option</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.GetTopIndex">
            <summary>Gets the current index of the first option in a scrollable list.</summary>
            <returns>
            the index of the first option, as a
            <see cref="T:iText.Kernel.Pdf.PdfNumber"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.SetIndices(iText.Kernel.Pdf.PdfArray)">
            <summary>Sets the selected items in the field.</summary>
            <param name="indices">a sorted array of indices representing selected items in the field</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.SetListSelected(System.String[])">
            <summary>Highlights the options.</summary>
            <remarks>
            Highlights the options. If this method is used for Combo box, the first value in input array
            will be the field value
            </remarks>
            <param name="optionValues">Array of options to be highlighted</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.SetListSelected(System.String[],System.Boolean)">
            <summary>Highlights the options and generates field appearance if needed..</summary>
            <remarks>
            Highlights the options and generates field appearance if needed.. If this method is used for Combo box, the first value in input array
            will be the field value
            </remarks>
            <param name="optionValues">Array of options to be highlighted</param>
            <param name="generateAppearance">if false, appearance won't be regenerated</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.SetListSelected(System.Int32[])">
            <summary>Highlights the options.</summary>
            <remarks>
            Highlights the options. If this method is used for Combo box, the first value in input array
            will be the field value
            </remarks>
            <param name="optionNumbers">The option numbers</param>
            <returns>
            The edited
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.GetIndices">
            <summary>Gets the currently selected items in the field</summary>
            <returns>a sorted array of indices representing the currently selected items in the field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.SetCombo(System.Boolean)">
            <summary>If true, the field is a combo box; if false, the field is a list box.</summary>
            <param name="combo">whether or not the field should be a combo box</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.IsCombo">
            <summary>If true, the field is a combo box; if false, the field is a list box.</summary>
            <returns>whether or not the field is now a combo box.</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.SetEdit(System.Boolean)">
            <summary>
            If true, the combo box shall include an editable text box as well as a
            drop-down list; if false, it shall include only a drop-down list.
            </summary>
            <remarks>
            If true, the combo box shall include an editable text box as well as a
            drop-down list; if false, it shall include only a drop-down list.
            This flag shall be used only if the Combo flag is true.
            </remarks>
            <param name="edit">whether or not to add an editable text box</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.IsEdit">
            <summary>
            If true, the combo box shall include an editable text box as well as a
            drop-down list; if false, it shall include only a drop-down list.
            </summary>
            <remarks>
            If true, the combo box shall include an editable text box as well as a
            drop-down list; if false, it shall include only a drop-down list.
            This flag shall be used only if the Combo flag is true.
            </remarks>
            <returns>whether or not there is currently an editable text box</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.SetSort(System.Boolean)">
            <summary>If true, the field's option items shall be sorted alphabetically.</summary>
            <remarks>
            If true, the field's option items shall be sorted alphabetically.
            This flag is intended for use by writers, not by readers.
            </remarks>
            <param name="sort">whether or not to sort the items</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.IsSort">
            <summary>If true, the field's option items shall be sorted alphabetically.</summary>
            <remarks>
            If true, the field's option items shall be sorted alphabetically.
            This flag is intended for use by writers, not by readers.
            </remarks>
            <returns>whether or not the items are currently sorted</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.SetMultiSelect(System.Boolean)">
            <summary>
            If true, more than one of the field's option items may be selected
            simultaneously; if false, at most one item shall be selected.
            </summary>
            <param name="multiSelect">whether or not to allow multiple selection</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.IsMultiSelect">
            <summary>If true, more than one of the field's option items may be selected simultaneously; if false, at most one item shall be selected.
                </summary>
            <returns>whether or not multiple selection is currently allowed</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.SetSpellCheck(System.Boolean)">
            <summary>If true, text entered in the field shall be spell-checked..</summary>
            <param name="spellCheck">whether or not to require the PDF viewer to perform a spell check</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.IsSpellCheck">
            <summary>If true, text entered in the field shall be spell-checked..</summary>
            <returns>whether or not PDF viewer must perform a spell check</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.SetCommitOnSelChange(System.Boolean)">
            <summary>If true, the new value shall be committed as soon as a selection is made (commonly with the pointing device).
                </summary>
            <param name="commitOnSelChange">whether or not to save changes immediately</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfChoiceFormField.IsCommitOnSelChange">
            <summary>If true, the new value shall be committed as soon as a selection is made (commonly with the pointing device).
                </summary>
            <returns>whether or not to save changes immediately</returns>
        </member>
        <member name="T:iText.Forms.Fields.PdfFormField">
            <summary>
            This class represents a single field or field group in an
            <see cref="T:iText.Forms.PdfAcroForm">AcroForm</see>.
            </summary>
            <remarks>
            This class represents a single field or field group in an
            <see cref="T:iText.Forms.PdfAcroForm">AcroForm</see>.
            <para />
            To be able to be wrapped with this
            <see cref="T:iText.Kernel.Pdf.PdfObjectWrapper`1"/>
            the
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            must be indirect.
            </remarks>
        </member>
        <member name="F:iText.Forms.Fields.PdfFormField.FF_MULTILINE">
            <summary>
            Flag that designates, if set, that the field can contain multiple lines
            of text.
            </summary>
        </member>
        <member name="F:iText.Forms.Fields.PdfFormField.FF_PASSWORD">
            <summary>Flag that designates, if set, that the field's contents must be obfuscated.</summary>
        </member>
        <member name="F:iText.Forms.Fields.PdfFormField.TYPE_CHECK">
            <summary>A field with the symbol check</summary>
        </member>
        <member name="F:iText.Forms.Fields.PdfFormField.TYPE_CIRCLE">
            <summary>A field with the symbol circle</summary>
        </member>
        <member name="F:iText.Forms.Fields.PdfFormField.TYPE_CROSS">
            <summary>A field with the symbol cross</summary>
        </member>
        <member name="F:iText.Forms.Fields.PdfFormField.TYPE_DIAMOND">
            <summary>A field with the symbol diamond</summary>
        </member>
        <member name="F:iText.Forms.Fields.PdfFormField.TYPE_SQUARE">
            <summary>A field with the symbol square</summary>
        </member>
        <member name="F:iText.Forms.Fields.PdfFormField.TYPE_STAR">
            <summary>A field with the symbol star</summary>
        </member>
        <member name="F:iText.Forms.Fields.PdfFormField.X_OFFSET">
            <summary>Default padding X offset</summary>
        </member>
        <member name="F:iText.Forms.Fields.PdfFormField.DEFAULT_FONT_SIZE">
            <summary>Size of text in form fields when font size is not explicitly set.</summary>
        </member>
        <member name="F:iText.Forms.Fields.PdfFormField.MIN_FONT_SIZE">
            <summary>Minimal size of text in form fields</summary>
        </member>
        <member name="F:iText.Forms.Fields.PdfFormField.DA_FONT">
            <summary>Index of font value in default appearance element</summary>
        </member>
        <member name="F:iText.Forms.Fields.PdfFormField.DA_SIZE">
            <summary>Index of font size value in default appearance element</summary>
        </member>
        <member name="F:iText.Forms.Fields.PdfFormField.DA_COLOR">
            <summary>Index of color value in default appearance element</summary>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Creates a form field as a wrapper object around a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>.
            </summary>
            <remarks>
            Creates a form field as a wrapper object around a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>.
            This
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            must be an indirect object.
            </remarks>
            <param name="pdfObject">the dictionary to be wrapped, must have an indirect reference.</param>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.#ctor(iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Creates a minimal
            <see cref="T:iText.Forms.Fields.PdfFormField"/>.
            </summary>
            <param name="pdfDocument">The document</param>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.#ctor(iText.Kernel.Pdf.Annot.PdfWidgetAnnotation,iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Creates a form field as a parent of a
            <see cref="T:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation"/>.
            </summary>
            <param name="widget">
            The widget which will be a kid of the
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            </param>
            <param name="pdfDocument">The document</param>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.MakeFieldFlag(System.Int32)">
            <summary>Makes a field flag by bit position.</summary>
            <remarks>
            Makes a field flag by bit position. Bit positions are numbered 1 to 32.
            But position 0 corresponds to flag 1, position 3 corresponds to flag 4 etc.
            </remarks>
            <param name="bitPosition">bit position of a flag in range 1 to 32 from the pdf specification.</param>
            <returns>corresponding field flag.</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateEmptyField(iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Creates an empty form field without a predefined set of layout or
            behavior.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the field in
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateEmptyField(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Pdf.PdfAConformanceLevel)">
            <summary>
            Creates an empty form field without a predefined set of layout or
            behavior.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the field in
            </param>
            <param name="pdfAConformanceLevel">
            the
            <see cref="T:iText.Kernel.Pdf.PdfAConformanceLevel"/>
            of the document.
            <c/>
            null if it's no PDF/A document
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateButton(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.Int32)">
            <summary>
            Creates an empty
            <see cref="T:iText.Forms.Fields.PdfButtonFormField">button form field</see>
            with custom
            behavior and layout, on a specified location.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the button field in
            </param>
            <param name="rect">the location on the page for the button</param>
            <param name="flags">
            an <c>int</c>, containing a set of binary behavioral
            flags. Do binary <c>OR</c> on this <c>int</c> to set the
            flags you require.
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfButtonFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateButton(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.Int32,iText.Kernel.Pdf.PdfAConformanceLevel)">
            <summary>
            Creates an empty
            <see cref="T:iText.Forms.Fields.PdfButtonFormField">button form field</see>
            with custom
            behavior and layout, on a specified location.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the button field in
            </param>
            <param name="rect">the location on the page for the button</param>
            <param name="flags">
            an <c>int</c>, containing a set of binary behavioral
            flags. Do binary <c>OR</c> on this <c>int</c> to set the
            flags you require.
            </param>
            <param name="pdfAConformanceLevel">
            the
            <see cref="T:iText.Kernel.Pdf.PdfAConformanceLevel"/>
            of the document.
            <c/>
            null if it's no PDF/A document
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfButtonFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateButton(iText.Kernel.Pdf.PdfDocument,System.Int32)">
            <summary>
            Creates an empty
            <see cref="T:iText.Forms.Fields.PdfButtonFormField">button form field</see>
            with custom
            behavior and layout.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the button field in
            </param>
            <param name="flags">
            an <c>int</c>, containing a set of binary behavioral
            flags. Do binary <c>OR</c> on this <c>int</c> to set the
            flags you require.
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfButtonFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateButton(iText.Kernel.Pdf.PdfDocument,System.Int32,iText.Kernel.Pdf.PdfAConformanceLevel)">
            <summary>
            Creates an empty
            <see cref="T:iText.Forms.Fields.PdfButtonFormField">button form field</see>
            with custom
            behavior and layout.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the button field in
            </param>
            <param name="flags">
            an <c>int</c>, containing a set of binary behavioral
            flags. Do binary <c>OR</c> on this <c>int</c> to set the
            flags you require.
            </param>
            <param name="pdfAConformanceLevel">
            the
            <see cref="T:iText.Kernel.Pdf.PdfAConformanceLevel"/>
            of the document.
            <c/>
            null if it's no PDF/A document
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfButtonFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateText(iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Creates an empty
            <see cref="T:iText.Forms.Fields.PdfTextFormField">text form field</see>.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the text field in
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfTextFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateText(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Pdf.PdfAConformanceLevel)">
            <summary>
            Creates an empty
            <see cref="T:iText.Forms.Fields.PdfTextFormField">text form field</see>.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the text field in
            </param>
            <param name="pdfAConformanceLevel">
            the desired
            <see cref="T:iText.Kernel.Pdf.PdfAConformanceLevel"/>
            of the field. Must match the conformance
            level of the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            this field will eventually be added into
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfTextFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateText(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle)">
            <summary>
            Creates an empty
            <see cref="T:iText.Forms.Fields.PdfTextFormField">text form field</see>.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the text field in
            </param>
            <param name="rect">the location on the page for the text field</param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfTextFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateText(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String)">
            <summary>
            Creates a named
            <see cref="T:iText.Forms.Fields.PdfTextFormField">text form field</see>
            with an initial
            value, and the form's default font specified in
            <see cref="M:iText.Forms.PdfAcroForm.GetDefaultResources"/>.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the text field in
            </param>
            <param name="rect">the location on the page for the text field</param>
            <param name="name">the name of the form field</param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfTextFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateText(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String)">
            <summary>
            Creates a named
            <see cref="T:iText.Forms.Fields.PdfTextFormField">text form field</see>
            with an initial
            value, and the form's default font specified in
            <see cref="M:iText.Forms.PdfAcroForm.GetDefaultResources"/>.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the text field in
            </param>
            <param name="rect">the location on the page for the text field</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfTextFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateText(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,iText.Kernel.Font.PdfFont,System.Single)">
            <summary>
            Creates a named
            <see cref="T:iText.Forms.Fields.PdfTextFormField">text form field</see>
            with an initial
            value, with a specified font and font size.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the text field in
            </param>
            <param name="rect">the location on the page for the text field</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <param name="font">
            a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            </param>
            <param name="fontSize">the size of the font</param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfTextFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateText(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,iText.Kernel.Font.PdfFont,System.Single,System.Boolean)">
            <summary>
            Creates a named
            <see cref="T:iText.Forms.Fields.PdfTextFormField">text form field</see>
            with an initial
            value, with a specified font and font size.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the text field in
            </param>
            <param name="rect">the location on the page for the text field</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <param name="font">
            a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            </param>
            <param name="fontSize">the size of the font</param>
            <param name="multiline">true for multiline text field</param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfTextFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateText(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,iText.Kernel.Font.PdfFont,System.Single,System.Boolean,iText.Kernel.Pdf.PdfAConformanceLevel)">
            <summary>
            Creates a named
            <see cref="T:iText.Forms.Fields.PdfTextFormField">text form field</see>
            with an initial
            value, with a specified font and font size.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the text field in
            </param>
            <param name="rect">the location on the page for the text field</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <param name="font">
            a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            </param>
            <param name="fontSize">the size of the font</param>
            <param name="multiline">true for multiline text field</param>
            <param name="pdfAConformanceLevel">
            the
            <see cref="T:iText.Kernel.Pdf.PdfAConformanceLevel"/>
            of the document.
            <c/>
            null if it's no PDF/A document
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfTextFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateMultilineText(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,iText.Kernel.Font.PdfFont,System.Single)">
            <summary>
            Creates a named
            <see cref="T:iText.Forms.Fields.PdfTextFormField">multilined text form field</see>
            with an initial
            value, with a specified font and font size.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the text field in
            </param>
            <param name="rect">the location on the page for the text field</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <param name="font">
            a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            </param>
            <param name="fontSize">the size of the font</param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfTextFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateMultilineText(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String)">
            <summary>
            Creates a named
            <see cref="T:iText.Forms.Fields.PdfTextFormField">multiline text form field</see>
            with an initial
            value, and the form's default font specified in
            <see cref="M:iText.Forms.PdfAcroForm.GetDefaultResources"/>.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the text field in
            </param>
            <param name="rect">the location on the page for the text field</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfTextFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateChoice(iText.Kernel.Pdf.PdfDocument,System.Int32)">
            <summary>
            Creates an empty
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField">choice form field</see>.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the choice field in
            </param>
            <param name="flags">
            an <c>int</c>, containing a set of binary behavioral
            flags. Do binary <c>OR</c> on this <c>int</c> to set the
            flags you require.
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateChoice(iText.Kernel.Pdf.PdfDocument,System.Int32,iText.Kernel.Pdf.PdfAConformanceLevel)">
            <summary>
            Creates an empty
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField">choice form field</see>.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the choice field in
            </param>
            <param name="flags">
            an <c>int</c>, containing a set of binary behavioral
            flags. Do binary <c>OR</c> on this <c>int</c> to set the
            flags you require.
            </param>
            <param name="pdfAConformanceLevel">
            the
            <see cref="T:iText.Kernel.Pdf.PdfAConformanceLevel"/>
            of the document.
            <c/>
            null if it's no PDF/A document
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateChoice(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.Int32)">
            <summary>
            Creates an empty
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField">choice form field</see>
            with custom
            behavior and layout, on a specified location.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the choice field in
            </param>
            <param name="rect">the location on the page for the choice field</param>
            <param name="flags">
            an <c>int</c>, containing a set of binary behavioral
            flags. Do binary <c>OR</c> on this <c>int</c> to set the
            flags you require.
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateChoice(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,iText.Kernel.Pdf.PdfArray,System.Int32)">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField">choice form field</see>
            with custom
            behavior and layout, on a specified location.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the choice field in
            </param>
            <param name="rect">the location on the page for the choice field</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <param name="options">
            an array of
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            objects that each represent
            the 'on' state of one of the choices.
            </param>
            <param name="flags">
            an <c>int</c>, containing a set of binary behavioral
            flags. Do binary <c>OR</c> on this <c>int</c> to set the
            flags you require.
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateChoice(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,iText.Kernel.Pdf.PdfArray,System.Int32,iText.Kernel.Font.PdfFont,iText.Kernel.Pdf.PdfAConformanceLevel)">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField">choice form field</see>
            with custom
            behavior and layout, on a specified location.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the choice field in
            </param>
            <param name="rect">the location on the page for the choice field</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <param name="options">
            an array of
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            objects that each represent
            the 'on' state of one of the choices.
            </param>
            <param name="flags">
            an <c>int</c>, containing a set of binary behavioral
            flags. Do binary <c>OR</c> on this <c>int</c> to set the
            flags you require.
            </param>
            <param name="font">the desired font to be used when displaying the text</param>
            <param name="pdfAConformanceLevel">
            the
            <see cref="T:iText.Kernel.Pdf.PdfAConformanceLevel"/>
            of the document.
            <c/>
            null if it's no PDF/A document
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateChoice(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,iText.Kernel.Font.PdfFont,System.Single,iText.Kernel.Pdf.PdfArray,System.Int32)">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField">choice form field</see>
            with custom
            behavior and layout, on a specified location.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the choice field in
            </param>
            <param name="rect">the location on the page for the choice field</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <param name="font">
            a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            </param>
            <param name="fontSize">the size of the font</param>
            <param name="options">
            an array of
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            objects that each represent
            the 'on' state of one of the choices.
            </param>
            <param name="flags">
            an <c>int</c>, containing a set of binary behavioral
            flags. Do binary <c>OR</c> on this <c>int</c> to set the
            flags you require.
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateChoice(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,iText.Kernel.Font.PdfFont,System.Single,iText.Kernel.Pdf.PdfArray,System.Int32,iText.Kernel.Pdf.PdfAConformanceLevel)">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField">choice form field</see>
            with custom
            behavior and layout, on a specified location.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the choice field in
            </param>
            <param name="rect">the location on the page for the choice field</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <param name="font">
            a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            </param>
            <param name="fontSize">the size of the font</param>
            <param name="options">
            an array of
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            objects that each represent
            the 'on' state of one of the choices.
            </param>
            <param name="flags">
            an <c>int</c>, containing a set of binary behavioral
            flags. Do binary <c>OR</c> on this <c>int</c> to set the
            flags you require.
            </param>
            <param name="pdfAConformanceLevel">
            the
            <see cref="T:iText.Kernel.Pdf.PdfAConformanceLevel"/>
            of the document.
            <c/>
            null if it's no PDF/A document
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateSignature(iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Creates an empty
            <see cref="T:iText.Forms.Fields.PdfSignatureFormField">signature form field</see>.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the signature field in
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfSignatureFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateSignature(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Pdf.PdfAConformanceLevel)">
            <summary>
            Creates an empty
            <see cref="T:iText.Forms.Fields.PdfSignatureFormField">signature form field</see>.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the signature field in
            </param>
            <param name="pdfAConformanceLevel">
            the
            <see cref="T:iText.Kernel.Pdf.PdfAConformanceLevel"/>
            of the document.
            <c/>
            null if it's no PDF/A document
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfSignatureFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateSignature(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle)">
            <summary>
            Creates an empty
            <see cref="T:iText.Forms.Fields.PdfSignatureFormField">signature form field</see>.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the signature field in
            </param>
            <param name="rect">the location on the page for the signature field</param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfSignatureFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateSignature(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,iText.Kernel.Pdf.PdfAConformanceLevel)">
            <summary>
            Creates an empty
            <see cref="T:iText.Forms.Fields.PdfSignatureFormField">signature form field</see>.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the signature field in
            </param>
            <param name="rect">the location on the page for the signature field</param>
            <param name="pdfAConformanceLevel">
            the
            <see cref="T:iText.Kernel.Pdf.PdfAConformanceLevel"/>
            of the document.
            <c/>
            null if it's no PDF/A document
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfSignatureFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateRadioGroup(iText.Kernel.Pdf.PdfDocument,System.String,System.String)">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfButtonFormField">radio group form field</see>.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the radio group in
            </param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfButtonFormField">radio group</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateRadioGroup(iText.Kernel.Pdf.PdfDocument,System.String,System.String,iText.Kernel.Pdf.PdfAConformanceLevel)">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfButtonFormField">radio group form field</see>.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the radio group in
            </param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <param name="pdfAConformanceLevel">
            the
            <see cref="T:iText.Kernel.Pdf.PdfAConformanceLevel"/>
            of the document.
            <c/>
            null if it's no PDF/A document
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfButtonFormField">radio group</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateRadioButton(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,iText.Forms.Fields.PdfButtonFormField,System.String)">
            <summary>
            Creates a generic
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            that is added to a radio group.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the radio group in
            </param>
            <param name="rect">the location on the page for the field</param>
            <param name="radioGroup">the radio button group that this field should belong to</param>
            <param name="value">the initial value</param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            </returns>
            <seealso cref="M:iText.Forms.Fields.PdfFormField.CreateRadioGroup(iText.Kernel.Pdf.PdfDocument,System.String,System.String)"/>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateRadioButton(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,iText.Forms.Fields.PdfButtonFormField,System.String,iText.Kernel.Pdf.PdfAConformanceLevel)">
            <summary>
            Creates a generic
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            that is added to a radio group.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the radio group in
            </param>
            <param name="rect">the location on the page for the field</param>
            <param name="radioGroup">the radio button group that this field should belong to</param>
            <param name="value">the initial value</param>
            <param name="pdfAConformanceLevel">
            the
            <see cref="T:iText.Kernel.Pdf.PdfAConformanceLevel"/>
            of the document.
            <c/>
            null if it's no PDF/A document
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            </returns>
            <seealso cref="M:iText.Forms.Fields.PdfFormField.CreateRadioGroup(iText.Kernel.Pdf.PdfDocument,System.String,System.String)"/>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreatePushButton(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String)">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfButtonFormField"/>
            as a push button without data.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the radio group in
            </param>
            <param name="rect">the location on the page for the field</param>
            <param name="name">the name of the form field</param>
            <param name="caption">the text to display on the button</param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfButtonFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreatePushButton(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,iText.Kernel.Font.PdfFont,System.Single)">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfButtonFormField"/>
            as a push button without data, with
            its caption in a custom font.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the radio group in
            </param>
            <param name="rect">the location on the page for the field</param>
            <param name="name">the name of the form field</param>
            <param name="caption">the text to display on the button</param>
            <param name="font">
            a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            </param>
            <param name="fontSize">the size of the font</param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfButtonFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreatePushButton(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,iText.Kernel.Font.PdfFont,System.Single,iText.Kernel.Pdf.PdfAConformanceLevel)">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfButtonFormField"/>
            as a push button without data, with
            its caption in a custom font.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the radio group in
            </param>
            <param name="rect">the location on the page for the field</param>
            <param name="name">the name of the form field</param>
            <param name="caption">the text to display on the button</param>
            <param name="font">
            a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            </param>
            <param name="fontSize">the size of the font</param>
            <param name="pdfAConformanceLevel">
            the
            <see cref="T:iText.Kernel.Pdf.PdfAConformanceLevel"/>
            of the document.
            <c/>
            null if it's no PDF/A document
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfButtonFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateCheckBox(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String)">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfButtonFormField"/>
            as a checkbox.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the radio group in
            </param>
            <param name="rect">the location on the page for the field</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfButtonFormField">checkbox</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateCheckBox(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,System.Int32)">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfButtonFormField"/>
            as a checkbox.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the radio group in
            </param>
            <param name="rect">the location on the page for the field</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <param name="checkType">the type of checkbox graphic to use.</param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfButtonFormField">checkbox</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateCheckBox(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,System.Int32,iText.Kernel.Pdf.PdfAConformanceLevel)">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfButtonFormField"/>
            as a checkbox.
            </summary>
            <remarks>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfButtonFormField"/>
            as a checkbox. Check symbol will fit rectangle.
            You may set font and font size after creation.
            </remarks>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the radio group in
            </param>
            <param name="rect">the location on the page for the field</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <param name="checkType">the type of checkbox graphic to use.</param>
            <param name="pdfAConformanceLevel">
            the
            <see cref="T:iText.Kernel.Pdf.PdfAConformanceLevel"/>
            of the document.
            <c/>
            null if it's no PDF/A document
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfButtonFormField">checkbox</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateComboBox(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,System.String[][])">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField">combobox</see>
            with custom
            behavior and layout, on a specified location.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the combobox in
            </param>
            <param name="rect">the location on the page for the combobox</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <param name="options">
            a two-dimensional array of Strings which will be converted
            to a PdfArray.
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            as a combobox
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateComboBox(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,System.String[][],iText.Kernel.Font.PdfFont,iText.Kernel.Pdf.PdfAConformanceLevel)">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField">combobox</see>
            with custom
            behavior and layout, on a specified location.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the combobox in
            </param>
            <param name="rect">the location on the page for the combobox</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <param name="options">
            a two-dimensional array of Strings which will be converted
            to a PdfArray.
            </param>
            <param name="font">the desired font to be used when displaying the text</param>
            <param name="pdfAConformanceLevel">
            the
            <see cref="T:iText.Kernel.Pdf.PdfAConformanceLevel"/>
            of the document.
            <c/>
            null if it's no PDF/A document
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            as a combobox
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateComboBox(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,System.String[])">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField">combobox</see>
            with custom
            behavior and layout, on a specified location.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the combobox in
            </param>
            <param name="rect">the location on the page for the combobox</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <param name="options">an array of Strings which will be converted to a PdfArray.</param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            as a combobox
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateComboBox(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,System.String[],iText.Kernel.Font.PdfFont,iText.Kernel.Pdf.PdfAConformanceLevel)">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField">combobox</see>
            with custom
            behavior and layout, on a specified location.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the combobox in
            </param>
            <param name="rect">the location on the page for the combobox</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <param name="options">an array of Strings which will be converted to a PdfArray.</param>
            <param name="font">the desired font to be used when displaying the text</param>
            <param name="pdfAConformanceLevel">
            the
            <see cref="T:iText.Kernel.Pdf.PdfAConformanceLevel"/>
            of the document.
            <c/>
            null if it's no PDF/A document
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            as a combobox
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateList(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,System.String[][])">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField">list field</see>
            with custom
            behavior and layout, on a specified location.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the choice field in
            </param>
            <param name="rect">the location on the page for the choice field</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <param name="options">
            a two-dimensional array of Strings which will be converted
            to a PdfArray.
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            as a list field
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateList(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,System.String[][],iText.Kernel.Font.PdfFont,iText.Kernel.Pdf.PdfAConformanceLevel)">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField">list field</see>
            with custom
            behavior and layout, on a specified location.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the choice field in
            </param>
            <param name="rect">the location on the page for the choice field</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <param name="options">
            a two-dimensional array of Strings which will be converted
            to a PdfArray.
            </param>
            <param name="font">the desired font to be used when displaying the text</param>
            <param name="pdfAConformanceLevel">
            the
            <see cref="T:iText.Kernel.Pdf.PdfAConformanceLevel"/>
            of the document.
            <c/>
            null if it's no PDF/A document
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            as a list field
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateList(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,System.String[])">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField">list field</see>
            with custom
            behavior and layout, on a specified location.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the list field in
            </param>
            <param name="rect">the location on the page for the list field</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <param name="options">an array of Strings which will be converted to a PdfArray.</param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            as a list field
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CreateList(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.String,System.String,System.String[],iText.Kernel.Font.PdfFont,iText.Kernel.Pdf.PdfAConformanceLevel)">
            <summary>
            Creates a
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField">list field</see>
            with custom
            behavior and layout, on a specified location.
            </summary>
            <param name="doc">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the list field in
            </param>
            <param name="rect">the location on the page for the list field</param>
            <param name="name">the name of the form field</param>
            <param name="value">the initial value</param>
            <param name="options">an array of Strings which will be converted to a PdfArray.</param>
            <param name="font">the desired font to be used when displaying the text</param>
            <param name="pdfAConformanceLevel">
            the
            <see cref="T:iText.Kernel.Pdf.PdfAConformanceLevel"/>
            of the document.
            <c/>
            null if it's no PDF/A document
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfChoiceFormField"/>
            as a list field
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.MakeFormField(iText.Kernel.Pdf.PdfObject,iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Creates a (subtype of)
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            object.
            </summary>
            <remarks>
            Creates a (subtype of)
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            object. The type of the object
            depends on the <c>FT</c> entry in the <c>pdfObject</c> parameter.
            </remarks>
            <param name="pdfObject">
            assumed to be either a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            , or a
            <see cref="T:iText.Kernel.Pdf.PdfIndirectReference"/>
            to a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            </param>
            <param name="document">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to create the field in
            </param>
            <returns>
            a new
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            , or <c>null</c> if
            <c>pdfObject</c> does not contain a <c>FT</c> entry
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetFormType">
            <summary>
            Returns the type of the parent form field, or of the wrapped
            &lt;PdfDictionary&gt; object.
            </summary>
            <returns>
            the form type, as a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetValue(System.String)">
            <summary>Sets a value to the field and generating field appearance if needed.</summary>
            <param name="value">of the field</param>
            <returns>the field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetValue(System.String,System.Boolean)">
            <summary>Sets a value to the field and generates field appearance if needed.</summary>
            <param name="value">of the field</param>
            <param name="generateAppearance">if false, appearance won't be regenerated</param>
            <returns>the field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetValue(System.String,iText.Kernel.Font.PdfFont,System.Single)">
            <summary>Set text field value with given font and size</summary>
            <param name="value">text value</param>
            <param name="font">
            a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            </param>
            <param name="fontSize">the size of the font</param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetValue(System.String,System.String)">
            <summary>Sets the field value and the display string.</summary>
            <remarks>
            Sets the field value and the display string. The display string
            is used to build the appearance.
            </remarks>
            <param name="value">the field value</param>
            <param name="display">
            the string that is used for the appearance. If <c>null</c>
            the <c>value</c> parameter will be used
            </param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetParent(iText.Forms.Fields.PdfFormField)">
            <summary>
            Sets a parent
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            for the current object.
            </summary>
            <param name="parent">another form field that this field belongs to, usually a group field</param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetParent">
            <summary>Gets the parent dictionary.</summary>
            <returns>another form field that this field belongs to, usually a group field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetKids">
            <summary>Gets the kids of this object.</summary>
            <returns>
            contents of the dictionary's <c>Kids</c> property, as a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.AddKid(iText.Forms.Fields.PdfFormField)">
            <summary>
            Adds a new kid to the <c>Kids</c> array property from a
            <see cref="T:iText.Forms.Fields.PdfFormField"/>.
            </summary>
            <remarks>
            Adds a new kid to the <c>Kids</c> array property from a
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            . Also sets the kid's <c>Parent</c> property to this object.
            </remarks>
            <param name="kid">
            a new
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            entry for the field's <c>Kids</c> array property
            </param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.AddKid(iText.Kernel.Pdf.Annot.PdfWidgetAnnotation)">
            <summary>
            Adds a new kid to the <c>Kids</c> array property from a
            <see cref="T:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation"/>.
            </summary>
            <remarks>
            Adds a new kid to the <c>Kids</c> array property from a
            <see cref="T:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation"/>
            . Also sets the kid's <c>Parent</c> property to this object.
            </remarks>
            <param name="kid">
            a new
            <see cref="T:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation"/>
            entry for the field's <c>Kids</c> array property
            </param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetFieldName(System.String)">
            <summary>Changes the name of the field to the specified value.</summary>
            <param name="name">the new field name, as a String</param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetFieldName">
            <summary>Gets the current field name.</summary>
            <returns>
            the current field name, as a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetAlternativeName(System.String)">
            <summary>Changes the alternate name of the field to the specified value.</summary>
            <remarks>
            Changes the alternate name of the field to the specified value. The
            alternate is a descriptive name to be used by status messages etc.
            </remarks>
            <param name="name">the new alternate name, as a String</param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetAlternativeName">
            <summary>Gets the current alternate name.</summary>
            <remarks>
            Gets the current alternate name. The alternate is a descriptive name to
            be used by status messages etc.
            </remarks>
            <returns>
            the current alternate name, as a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetMappingName(System.String)">
            <summary>Changes the mapping name of the field to the specified value.</summary>
            <remarks>
            Changes the mapping name of the field to the specified value. The
            mapping name can be used when exporting the form data in the document.
            </remarks>
            <param name="name">the new alternate name, as a String</param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetMappingName">
            <summary>Gets the current mapping name.</summary>
            <remarks>
            Gets the current mapping name. The mapping name can be used when
            exporting the form data in the document.
            </remarks>
            <returns>
            the current mapping name, as a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetFieldFlag(System.Int32)">
            <summary>
            Checks whether a certain flag, or any of a combination of flags, is set
            for this form field.
            </summary>
            <param name="flag">an <c>int</c> interpreted as a series of a binary flags</param>
            <returns>
            true if any of the flags specified in the parameter is also set
            in the form field.
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetFieldFlag(System.Int32)">
            <summary>Adds a flag, or combination of flags, for the form field.</summary>
            <remarks>
            Adds a flag, or combination of flags, for the form field. This method is
            intended to be used one flag at a time, but this is not technically
            enforced. To <em>replace</em> the current value, use
            <see cref="M:iText.Forms.Fields.PdfFormField.SetFieldFlags(System.Int32)"/>.
            </remarks>
            <param name="flag">an <c>int</c> interpreted as a series of a binary flags</param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetFieldFlag(System.Int32,System.Boolean)">
            <summary>Adds or removes a flag, or combination of flags, for the form field.</summary>
            <remarks>
            Adds or removes a flag, or combination of flags, for the form field. This
            method is intended to be used one flag at a time, but this is not
            technically enforced. To <em>replace</em> the current value, use
            <see cref="M:iText.Forms.Fields.PdfFormField.SetFieldFlags(System.Int32)"/>.
            </remarks>
            <param name="flag">an <c>int</c> interpreted as a series of a binary flags</param>
            <param name="value">
            if <c>true</c>, adds the flag(s). if <c>false</c>,
            removes the flag(s).
            </param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.IsMultiline">
            <summary>If true, the field can contain multiple lines of text; if false, the field's text is restricted to a single line.
                </summary>
            <returns>whether the field can span over multiple lines.</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.IsPassword">
            <summary>If true, the field is intended for entering a secure password that should not be echoed visibly to the screen.
                </summary>
            <remarks>
            If true, the field is intended for entering a secure password that should not be echoed visibly to the screen.
            Characters typed from the keyboard should instead be echoed in some unreadable form, such as asterisks or bullet characters.
            </remarks>
            <returns>whether or not the contents of the field must be obfuscated</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetFieldFlags(System.Int32)">
            <summary>Sets a flag, or combination of flags, for the form field.</summary>
            <remarks>
            Sets a flag, or combination of flags, for the form field. This method
            <em>replaces</em> the previous value. Compare with
            <see cref="M:iText.Forms.Fields.PdfFormField.SetFieldFlag(System.Int32)"/>
            which <em>adds</em> a flag to the existing flags.
            </remarks>
            <param name="flags">an <c>int</c> interpreted as a series of a binary flags</param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetFieldFlags">
            <summary>Gets the current list of PDF form field flags.</summary>
            <returns>the current list of flags, encoded as an <c>int</c></returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetValue">
            <summary>Gets the current value contained in the form field.</summary>
            <returns>
            the current value, as a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetValueAsString">
            <summary>Gets the current value contained in the form field.</summary>
            <returns>
            the current value, as a
            <see cref="T:System.String"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetDefaultValue(iText.Kernel.Pdf.PdfObject)">
            <summary>Sets the default fallback value for the form field.</summary>
            <param name="value">the default value</param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetDefaultValue">
            <summary>Gets the default fallback value for the form field.</summary>
            <returns>the default value</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetAdditionalAction(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.Action.PdfAction)">
            <summary>Sets an additional action for the form field.</summary>
            <param name="key">the dictionary key to use for storing the action</param>
            <param name="action">the action</param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetAdditionalAction">
            <summary>Gets the currently additional action dictionary for the form field.</summary>
            <returns>the additional action dictionary</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetOptions(iText.Kernel.Pdf.PdfArray)">
            <summary>Sets options for the form field.</summary>
            <remarks>Sets options for the form field. Only to be used for checkboxes and radio buttons.</remarks>
            <param name="options">
            an array of
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            objects that each represent
            the 'on' state of one of the choices.
            </param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetOptions">
            <summary>Gets options for the form field.</summary>
            <remarks>
            Gets options for the form field. Should only return usable values for
            checkboxes and radio buttons.
            </remarks>
            <returns>
            the options, as an
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            objects
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetWidgets">
            <summary>
            Gets all
            <see cref="T:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation"/>
            that this form field and its
            <see cref="M:iText.Forms.Fields.PdfFormField.GetKids">kids</see>
            refer to.
            </summary>
            <returns>
            a list of
            <see cref="T:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetDefaultAppearance">
            <summary>
            Gets default appearance string containing a sequence of valid page-content graphics or text state operators that
            define such properties as the field's text size and color.
            </summary>
            <returns>
            the default appearance graphics, as a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.UpdateDefaultAppearance">
            <summary>Updates DA for Variable text, Push button and choice form fields.</summary>
            <remarks>
            Updates DA for Variable text, Push button and choice form fields.
            The resources required for DA will be put to AcroForm's DR.
            Note, for other form field types DA will be removed.
            </remarks>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetJustification">
            <summary>
            Gets a code specifying the form of quadding (justification) to be used in displaying the text:
            0 Left-justified
            1 Centered
            2 Right-justified
            </summary>
            <returns>the current justification attribute</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetJustification(System.Int32)">
            <summary>
            Sets a code specifying the form of quadding (justification) to be used in displaying the text:
            0 Left-justified
            1 Centered
            2 Right-justified
            </summary>
            <param name="justification">the value to set the justification attribute to</param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetDefaultStyle">
            <summary>Gets a default style string, as described in "Rich Text Strings" section of Pdf spec.</summary>
            <returns>
            the default style, as a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetDefaultStyle(iText.Kernel.Pdf.PdfString)">
            <summary>Sets a default style string, as described in "Rich Text Strings" section of Pdf spec.</summary>
            <param name="defaultStyleString">a new default style for the form field</param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetRichText">
            <summary>Gets a rich text string, as described in "Rich Text Strings" section of Pdf spec.</summary>
            <remarks>
            Gets a rich text string, as described in "Rich Text Strings" section of Pdf spec.
            May be either
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            or
            <see cref="T:iText.Kernel.Pdf.PdfString"/>.
            </remarks>
            <returns>the current rich text value</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetRichText(iText.Kernel.Pdf.PdfObject)">
            <summary>Sets a rich text string, as described in "Rich Text Strings" section of Pdf spec.</summary>
            <remarks>
            Sets a rich text string, as described in "Rich Text Strings" section of Pdf spec.
            May be either
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            or
            <see cref="T:iText.Kernel.Pdf.PdfString"/>.
            </remarks>
            <param name="richText">a new rich text value</param>
            <returns>The edited PdfFormField</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetFontSize">
            <summary>Gets the current fontSize of the form field.</summary>
            <returns>the current fontSize</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetFont">
            <summary>Gets the current font of the form field.</summary>
            <returns>
            the current
            <see cref="T:iText.Kernel.Font.PdfFont">font</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetColor">
            <summary>Gets the current color of the form field.</summary>
            <returns>
            the current
            <see cref="T:iText.Kernel.Colors.Color">color</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetFont(iText.Kernel.Font.PdfFont)">
            <summary>Basic setter for the <c>font</c> property.</summary>
            <remarks>
            Basic setter for the <c>font</c> property. Regenerates the field
            appearance after setting the new value.
            Note that the font will be added to the document so ensure that the font is embedded
            if it's a pdf/a document.
            </remarks>
            <param name="font">The new font to be set</param>
            <returns>The edited PdfFormField</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetFontSize(System.Single)">
            <summary>Basic setter for the <c>fontSize</c> property.</summary>
            <remarks>
            Basic setter for the <c>fontSize</c> property. Regenerates the
            field appearance after setting the new value.
            </remarks>
            <param name="fontSize">The new font size to be set</param>
            <returns>The edited PdfFormField</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetFontSize(System.Int32)">
            <summary>Basic setter for the <c>fontSize</c> property.</summary>
            <remarks>
            Basic setter for the <c>fontSize</c> property. Regenerates the
            field appearance after setting the new value.
            </remarks>
            <param name="fontSize">The new font size to be set</param>
            <returns>The edited PdfFormField</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetFontAndSize(iText.Kernel.Font.PdfFont,System.Single)">
            <summary>
            Combined setter for the <c>font</c> and <c>fontSize</c>
            properties.
            </summary>
            <remarks>
            Combined setter for the <c>font</c> and <c>fontSize</c>
            properties. Regenerates the field appearance after setting the new value.
            </remarks>
            <param name="font">The new font to be set</param>
            <param name="fontSize">The new font size to be set</param>
            <returns>The edited PdfFormField</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetBackgroundColor(iText.Kernel.Colors.Color)">
            <summary>Basic setter for the <c>backgroundColor</c> property.</summary>
            <remarks>
            Basic setter for the <c>backgroundColor</c> property. Regenerates
            the field appearance after setting the new value.
            </remarks>
            <param name="backgroundColor">
            The new color to be set or
            <see langword="null"/>
            if no background needed
            </param>
            <returns>The edited PdfFormField</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetRotation(System.Int32)">
            <summary>Basic setter for the <c>degRotation</c> property.</summary>
            <remarks>
            Basic setter for the <c>degRotation</c> property. Regenerates
            the field appearance after setting the new value.
            </remarks>
            <param name="degRotation">The new degRotation to be set</param>
            <returns>The edited PdfFormField</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetAction(iText.Kernel.Pdf.Action.PdfAction)">
            <summary>
            Sets the action on all
            <see cref="T:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation">widgets</see>
            of this form field.
            </summary>
            <param name="action">The action</param>
            <returns>The edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetCheckType(System.Int32)">
            <summary>Changes the type of graphical marker used to mark a checkbox as 'on'.</summary>
            <remarks>
            Changes the type of graphical marker used to mark a checkbox as 'on'.
            Notice that in order to complete the change one should call
            <see cref="M:iText.Forms.Fields.PdfFormField.RegenerateField">regenerateField</see>
            method
            </remarks>
            <param name="checkType">the new checkbox marker</param>
            <returns>The edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetVisibility(System.Int32)">
            <summary>
            Set the visibility flags of the form field annotation
            Options are: HIDDEN, HIDDEN_BUT_PRINTABLE, VISIBLE, VISIBLE_BUT_DOES_NOT_PRINT
            </summary>
            <param name="visibility">visibility option</param>
            <returns>The edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.RegenerateField">
            <summary>This method regenerates appearance stream of the field.</summary>
            <remarks>
            This method regenerates appearance stream of the field. Use it if you
            changed any field parameters and didn't use setValue method which
            generates appearance by itself.
            </remarks>
            <returns>whether or not the regeneration was successful.</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetBorderWidth">
            <summary>Gets the border width for the field.</summary>
            <returns>the current border width.</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetBorderWidth(System.Single)">
            <summary>Sets the border width for the field.</summary>
            <param name="borderWidth">The new border width.</param>
            <returns>The edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetBorderStyle(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Sets the border style for the field.</summary>
            <param name="style">the new border style.</param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetBorderColor(iText.Kernel.Colors.Color)">
            <summary>Sets the Border Color.</summary>
            <param name="color">the new value for the Border Color</param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetColor(iText.Kernel.Colors.Color)">
            <summary>Sets the text color.</summary>
            <param name="color">the new value for the Color</param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetReadOnly(System.Boolean)">
            <summary>Sets the ReadOnly flag, specifying whether or not the field can be changed.</summary>
            <param name="readOnly">if <c>true</c>, then the field cannot be changed.</param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.IsReadOnly">
            <summary>Gets the ReadOnly flag, specifying whether or not the field can be changed.</summary>
            <returns><c>true</c> if the field cannot be changed.</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetRequired(System.Boolean)">
            <summary>Sets the Required flag, specifying whether or not the field must be filled in.</summary>
            <param name="required">if <c>true</c>, then the field must be filled in.</param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.IsRequired">
            <summary>Gets the Required flag, specifying whether or not the field must be filled in.</summary>
            <returns><c>true</c> if the field must be filled in.</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetNoExport(System.Boolean)">
            <summary>Sets the NoExport flag, specifying whether or not exporting is forbidden.</summary>
            <param name="noExport">if <c>true</c>, then exporting is <em>forbidden</em></param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.IsNoExport">
            <summary>Gets the NoExport attribute.</summary>
            <returns>whether exporting the value following a form action is forbidden.</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetPage(System.Int32)">
            <summary>Specifies on which page the form field's widget must be shown.</summary>
            <param name="pageNum">the page number</param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetAppearanceStates">
            <summary>Gets the appearance state names.</summary>
            <returns>an array of Strings containing the names of the appearance states</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetAppearance(iText.Kernel.Pdf.PdfName,System.String,iText.Kernel.Pdf.PdfStream)">
            <summary>Sets an appearance for (the widgets related to) the form field.</summary>
            <param name="appearanceType">
            the type of appearance stream to be added
            <list type="bullet">
            <item><description> PdfName.N: normal appearance
            </description></item>
            <item><description> PdfName.R: rollover appearance
            </description></item>
            <item><description> PdfName.D: down appearance
            </description></item>
            </list>
            </param>
            <param name="appearanceState">
            the state of the form field that needs to be true
            for the appearance to be used. Differentiates between several streams
            of the same type.
            </param>
            <param name="appearanceStream">
            the appearance instructions, as a
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            </param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.SetFontSizeAutoScale">
            <summary>Sets zero font size which will be interpreted as auto-size according to ISO 32000-1, 12.7.3.3.</summary>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.Put(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfObject)">
            <summary>
            Inserts the value into the
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            of this field and associates it with the specified key.
            </summary>
            <remarks>
            Inserts the value into the
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            of this field and associates it with the specified key.
            If the key is already present in this field dictionary,
            this method will override the old value with the specified one.
            </remarks>
            <param name="key">key to insert or to override</param>
            <param name="value">the value to associate with the specified key</param>
            <returns>
            this
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.Remove(iText.Kernel.Pdf.PdfName)">
            <summary>
            Removes the specified key from the
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            of this field.
            </summary>
            <param name="key">key to be removed</param>
            <returns>
            this
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.Release">
            <summary>Releases underlying pdf object and other pdf entities used by wrapper.</summary>
            <remarks>
            Releases underlying pdf object and other pdf entities used by wrapper.
            This method should be called instead of direct call to
            <see cref="M:iText.Kernel.Pdf.PdfObject.Release"/>
            if the wrapper is used.
            </remarks>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetDocument">
            <summary>
            Gets the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            that owns that form field.
            </summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            that owns that form field.
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.GetRect(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Gets a
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            that matches the current size and position of this form field.
            </summary>
            <param name="field">current form field.</param>
            <returns>
            a
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            that matches the current size and position of this form field.
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.ProcessOptions(System.String[][])">
            <summary>
            Convert
            <see cref="T:System.String"/>
            multidimensional array of combo box or list options to
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>.
            </summary>
            <param name="options">Two-dimensional array of options.</param>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            that contains all the options.
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.ProcessOptions(System.String[])">
            <summary>
            Convert
            <see cref="T:System.String"/>
            array of combo box or list options to
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>.
            </summary>
            <param name="options">array of options.</param>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            that contains all the options.
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.DrawTextAppearance(iText.Kernel.Geom.Rectangle,iText.Kernel.Font.PdfFont,System.Single,System.String,iText.Kernel.Pdf.Xobject.PdfFormXObject)">
            <summary>Draws the visual appearance of text in a form field.</summary>
            <param name="rect">The location on the page for the list field</param>
            <param name="font">
            a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            </param>
            <param name="fontSize">The size of the font</param>
            <param name="value">The initial value</param>
            <param name="appearance">The appearance</param>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.DrawChoiceAppearance(iText.Kernel.Geom.Rectangle,System.Single,System.String,iText.Kernel.Pdf.Xobject.PdfFormXObject,System.Int32)">
            <summary>Draws the visual appearance of Choice box in a form field.</summary>
            <param name="rect">The location on the page for the list field</param>
            <param name="value">The initial value</param>
            <param name="appearance">The appearance</param>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.DrawBorder(iText.Kernel.Pdf.Canvas.PdfCanvas,iText.Kernel.Pdf.Xobject.PdfFormXObject,System.Single,System.Single)">
            <summary>Draws a border using the borderWidth and borderColor of the form field.</summary>
            <param name="canvas">
            The
            <see cref="T:iText.Kernel.Pdf.Canvas.PdfCanvas"/>
            on which to draw
            </param>
            <param name="xObject">The PdfFormXObject</param>
            <param name="width">The width of the rectangle to draw</param>
            <param name="height">The height of the rectangle to draw</param>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.DrawRadioAppearance(System.Single,System.Single,System.String)">
            <summary>Draws the appearance of a radio button with a specified value.</summary>
            <param name="width">the width of the radio button to draw</param>
            <param name="height">the height of the radio button to draw</param>
            <param name="value">the value of the button</param>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.DrawRadioField(iText.Kernel.Pdf.Canvas.PdfCanvas,System.Single,System.Single,System.Boolean)">
            <summary>Draws a radio button.</summary>
            <param name="canvas">
            the
            <see cref="T:iText.Kernel.Pdf.Canvas.PdfCanvas"/>
            on which to draw
            </param>
            <param name="width">the width of the radio button to draw</param>
            <param name="height">the height of the radio button to draw</param>
            <param name="on">required to be <c>true</c> for fulfilling the drawing operation</param>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.DrawCheckAppearance(System.Single,System.Single,System.String)">
            <summary>Draws the appearance of a checkbox with a specified state value.</summary>
            <param name="width">the width of the checkbox to draw</param>
            <param name="height">the height of the checkbox to draw</param>
            <param name="onStateName">the state of the form field that will be drawn</param>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.DrawPdfA2CheckAppearance(System.Single,System.Single,System.String,System.Int32)">
            <summary>Draws PDF/A-2 compliant check appearance.</summary>
            <remarks>
            Draws PDF/A-2 compliant check appearance.
            Actually it's just PdfA check appearance. According to corrigendum there is no difference between them
            </remarks>
            <param name="width">width of the checkbox</param>
            <param name="height">height of the checkbox</param>
            <param name="onStateName">name that corresponds to the "On" state of the checkbox</param>
            <param name="checkType">
            the type that determines how the checkbox will look like. Allowed values are
            <see cref="F:iText.Forms.Fields.PdfFormField.TYPE_CHECK"/>
            ,
            <see cref="F:iText.Forms.Fields.PdfFormField.TYPE_CIRCLE"/>
            ,
            <see cref="F:iText.Forms.Fields.PdfFormField.TYPE_CROSS"/>
            ,
            <see cref="F:iText.Forms.Fields.PdfFormField.TYPE_DIAMOND"/>
            ,
            <see cref="F:iText.Forms.Fields.PdfFormField.TYPE_SQUARE"/>
            ,
            <see cref="F:iText.Forms.Fields.PdfFormField.TYPE_STAR"/>
            </param>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.DrawPushButtonAppearance(System.Single,System.Single,System.String,iText.Kernel.Font.PdfFont,System.Single)">
            <summary>Draws the appearance for a push button.</summary>
            <param name="width">the width of the pushbutton</param>
            <param name="height">the width of the pushbutton</param>
            <param name="text">the text to display on the button</param>
            <param name="font">
            a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            </param>
            <param name="fontSize">the size of the font</param>
            <returns>
            a new
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfFormXObject"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.DrawButton(iText.Kernel.Pdf.Canvas.PdfCanvas,System.Single,System.Single,System.Single,System.Single,System.String,iText.Kernel.Font.PdfFont,System.Single)">
            <summary>Performs the low-level drawing operations to draw a button object.</summary>
            <param name="canvas">
            the
            <see cref="T:iText.Kernel.Pdf.Canvas.PdfCanvas"/>
            of the page to draw on.
            </param>
            <param name="x">will be ignored, according to spec it shall be 0</param>
            <param name="y">will be ignored, according to spec it shall be 0</param>
            <param name="width">the width of the button</param>
            <param name="height">the width of the button</param>
            <param name="text">the text to display on the button</param>
            <param name="font">
            a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            </param>
            <param name="fontSize">the size of the font</param>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.DrawCheckBox(iText.Kernel.Pdf.Canvas.PdfCanvas,System.Single,System.Single,System.Single)">
            <summary>Performs the low-level drawing operations to draw a checkbox object.</summary>
            <param name="canvas">
            the
            <see cref="T:iText.Kernel.Pdf.Canvas.PdfCanvas"/>
            of the page to draw on.
            </param>
            <param name="width">the width of the button</param>
            <param name="height">the width of the button</param>
            <param name="fontSize">the size of the font</param>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CalculateTranslationHeightAfterFieldRot(iText.Kernel.Geom.Rectangle,System.Double,System.Double)">
            <summary>
            Calculate the necessary height offset after applying field rotation
            so that the origin of the bounding box is the lower left corner with respect to the field text.
            </summary>
            <param name="bBox">bounding box rectangle before rotation</param>
            <param name="pageRotation">rotation of the page</param>
            <param name="relFieldRotation">rotation of the field relative to the page</param>
            <returns>translation value for height</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.CalculateTranslationWidthAfterFieldRot(iText.Kernel.Geom.Rectangle,System.Double,System.Double)">
            <summary>
            Calculate the necessary width offset after applying field rotation
            so that the origin of the bounding box is the lower left corner with respect to the field text.
            </summary>
            <param name="bBox">bounding box rectangle before rotation</param>
            <param name="pageRotation">rotation of the page</param>
            <param name="relFieldRotation">rotation of the field relative to the page</param>
            <returns>translation value for width</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfFormField.PutAcroFormObject(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfObject)">
            <summary>Puts object directly to AcroForm dictionary.</summary>
            <remarks>
            Puts object directly to AcroForm dictionary.
            It works much faster than consequent invocation of
            <see cref="M:iText.Forms.PdfAcroForm.GetAcroForm(iText.Kernel.Pdf.PdfDocument,System.Boolean)"/>
            and
            <see cref="M:iText.Kernel.Pdf.PdfObjectWrapper`1.GetPdfObject"/>.
            <para />
            Note, this method assume that Catalog already has AcroForm object.
            <see cref="M:iText.Forms.Fields.PdfFormField.AddAcroFormToCatalog"/>
            should be called explicitly.
            </remarks>
            <param name="acroFormKey">the key of the object.</param>
            <param name="acroFormObject">the object to add.</param>
        </member>
        <member name="T:iText.Forms.Fields.PdfSignatureFormField">
            <summary>An AcroForm field containing signature data.</summary>
        </member>
        <member name="M:iText.Forms.Fields.PdfSignatureFormField.GetFormType">
            <summary>Returns <c>Sig</c>, the form type for signature form fields.</summary>
            <returns>
            the form type, as a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfSignatureFormField.SetValue(iText.Kernel.Pdf.PdfObject)">
            <summary>Adds the signature to the signature field.</summary>
            <param name="value">the signature to be contained in the signature field, or an indirect reference to it</param>
            <returns>the edited field</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfSignatureFormField.GetSigFieldLockDictionary">
            <summary>
            Gets the
            <see cref="T:iText.Forms.PdfSigFieldLock"/>
            , which contains fields that
            must be locked if the document is signed.
            </summary>
            <returns>a dictionary containing locked fields.</returns>
            <seealso cref="T:iText.Forms.PdfSigFieldLock"/>
        </member>
        <member name="T:iText.Forms.Fields.PdfTextFormField">
            <summary>An AcroForm field containing textual data.</summary>
        </member>
        <member name="M:iText.Forms.Fields.PdfTextFormField.GetFormType">
            <summary>Returns <c>Tx</c>, the form type for textual form fields.</summary>
            <returns>
            the form type, as a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfTextFormField.SetMultiline(System.Boolean)">
            <summary>If true, the field can contain multiple lines of text; if false, the field?s text is restricted to a single line.
                </summary>
            <param name="multiline">whether or not the file can contain multiple lines of text</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfTextFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfTextFormField.SetPassword(System.Boolean)">
            <summary>If true, the field is intended for entering a secure password that should not be echoed visibly to the screen.
                </summary>
            <remarks>
            If true, the field is intended for entering a secure password that should not be echoed visibly to the screen.
            Characters typed from the keyboard should instead be echoed in some unreadable form, such as asterisks or bullet characters.
            </remarks>
            <param name="password">whether or not to obscure the typed characters</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfTextFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfTextFormField.IsFileSelect">
            <summary>
            If true, the text entered in the field represents the pathname of a file
            whose contents are to be submitted as the value of the field.
            </summary>
            <returns>whether or not this field currently represents a path</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfTextFormField.SetFileSelect(System.Boolean)">
            <summary>
            If true, the text entered in the field represents the pathname of a file
            whose contents are to be submitted as the value of the field.
            </summary>
            <param name="fileSelect">whether or not this field should represent a path</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfTextFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfTextFormField.IsSpellCheck">
            <summary>If true, text entered in the field is spell-checked.</summary>
            <returns>whether or not spell-checking is currently enabled</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfTextFormField.SetSpellCheck(System.Boolean)">
            <summary>If true, text entered in the field is spell-checked.</summary>
            <param name="spellCheck">whether or not to spell-check</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfTextFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfTextFormField.IsScroll">
            <summary>
            If true, the field scrolls (horizontally for single-line fields, vertically for multiple-line fields)
            to accommodate more text than fits within its annotation rectangle.
            </summary>
            <remarks>
            If true, the field scrolls (horizontally for single-line fields, vertically for multiple-line fields)
            to accommodate more text than fits within its annotation rectangle.
            Once the field is full, no further text is accepted.
            </remarks>
            <returns>whether or not longer texts are currently allowed</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfTextFormField.SetScroll(System.Boolean)">
            <summary>
            If true, the field scrolls (horizontally for single-line fields, vertically for multiple-line fields)
            to accommodate more text than fits within its annotation rectangle.
            </summary>
            <remarks>
            If true, the field scrolls (horizontally for single-line fields, vertically for multiple-line fields)
            to accommodate more text than fits within its annotation rectangle.
            Once the field is full, no further text is accepted.
            </remarks>
            <param name="scroll">whether or not to allow longer texts</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfTextFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfTextFormField.IsComb">
            <summary>
            Meaningful only if the MaxLen entry is present in the text field dictionary
            and if the Multiline, Password, and FileSelect flags are clear.
            </summary>
            <remarks>
            Meaningful only if the MaxLen entry is present in the text field dictionary
            and if the Multiline, Password, and FileSelect flags are clear.
            If true, the field is automatically divided into as many equally spaced positions,
            or combs, as the value of MaxLen, and the text is laid out into those combs.
            </remarks>
            <returns>whether or not combing is enabled</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfTextFormField.SetComb(System.Boolean)">
            <summary>
            Meaningful only if the MaxLen entry is present in the text field dictionary
            and if the Multiline, Password, and FileSelect flags are clear.
            </summary>
            <remarks>
            Meaningful only if the MaxLen entry is present in the text field dictionary
            and if the Multiline, Password, and FileSelect flags are clear.
            If true, the field is automatically divided into as many equally spaced positions,
            or combs, as the value of MaxLen, and the text is laid out into those combs.
            </remarks>
            <param name="comb">whether or not to enable combing</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfTextFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfTextFormField.IsRichText">
            <summary>If true, the value of this field should be represented as a rich text string.</summary>
            <remarks>
            If true, the value of this field should be represented as a rich text string.
            If the field has a value, the RV entry of the field dictionary specifies the rich text string.
            </remarks>
            <returns>whether or not text is currently represented as rich text</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfTextFormField.SetRichText(System.Boolean)">
            <summary>If true, the value of this field should be represented as a rich text string.</summary>
            <remarks>
            If true, the value of this field should be represented as a rich text string.
            If the field has a value, the RV entry of the field dictionary specifies the rich text string.
            </remarks>
            <param name="richText">whether or not to represent text as rich text</param>
            <returns>
            current
            <see cref="T:iText.Forms.Fields.PdfTextFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfTextFormField.GetMaxLen">
            <summary>Gets the maximum length of the field's text, in characters.</summary>
            <remarks>
            Gets the maximum length of the field's text, in characters.
            This is an optional parameter, so if it is not specified, 0 value will be returned.
            </remarks>
            <returns>the current maximum text length</returns>
        </member>
        <member name="M:iText.Forms.Fields.PdfTextFormField.SetMaxLen(System.Int32)">
            <summary>Sets the maximum length of the field's text, in characters.</summary>
            <param name="maxLen">the maximum text length</param>
            <returns>current</returns>
        </member>
        <member name="T:iText.Forms.PdfAcroForm">
            <summary>This class represents the static form technology AcroForm on a PDF file.</summary>
        </member>
        <member name="F:iText.Forms.PdfAcroForm.SIGNATURE_EXIST">
            <summary>
            To be used with
            <see cref="M:iText.Forms.PdfAcroForm.SetSignatureFlags(System.Int32)"/>.
            </summary>
            <remarks>
            To be used with
            <see cref="M:iText.Forms.PdfAcroForm.SetSignatureFlags(System.Int32)"/>.
            <br />
            <blockquote>
            If set, the document contains at least one signature field. This flag
            allows a conforming reader to enable user interface items (such as menu
            items or pushbuttons) related to signature processing without having to
            scan the entire document for the presence of signature fields.
            (ISO 32000-1, section 12.7.2 "Interactive Form Dictionary")
            </blockquote>
            </remarks>
        </member>
        <member name="F:iText.Forms.PdfAcroForm.APPEND_ONLY">
            <summary>
            To be used with
            <see cref="M:iText.Forms.PdfAcroForm.SetSignatureFlags(System.Int32)"/>.
            </summary>
            <remarks>
            To be used with
            <see cref="M:iText.Forms.PdfAcroForm.SetSignatureFlags(System.Int32)"/>.
            <br />
            <blockquote>
            If set, the document contains signatures that may be invalidated if the
            file is saved (written) in a way that alters its previous contents, as
            opposed to an incremental update. Merely updating the file by appending
            new information to the end of the previous version is safe. Conforming
            readers may use this flag to inform a user requesting a full save that
            signatures will be invalidated and require explicit confirmation before
            continuing with the operation.
            (ISO 32000-1, section 12.7.2 "Interactive Form Dictionary")
            </blockquote>
            </remarks>
        </member>
        <member name="F:iText.Forms.PdfAcroForm.generateAppearance">
            <summary>
            Keeps track of whether or not appearances must be generated by the form
            fields themselves, or by the PDF viewer application.
            </summary>
            <remarks>
            Keeps track of whether or not appearances must be generated by the form
            fields themselves, or by the PDF viewer application. Default is
            <c>true</c>.
            </remarks>
        </member>
        <member name="F:iText.Forms.PdfAcroForm.fields">
            <summary>
            A map of field names and their associated
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            objects.
            </summary>
        </member>
        <member name="F:iText.Forms.PdfAcroForm.document">
            <summary>The PdfDocument to which the PdfAcroForm belongs.</summary>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.#ctor(iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.PdfDocument)">
            <summary>Creates a PdfAcroForm as a wrapper of a dictionary.</summary>
            <remarks>
            Creates a PdfAcroForm as a wrapper of a dictionary.
            Also initializes an XFA form if an <c>/XFA</c> entry is present in
            the dictionary.
            </remarks>
            <param name="pdfObject">the PdfDictionary to be wrapped</param>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.#ctor(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Creates a PdfAcroForm from a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of fields.
            </summary>
            <remarks>
            Creates a PdfAcroForm from a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of fields.
            Also initializes an empty XFA form.
            </remarks>
            <param name="fields">
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            objects
            </param>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.GetAcroForm(iText.Kernel.Pdf.PdfDocument,System.Boolean)">
            <summary>Retrieves AcroForm from the document.</summary>
            <remarks>
            Retrieves AcroForm from the document. If there is no AcroForm in the
            document Catalog and createIfNotExist flag is true then the AcroForm
            dictionary will be created and added to the document.
            </remarks>
            <param name="document">
            the document to retrieve the
            <see cref="T:iText.Forms.PdfAcroForm"/>
            from
            </param>
            <param name="createIfNotExist">
            when <c>true</c>, this method will create a
            <see cref="T:iText.Forms.PdfAcroForm"/>
            if none exists for this document
            </param>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument">document</see>
            's AcroForm,
            or a new one provided that <c>createIfNotExist</c> parameter is <c>true</c>, otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.AddField(iText.Forms.Fields.PdfFormField)">
            <summary>This method adds the field to the last page in the document.</summary>
            <remarks>
            This method adds the field to the last page in the document.
            If there's no pages, creates a new one.
            </remarks>
            <param name="field">
            the
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            to be added to the form
            </param>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.AddField(iText.Forms.Fields.PdfFormField,iText.Kernel.Pdf.PdfPage)">
            <summary>This method adds the field to a specific page.</summary>
            <param name="field">
            the
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            to be added to the form
            </param>
            <param name="page">
            the
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            on which to add the field
            </param>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.AddFieldAppearanceToPage(iText.Forms.Fields.PdfFormField,iText.Kernel.Pdf.PdfPage)">
            <summary>
            This method merges field with its annotation and place it on the given
            page.
            </summary>
            <remarks>
            This method merges field with its annotation and place it on the given
            page. This method won't work if the field has no or more than one widget
            annotations.
            </remarks>
            <param name="field">
            the
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            to be added to the form
            </param>
            <param name="page">
            the
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            on which to add the field
            </param>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.GetFormFields">
            <summary>
            Gets the
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            s as a
            <see cref="!:System.Collections.IDictionary&lt;K, V&gt;"/>.
            </summary>
            <returns>
            a map of field names and their associated
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            objects
            </returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.GetFieldsForFlattening">
            <summary>
            Gets a collection of
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            s, prepared for flattening using
            <see cref="M:iText.Forms.PdfAcroForm.PartialFormFlattening(System.String)"/>
            method.
            </summary>
            <remarks>
            Gets a collection of
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            s, prepared for flattening using
            <see cref="M:iText.Forms.PdfAcroForm.PartialFormFlattening(System.String)"/>
            method.
            If returned collection is empty, all form fields will be flattened on
            <see cref="M:iText.Forms.PdfAcroForm.FlattenFields">flattenFields</see>
            call.
            </remarks>
            <returns>
            a collection of
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            s for flattening
            </returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.GetPdfDocument">
            <summary>
            Gets the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            this
            <see cref="T:iText.Forms.PdfAcroForm"/>
            belongs to.
            </summary>
            <returns>the document of this form</returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.SetNeedAppearances(System.Boolean)">
            <summary>Sets the <c>NeedAppearances</c> boolean property on the AcroForm.</summary>
            <remarks>
            Sets the <c>NeedAppearances</c> boolean property on the AcroForm.
            NeedAppearances has been deprecated in PDF 2.0.
            <br />
            <blockquote>
            NeedAppearances is a flag specifying whether to construct appearance
            streams and appearance dictionaries for all widget annotations in the
            document.
            (ISO 32000-1, section 12.7.2 "Interactive Form Dictionary")
            </blockquote>
            </remarks>
            <param name="needAppearances">a boolean. Default value is <c>false</c></param>
            <returns>current AcroForm.</returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.GetNeedAppearances">
            <summary>Gets the <c>NeedAppearances</c> boolean property on the AcroForm.</summary>
            <remarks>
            Gets the <c>NeedAppearances</c> boolean property on the AcroForm.
            NeedAppearances has been deprecated in PDF 2.0.
            <br />
            <blockquote>
            NeedAppearances is a flag specifying whether to construct appearance
            streams and appearance dictionaries for all widget annotations in the
            document.
            (ISO 32000-1, section 12.7.2 "Interactive Form Dictionary")
            </blockquote>
            </remarks>
            <returns>
            the <c>NeedAppearances</c> property as a
            <see cref="T:iText.Kernel.Pdf.PdfBoolean"/>
            . Default value is <c>false</c>
            </returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.SetSignatureFlags(System.Int32)">
            <summary>Sets the <c>SigFlags</c> integer property on the AcroForm.</summary>
            <remarks>
            Sets the <c>SigFlags</c> integer property on the AcroForm.
            <br />
            <blockquote>
            SigFlags is a set of flags specifying various document-level
            characteristics related to signature fields.
            (ISO 32000-1, section 12.7.2 "Interactive Form Dictionary")
            </blockquote>
            </remarks>
            <param name="sigFlags">
            an integer. Use
            <see cref="F:iText.Forms.PdfAcroForm.SIGNATURE_EXIST"/>
            and/or
            <see cref="F:iText.Forms.PdfAcroForm.APPEND_ONLY"/>.
            Use bitwise OR operator to combine these values. Default value is <c>0</c>
            </param>
            <returns>current AcroForm.</returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.SetSignatureFlag(System.Int32)">
            <summary>Changes the <c>SigFlags</c> integer property on the AcroForm.</summary>
            <remarks>
            Changes the <c>SigFlags</c> integer property on the AcroForm.
            This method allows only to add flags, not to remove them.
            <br />
            <blockquote>
            SigFlags is a set of flags specifying various document-level
            characteristics related to signature fields.
            (ISO 32000-1, section 12.7.2 "Interactive Form Dictionary")
            </blockquote>
            </remarks>
            <param name="sigFlag">
            an integer. Use
            <see cref="F:iText.Forms.PdfAcroForm.SIGNATURE_EXIST"/>
            and/or
            <see cref="F:iText.Forms.PdfAcroForm.APPEND_ONLY"/>.
            Use bitwise OR operator to combine these values. Default is <c>0</c>
            </param>
            <returns>current AcroForm.</returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.GetSignatureFlags">
            <summary>Gets the <c>SigFlags</c> integer property on the AcroForm.</summary>
            <remarks>
            Gets the <c>SigFlags</c> integer property on the AcroForm.
            <br />
            <blockquote>
            SigFlags is a set of flags specifying various document-level
            characteristics related to signature fields
            (ISO 32000-1, section 12.7.2 "Interactive Form Dictionary")
            </blockquote>
            </remarks>
            <returns>current value for <c>SigFlags</c>.</returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.SetCalculationOrder(iText.Kernel.Pdf.PdfArray)">
            <summary>Sets the <c>CO</c> array property on the AcroForm.</summary>
            <remarks>
            Sets the <c>CO</c> array property on the AcroForm.
            <br />
            <blockquote>
            <c>CO</c>, Calculation Order, is an array of indirect references to
            field dictionaries with calculation actions, defining the calculation
            order in which their values will be recalculated when the value of any
            field changes
            (ISO 32000-1, section 12.7.2 "Interactive Form Dictionary")
            </blockquote>
            </remarks>
            <param name="calculationOrder">an array of indirect references</param>
            <returns>current AcroForm</returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.GetCalculationOrder">
            <summary>Gets the <c>CO</c> array property on the AcroForm.</summary>
            <remarks>
            Gets the <c>CO</c> array property on the AcroForm.
            <br />
            <blockquote>
            <c>CO</c>, Calculation Order, is an array of indirect references to
            field dictionaries with calculation actions, defining the calculation
            order in which their values will be recalculated when the value of any
            field changes
            (ISO 32000-1, section 12.7.2 "Interactive Form Dictionary")
            </blockquote>
            </remarks>
            <returns>an array of indirect references</returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.SetDefaultResources(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Sets the <c>DR</c> dictionary property on the AcroForm.</summary>
            <remarks>
            Sets the <c>DR</c> dictionary property on the AcroForm.
            <br />
            <blockquote>
            <c>DR</c> is a resource dictionary containing default resources
            (such as fonts, patterns, or colour spaces) that shall be used by form
            field appearance streams. At a minimum, this dictionary shall contain a
            Font entry specifying the resource name and font dictionary of the
            default font for displaying text.
            (ISO 32000-1, section 12.7.2 "Interactive Form Dictionary")
            </blockquote>
            </remarks>
            <param name="defaultResources">a resource dictionary</param>
            <returns>current AcroForm</returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.GetDefaultResources">
            <summary>Gets the <c>DR</c> dictionary property on the AcroForm.</summary>
            <remarks>
            Gets the <c>DR</c> dictionary property on the AcroForm.
            <br />
            <blockquote>
            <c>DR</c> is a resource dictionary containing default resources
            (such as fonts, patterns, or colour spaces) that shall be used by form
            field appearance streams. At a minimum, this dictionary shall contain a
            Font entry specifying the resource name and font dictionary of the
            default font for displaying text.
            (ISO 32000-1, section 12.7.2 "Interactive Form Dictionary")
            </blockquote>
            </remarks>
            <returns>a resource dictionary</returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.SetDefaultAppearance(System.String)">
            <summary>Sets the <c>DA</c> String property on the AcroForm.</summary>
            <remarks>
            Sets the <c>DA</c> String property on the AcroForm.
            <br />
            This method sets a default (fallback value) for the <c>DA</c>
            attribute of variable text
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            s.
            </remarks>
            <param name="appearance">a String containing a sequence of valid PDF syntax</param>
            <returns>current AcroForm</returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.GetDefaultAppearance">
            <summary>Gets the <c>DA</c> String property on the AcroForm.</summary>
            <remarks>
            Gets the <c>DA</c> String property on the AcroForm.
            <br />
            This method returns the default (fallback value) for the <c>DA</c>
            attribute of variable text
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            s.
            </remarks>
            <returns>the form-wide default appearance, as a <c>String</c></returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.SetDefaultJustification(System.Int32)">
            <summary>Sets the <c>Q</c> integer property on the AcroForm.</summary>
            <remarks>
            Sets the <c>Q</c> integer property on the AcroForm.
            <br />
            This method sets a default (fallback value) for the <c>Q</c>
            attribute of variable text
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            s.
            </remarks>
            <param name="justification">an integer representing a justification value</param>
            <returns>current AcroForm</returns>
            <seealso cref="M:iText.Forms.Fields.PdfFormField.SetJustification(System.Int32)"/>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.GetDefaultJustification">
            <summary>Gets the <c>Q</c> integer property on the AcroForm.</summary>
            <remarks>
            Gets the <c>Q</c> integer property on the AcroForm.
            <br />
            This method gets the default (fallback value) for the <c>Q</c>
            attribute of variable text
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            s.
            </remarks>
            <returns>an integer representing a justification value</returns>
            <seealso cref="M:iText.Forms.Fields.PdfFormField.GetJustification"/>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.SetXFAResource(iText.Kernel.Pdf.PdfStream)">
            <summary>Sets the <c>XFA</c> property on the AcroForm.</summary>
            <remarks>
            Sets the <c>XFA</c> property on the AcroForm.
            <br />
            <c>XFA</c> can either be a
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            or a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>.
            Its contents must be valid XFA.
            </remarks>
            <param name="xfaResource">a stream containing the XDP</param>
            <returns>current AcroForm</returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.SetXFAResource(iText.Kernel.Pdf.PdfArray)">
            <summary>Sets the <c>XFA</c> property on the AcroForm.</summary>
            <remarks>
            Sets the <c>XFA</c> property on the AcroForm.
            <br />
            <c>XFA</c> can either be a
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            or a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>.
            Its contents must be valid XFA.
            </remarks>
            <param name="xfaResource">
            an array of text string and stream pairs representing
            the individual packets comprising the XML Data Package. (ISO 32000-1,
            section 12.7.2 "Interactive Form Dictionary")
            </param>
            <returns>current AcroForm</returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.GetXFAResource">
            <summary>Gets the <c>XFA</c> property on the AcroForm.</summary>
            <returns>
            an object representing the entire XDP. It can either be a
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            or a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>.
            </returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.GetField(System.String)">
            <summary>
            Gets a
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            by its name.
            </summary>
            <param name="fieldName">
            the name of the
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            to retrieve
            </param>
            <returns>
            the
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            , or <c>null</c> if it
            isn't present
            </returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.IsGenerateAppearance">
            <summary>
            Gets the attribute generateAppearance, which tells
            <see cref="M:iText.Forms.PdfAcroForm.FlattenFields"/>
            to generate an appearance Stream for all
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            s
            that don't have one.
            </summary>
            <returns>bolean value indicating if the appearances need to be generated</returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.SetGenerateAppearance(System.Boolean)">
            <summary>
            Sets the attribute generateAppearance, which tells
            <see cref="M:iText.Forms.PdfAcroForm.FlattenFields"/>
            to generate an appearance Stream for all
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            s
            that don't have one.
            </summary>
            <remarks>
            Sets the attribute generateAppearance, which tells
            <see cref="M:iText.Forms.PdfAcroForm.FlattenFields"/>
            to generate an appearance Stream for all
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            s
            that don't have one.
            <para />
            Not generating appearances will speed up form flattening but the results
            can be unexpected in Acrobat. Don't use it unless your environment is
            well controlled. The default is <c>true</c>.
            <para />
            If generateAppearance is set to <c>true</c>, then
            <c>NeedAppearances</c> is set to <c>false</c>. This does not
            apply vice versa.
            <para />
            Note, this method does not change default behaviour of
            <see cref="M:iText.Forms.Fields.PdfFormField.SetValue(System.String)"/>
            method.
            </remarks>
            <param name="generateAppearance">a boolean</param>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.FlattenFields">
            <summary>
            Flattens interactive
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            s in the document.
            </summary>
            <remarks>
            Flattens interactive
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            s in the document. If
            no fields have been explicitly included via
            <see cref="M:iText.Forms.PdfAcroForm.PartialFormFlattening(System.String)"/>
            ,
            then all fields are flattened. Otherwise only the included fields are
            flattened.
            </remarks>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.RemoveField(System.String)">
            <summary>
            Tries to remove the
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            with the specified
            name from the document.
            </summary>
            <param name="fieldName">
            the name of the
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            to remove
            </param>
            <returns>a boolean representing whether or not the removal succeeded.</returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.PartialFormFlattening(System.String)">
            <summary>
            Adds a
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            , identified by name, to the list of fields to be flattened.
            </summary>
            <remarks>
            Adds a
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            , identified by name, to the list of fields to be flattened.
            Does not perform a flattening operation in itself.
            </remarks>
            <param name="fieldName">
            the name of the
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            to be flattened
            </param>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.RenameField(System.String,System.String)">
            <summary>
            Changes the identifier of a
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>.
            </summary>
            <param name="oldName">the current name of the field</param>
            <param name="newName">the new name of the field. Must not be used currently.</param>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.CopyField(System.String)">
            <summary>
            Creates an in-memory copy of a
            <see cref="T:iText.Forms.Fields.PdfFormField"/>.
            </summary>
            <remarks>
            Creates an in-memory copy of a
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            . This new field is
            not added to the document.
            </remarks>
            <param name="name">
            the name of the
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            to be copied
            </param>
            <returns>
            a clone of the original
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            </returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.ReplaceField(System.String,iText.Forms.Fields.PdfFormField)">
            <summary>
            Replaces the
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            of a certain name with another
            <see cref="T:iText.Forms.Fields.PdfFormField"/>.
            </summary>
            <param name="name">
            the name of the
            <see cref="T:iText.Forms.Fields.PdfFormField">form field</see>
            to be replaced
            </param>
            <param name="field">
            the new
            <see cref="T:iText.Forms.Fields.PdfFormField"/>
            </param>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.GetFields">
            <summary>Gets all AcroForm fields in the document.</summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of field dictionaries
            </returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.HasXfaForm">
            <summary>Determines whether the AcroForm contains XFA data.</summary>
            <returns>a boolean</returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.GetXfaForm">
            <summary>
            Gets the
            <see cref="T:iText.Forms.Xfa.XfaForm"/>
            atribute.
            </summary>
            <returns>the XFA form object</returns>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.RemoveXfaForm">
            <summary>Removes the XFA stream from the document.</summary>
        </member>
        <member name="M:iText.Forms.PdfAcroForm.Release">
            <summary>Releases underlying pdf object and other pdf entities used by wrapper.</summary>
            <remarks>
            Releases underlying pdf object and other pdf entities used by wrapper.
            This method should be called instead of direct call to
            <see cref="M:iText.Kernel.Pdf.PdfObject.Release"/>
            if the wrapper is used.
            </remarks>
        </member>
        <member name="T:iText.Forms.PdfPageFormCopier">
            <summary>
            A sample implementation of the {#link IPdfPageExtraCopier} interface which
            copies only AcroForm fields to a new page.
            </summary>
            <remarks>
            A sample implementation of the {#link IPdfPageExtraCopier} interface which
            copies only AcroForm fields to a new page.
            <para />
            NOTE: While it's absolutely not necessary to use the same PdfPageFormCopier instance for copying operations,
            it is still worth to know that PdfPageFormCopier uses some caching logic which can potentially improve performance
            in case of the reusing of the same instance.
            </remarks>
        </member>
        <member name="T:iText.Forms.PdfSigFieldLock">
            <summary>A signature field lock dictionary.</summary>
            <remarks>
            A signature field lock dictionary. Specifies a set of form
            fields that shall be locked when this signature field is
            signed.
            </remarks>
        </member>
        <member name="M:iText.Forms.PdfSigFieldLock.#ctor">
            <summary>
            Creates an instance of
            <see cref="T:iText.Forms.PdfSigFieldLock"/>.
            </summary>
        </member>
        <member name="M:iText.Forms.PdfSigFieldLock.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Creates an instance of
            <see cref="T:iText.Forms.PdfSigFieldLock"/>.
            </summary>
            <param name="dict">
            The dictionary whose entries should be added to
            the signature field lock dictionary.
            </param>
        </member>
        <member name="M:iText.Forms.PdfSigFieldLock.SetDocumentPermissions(iText.Forms.PdfSigFieldLock.LockPermissions)">
            <summary>
            Sets the permissions granted for the document when the corresponding signature
            field is signed.
            </summary>
            <remarks>
            Sets the permissions granted for the document when the corresponding signature
            field is signed. See
            <see cref="T:iText.Forms.PdfSigFieldLock.LockPermissions"/>
            for getting more info.
            </remarks>
            <param name="permissions">The permissions granted for the document.</param>
            <returns>
            This
            <see cref="T:iText.Forms.PdfSigFieldLock"/>
            object.
            </returns>
        </member>
        <member name="M:iText.Forms.PdfSigFieldLock.SetFieldLock(iText.Forms.PdfSigFieldLock.LockAction,System.String[])">
            <summary>Sets signature lock for specific fields in the document.</summary>
            <param name="action">
            Indicates the set of fields that should be locked after the actual
            signing of the corresponding signature takes place.
            </param>
            <param name="fields">Names indicating the fields.</param>
            <returns>
            This
            <see cref="T:iText.Forms.PdfSigFieldLock"/>
            object.
            </returns>
        </member>
        <member name="T:iText.Forms.PdfSigFieldLock.LockAction">
            <summary>Enumerates the different actions of a signature field lock.</summary>
            <remarks>
            Enumerates the different actions of a signature field lock.
            Indicates the set of fields that should be locked when the
            corresponding signature field is signed:
            <list type="bullet">
            <item><description>all the fields in the document,
            </description></item>
            <item><description>all the fields specified in the /Fields array,
            </description></item>
            <item><description>all the fields except those specified in the /Fields array.
            </description></item>
            </list>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Forms.PdfSigFieldLock.LockPermissions" -->
        <member name="T:iText.Forms.Util.DrawingUtil">
            <summary>
            Utility class to draw form fields
            <see cref="T:iText.Forms.Fields.PdfFormField"/>.
            </summary>
        </member>
        <member name="T:iText.Forms.Xfa.AcroFieldsSearch">
            <summary>A class to process "classic" fields.</summary>
        </member>
        <member name="M:iText.Forms.Xfa.AcroFieldsSearch.#ctor(System.Collections.Generic.ICollection{System.String})">
            <summary>Creates a new instance from a Collection with the full names.</summary>
            <param name="items">the Collection</param>
        </member>
        <member name="M:iText.Forms.Xfa.AcroFieldsSearch.GetAcroShort2LongName">
            <summary>Gets the mapping from short names to long names.</summary>
            <remarks>
            Gets the mapping from short names to long names. A long
            name may contain the #subform name part.
            </remarks>
            <returns>the mapping from short names to long names</returns>
        </member>
        <member name="M:iText.Forms.Xfa.AcroFieldsSearch.SetAcroShort2LongName(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Sets the mapping from short names to long names.</summary>
            <remarks>
            Sets the mapping from short names to long names. A long
            name may contain the #subform name part.
            </remarks>
            <param name="acroShort2LongName">the mapping from short names to long names</param>
        </member>
        <member name="T:iText.Forms.Xfa.InverseStore">
            <summary>
            A structure to store each part of a SOM name and link it to the next part
            beginning from the lower hierarchy.
            </summary>
        </member>
        <member name="M:iText.Forms.Xfa.InverseStore.GetDefaultName">
            <summary>
            Gets the full name by traversing the hierarchy using only the
            index 0.
            </summary>
            <returns>the full name</returns>
        </member>
        <member name="M:iText.Forms.Xfa.InverseStore.IsSimilar(System.String)">
            <summary>Search the current node for a similar name.</summary>
            <remarks>
            Search the current node for a similar name. A similar name starts
            with the same name but has a different index. For example, "detail[3]"
            is similar to "detail[9]". The main use is to discard names that
            correspond to out of bounds records.
            </remarks>
            <param name="name">the name to search</param>
            <returns><c>true</c> if a similitude was found</returns>
        </member>
        <member name="T:iText.Forms.Xfa.XfaForm">
            <summary>Processes XFA forms.</summary>
        </member>
        <member name="F:iText.Forms.Xfa.XfaForm.XFA_DATA_SCHEMA">
            <summary>The URI for the XFA Data schema.</summary>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.#ctor">
            <summary>An empty constructor to build on.</summary>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.#ctor(System.IO.Stream)">
            <summary>Creates an XFA form by the stream containing all xml information</summary>
            <param name="inputStream">
            The InputStream
            </param>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            Creates an XFA form by the
            <see cref="T:iText.Layout.Document"/>
            containing all xml information
            </summary>
            <param name="domDocument">
            The document
            </param>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            A constructor from a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            . It is assumed, but not
            necessary for correct initialization, that the dictionary is actually a
            <see cref="T:iText.Forms.PdfAcroForm"/>
            . An entry in the dictionary with the <code>XFA</code>
            key must contain correct XFA syntax. If the <code>XFA</code> key is
            absent, then the constructor essentially does nothing.
            </summary>
            <param name="acroFormDictionary">the dictionary object to initialize from</param>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.#ctor(iText.Kernel.Pdf.PdfDocument)">
            <summary>A constructor from a <CODE>PdfDocument</CODE>.</summary>
            <remarks>
            A constructor from a <CODE>PdfDocument</CODE>. It basically does everything
            from finding the XFA stream to the XML parsing.
            </remarks>
            <param name="pdfDocument">the PdfDocument instance</param>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.SetXfaForm(iText.Forms.Xfa.XfaForm,iText.Kernel.Pdf.PdfDocument)">
            <summary>Sets the XFA key from a byte array.</summary>
            <remarks>Sets the XFA key from a byte array. The old XFA is erased.</remarks>
            <param name="form">the data</param>
            <param name="pdfDocument">pdfDocument</param>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.SetXfaForm(iText.Forms.Xfa.XfaForm,iText.Forms.PdfAcroForm)">
            <summary>Sets the XFA key from a byte array.</summary>
            <remarks>Sets the XFA key from a byte array. The old XFA is erased.</remarks>
            <param name="form">the data</param>
            <param name="acroForm">an AcroForm instance</param>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.ExtractXFANodes(System.Xml.Linq.XDocument)">
            <summary>Extracts DOM nodes from an XFA document.</summary>
            <param name="domDocument">
            an XFA file as a
            <see cref="T:iText.Layout.Document">
            DOM
            document
            </see>
            </param>
            <returns>
            a
            <see cref="!:System.Collections.IDictionary&lt;K, V&gt;"/>
            of XFA packet names and their associated
            <see cref="!:Org.W3c.Dom.Node">DOM nodes</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.Write(iText.Kernel.Pdf.PdfDocument)">
            <summary>Write the XfaForm to the provided PdfDocument.</summary>
            <param name="document">the PdfDocument to write the XFA Form to</param>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.Write(iText.Forms.PdfAcroForm)">
            <summary>Write the XfaForm to the provided PdfDocument.</summary>
            <param name="acroForm">the PdfAcroForm to write the XFA Form to</param>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.SetXfaFieldValue(System.String,System.String)">
            <summary>Changes a field value in the XFA form.</summary>
            <param name="name">the name of the field to be changed</param>
            <param name="value">the new value</param>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.GetXfaFieldValue(System.String)">
            <summary>Gets the xfa field value.</summary>
            <param name="name">the fully qualified field name</param>
            <returns>the field value</returns>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.IsXfaPresent">
            <summary>Returns <CODE>true</CODE> if it is a XFA form.</summary>
            <returns><CODE>true</CODE> if it is a XFA form</returns>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.FindFieldName(System.String)">
            <summary>Finds the complete field name from a partial name.</summary>
            <param name="name">the complete or partial name</param>
            <returns>the complete name or <CODE>null</CODE> if not found</returns>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.FindDatasetsName(System.String)">
            <summary>
            Finds the complete SOM name contained in the datasets section from a
            possibly partial name.
            </summary>
            <param name="name">the complete or partial name</param>
            <returns>the complete name or <CODE>null</CODE> if not found</returns>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.FindDatasetsNode(System.String)">
            <summary>
            Finds the <CODE>Node</CODE> contained in the datasets section from a
            possibly partial name.
            </summary>
            <param name="name">the complete or partial name</param>
            <returns>the <CODE>Node</CODE> or <CODE>null</CODE> if not found</returns>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.GetNodeText(System.Xml.Linq.XNode)">
            <summary>Gets all the text contained in the child nodes of this node.</summary>
            <param name="n">the <CODE>Node</CODE></param>
            <returns>the text found or "" if no text was found</returns>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.SetNodeText(System.Xml.Linq.XNode,System.String)">
            <summary>Sets the text of this node.</summary>
            <remarks>
            Sets the text of this node. All the child's node are deleted and a new
            child text node is created.
            </remarks>
            <param name="n">the <CODE>Node</CODE> to add the text to</param>
            <param name="text">the text to add</param>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.GetDomDocument">
            <summary>Gets the top level DOM document.</summary>
            <returns>the top level DOM document</returns>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.SetDomDocument(System.Xml.Linq.XDocument)">
            <summary>Sets the top DOM document.</summary>
            <param name="domDocument">the top DOM document</param>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.GetDatasetsNode">
            <summary>Gets the <CODE>Node</CODE> that corresponds to the datasets part.</summary>
            <returns>the <CODE>Node</CODE> that corresponds to the datasets part</returns>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.FillXfaForm(System.IO.FileInfo)">
            <summary>Replaces the XFA data under datasets/data.</summary>
            <remarks>
            Replaces the XFA data under datasets/data. Accepts a
            <see cref="T:System.IO.FileInfo">
            file
            object
            </see>
            to fill this object with XFA data. The resulting DOM document may
            be modified.
            </remarks>
            <param name="file">
            the
            <see cref="T:System.IO.FileInfo"/>
            </param>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.FillXfaForm(System.IO.FileInfo,System.Boolean)">
            <summary>Replaces the XFA data under datasets/data.</summary>
            <remarks>
            Replaces the XFA data under datasets/data. Accepts a
            <see cref="T:System.IO.FileInfo">
            file
            object
            </see>
            to fill this object with XFA data.
            </remarks>
            <param name="file">
            the
            <see cref="T:System.IO.FileInfo"/>
            </param>
            <param name="readOnly">whether or not the resulting DOM document may be modified</param>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.FillXfaForm(System.IO.Stream)">
            <summary>Replaces the XFA data under datasets/data.</summary>
            <remarks>
            Replaces the XFA data under datasets/data. Accepts an
            <see cref="T:System.IO.Stream"/>
            to fill this object with XFA data. The resulting DOM document may be
            modified.
            </remarks>
            <param name="is">
            the
            <see cref="T:System.IO.Stream"/>
            </param>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.FillXfaForm(System.IO.Stream,System.Boolean)">
            <summary>Replaces the XFA data under datasets/data.</summary>
            <remarks>
            Replaces the XFA data under datasets/data. Accepts an
            <see cref="T:System.IO.Stream"/>
            to fill this object with XFA data.
            </remarks>
            <param name="is">
            the
            <see cref="T:System.IO.Stream"/>
            </param>
            <param name="readOnly">whether or not the resulting DOM document may be modified</param>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.FillXfaForm(System.Xml.XmlReader)">
            <summary>Replaces the XFA data under datasets/data.</summary>
            <remarks>
            Replaces the XFA data under datasets/data. Accepts a
            <see cref="!:Org.Xml.Sax.InputSource">SAX input source</see>
            to fill this object with XFA data. The resulting DOM
            document may be modified.
            </remarks>
            <param name="is">
            the
            <see cref="!:Org.Xml.Sax.InputSource">SAX input source</see>
            </param>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.FillXfaForm(System.Xml.XmlReader,System.Boolean)">
            <summary>Replaces the XFA data under datasets/data.</summary>
            <remarks>
            Replaces the XFA data under datasets/data. Accepts a
            <see cref="!:Org.Xml.Sax.InputSource">SAX input source</see>
            to fill this object with XFA data.
            </remarks>
            <param name="is">
            the
            <see cref="!:Org.Xml.Sax.InputSource">SAX input source</see>
            </param>
            <param name="readOnly">whether or not the resulting DOM document may be modified</param>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.FillXfaForm(System.Xml.Linq.XNode)">
            <summary>Replaces the XFA data under datasets/data.</summary>
            <param name="node">
            the input
            <see cref="!:Org.W3c.Dom.Node"/>
            </param>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.FillXfaForm(System.Xml.Linq.XNode,System.Boolean)">
            <summary>Replaces the XFA data under datasets/data.</summary>
            <param name="node">
            the input
            <see cref="!:Org.W3c.Dom.Node"/>
            </param>
            <param name="readOnly">whether or not the resulting DOM document may be modified</param>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.GetXfaObject(iText.Kernel.Pdf.PdfDocument)">
            <summary>Return the XFA Object, could be an array, could be a Stream.</summary>
            <remarks>
            Return the XFA Object, could be an array, could be a Stream.
            Returns null if no XFA Object is present.
            </remarks>
            <param name="pdfDocument">a PdfDocument instance</param>
            <returns>the XFA object</returns>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.GetXfaObject(iText.Forms.PdfAcroForm)">
            <summary>Return the XFA Object, could be an array, could be a Stream.</summary>
            <remarks>
            Return the XFA Object, could be an array, could be a Stream.
            Returns null if no XFA Object is present.
            </remarks>
            <param name="acroForm">a PdfAcroForm instance</param>
            <returns>the XFA object</returns>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.SerializeDocument(System.Xml.Linq.XNode)">
            <summary>Serializes a XML document to a byte array.</summary>
            <param name="n">the XML document</param>
            <returns>the serialized XML document</returns>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.ExtractNodes">
            <summary>Extracts the nodes from the domDocument.</summary>
        </member>
        <member name="M:iText.Forms.Xfa.XfaForm.CreateDatasetsNode(System.Xml.Linq.XNode)">
            <summary>Some XFA forms don't have a datasets node.</summary>
            <remarks>
            Some XFA forms don't have a datasets node.
            If this is the case, we have to add one.
            </remarks>
        </member>
        <member name="T:iText.Forms.Xfa.Xml2Som">
            <summary>A class for some basic SOM processing.</summary>
        </member>
        <member name="F:iText.Forms.Xfa.Xml2Som.order">
            <summary>The order the names appear in the XML, depth first.</summary>
        </member>
        <member name="F:iText.Forms.Xfa.Xml2Som.name2Node">
            <summary>The mapping of full names to nodes.</summary>
        </member>
        <member name="F:iText.Forms.Xfa.Xml2Som.inverseSearch">
            <summary>The data to do a search from the bottom hierarchy.</summary>
        </member>
        <member name="F:iText.Forms.Xfa.Xml2Som.stack">
            <summary>A stack to be used when parsing.</summary>
        </member>
        <member name="F:iText.Forms.Xfa.Xml2Som.anform">
            <summary>A temporary store for the repetition count.</summary>
        </member>
        <member name="M:iText.Forms.Xfa.Xml2Som.EscapeSom(System.String)">
            <summary>Escapes a SOM string fragment replacing "." with "\.".</summary>
            <param name="s">the unescaped string</param>
            <returns>the escaped string</returns>
        </member>
        <member name="M:iText.Forms.Xfa.Xml2Som.UnescapeSom(System.String)">
            <summary>Unescapes a SOM string fragment replacing "\." with ".".</summary>
            <param name="s">the escaped string</param>
            <returns>the unescaped string</returns>
        </member>
        <member name="M:iText.Forms.Xfa.Xml2Som.PrintStack">
            <summary>
            Outputs the stack as the sequence of elements separated
            by '.'.
            </summary>
            <returns>the stack as the sequence of elements separated by '.'</returns>
        </member>
        <member name="M:iText.Forms.Xfa.Xml2Som.GetShortName(System.String)">
            <summary>Gets the name with the <CODE>#subform</CODE> removed.</summary>
            <param name="s">the long name</param>
            <returns>the short name</returns>
        </member>
        <member name="M:iText.Forms.Xfa.Xml2Som.InverseSearchAdd(System.String)">
            <summary>Adds a SOM name to the search node chain.</summary>
            <param name="unstack">the SOM name</param>
        </member>
        <member name="M:iText.Forms.Xfa.Xml2Som.InverseSearchAdd(System.Collections.Generic.IDictionary{System.String,iText.Forms.Xfa.InverseStore},System.Collections.Generic.Stack{System.String},System.String)">
            <summary>Adds a SOM name to the search node chain.</summary>
            <param name="inverseSearch">the start point</param>
            <param name="stack">the stack with the separated SOM parts</param>
            <param name="unstack">the full name</param>
        </member>
        <member name="M:iText.Forms.Xfa.Xml2Som.InverseSearchGlobal(System.Collections.Generic.IList{System.String})">
            <summary>Searches the SOM hierarchy from the bottom.</summary>
            <param name="parts">the SOM parts</param>
            <returns>the full name or <CODE>null</CODE> if not found</returns>
        </member>
        <member name="M:iText.Forms.Xfa.Xml2Som.SplitParts(System.String)">
            <summary>Splits a SOM name in the individual parts.</summary>
            <param name="name">the full SOM name</param>
            <returns>the split name</returns>
        </member>
        <member name="M:iText.Forms.Xfa.Xml2Som.GetOrder">
            <summary>Gets the order the names appear in the XML, depth first.</summary>
            <returns>the order the names appear in the XML, depth first</returns>
        </member>
        <member name="M:iText.Forms.Xfa.Xml2Som.SetOrder(System.Collections.Generic.IList{System.String})">
            <summary>Sets the order the names appear in the XML, depth first</summary>
            <param name="order">the order the names appear in the XML, depth first</param>
        </member>
        <member name="M:iText.Forms.Xfa.Xml2Som.GetName2Node">
            <summary>Gets the mapping of full names to nodes.</summary>
            <returns>the mapping of full names to nodes</returns>
        </member>
        <member name="M:iText.Forms.Xfa.Xml2Som.SetName2Node(System.Collections.Generic.IDictionary{System.String,System.Xml.Linq.XNode})">
            <summary>Sets the mapping of full names to nodes.</summary>
            <param name="name2Node">the mapping of full names to nodes</param>
        </member>
        <member name="M:iText.Forms.Xfa.Xml2Som.GetInverseSearch">
            <summary>Gets the data to do a search from the bottom hierarchy.</summary>
            <returns>the data to do a search from the bottom hierarchy</returns>
        </member>
        <member name="M:iText.Forms.Xfa.Xml2Som.SetInverseSearch(System.Collections.Generic.IDictionary{System.String,iText.Forms.Xfa.InverseStore})">
            <summary>Sets the data to do a search from the bottom hierarchy.</summary>
            <param name="inverseSearch">the data to do a search from the bottom hierarchy</param>
        </member>
        <member name="T:iText.Forms.Xfa.Xml2SomDatasets">
            <summary>Processes the datasets section in the XFA form.</summary>
        </member>
        <member name="M:iText.Forms.Xfa.Xml2SomDatasets.#ctor(System.Xml.Linq.XNode)">
            <summary>Creates a new instance from the datasets node.</summary>
            <remarks>
            Creates a new instance from the datasets node. This expects
            not the datasets but the data node that comes below.
            </remarks>
            <param name="n">the datasets node</param>
        </member>
        <member name="M:iText.Forms.Xfa.Xml2SomDatasets.InsertNode(System.Xml.Linq.XNode,System.String)">
            <summary>Inserts a new <CODE>Node</CODE> that will match the short name.</summary>
            <param name="n">the datasets top <CODE>Node</CODE></param>
            <param name="shortName">the short name</param>
            <returns>the new <CODE>Node</CODE> of the inserted name</returns>
        </member>
        <member name="T:iText.Forms.Xfdf.ActionObject">
            <summary>Represent Action tag in xfdf document structure.</summary>
            <remarks>
            Represent Action tag in xfdf document structure.
            Content model: ( URI | Launch | GoTo | GoToR | Named ).
            Attributes: none.
            For more details see paragraph 6.5.1 in Xfdf specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.ActionObject.type">
            <summary>Type of inner action element.</summary>
            <remarks>
            Type of inner action element. Possible values:
            <see cref="F:iText.Kernel.Pdf.PdfName.URI"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Launch"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.GoTo"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.GoToR"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Named"/>.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.ActionObject.uri">
            <summary>Represents Name, required attribute of URI element.</summary>
            <remarks>Represents Name, required attribute of URI element. For more details see paragraph 6.5.30 in Xfdf specification.
                </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.ActionObject.isMap">
            <summary>Represents IsMap, optional attribute of URI element.</summary>
            <remarks>Represents IsMap, optional attribute of URI element. For more details see paragraph 6.5.30 in Xfdf specification.
                </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.ActionObject.nameAction">
            <summary>Represents Name, required attribute of Named element.</summary>
            <remarks>Represents Name, required attribute of Named element. For more details see paragraph 6.5.24 in Xfdf specification.
                </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.ActionObject.fileOriginalName">
            <summary>Represents OriginalName required attribute of File inner element of GoToR or Launch element.</summary>
            <remarks>
            Represents OriginalName required attribute of File inner element of GoToR or Launch element.
            Corresponds to F key in go-to action or launch dictionaries.
            For more details see paragraphs 6.5.11, 6.5.23 in Xfdf specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.ActionObject.isNewWindow">
            <summary>Represents NewWindow, optional attribute of Launch element.</summary>
            <remarks>Represents NewWindow, optional attribute of Launch element. For more details see paragraph 6.5.23 in Xfdf specification.
                </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.ActionObject.destination">
            <summary>Represents Dest, inner element of link, GoTo, and GoToR elements.</summary>
            <remarks>
            Represents Dest, inner element of link, GoTo, and GoToR elements.
            Corresponds to Dest key in link annotation dictionary.
            For more details see paragraph 6.5.10 in Xfdf specification.
            </remarks>
        </member>
        <member name="M:iText.Forms.Xfdf.ActionObject.GetType">
            <summary>Returns the type of inner action element.</summary>
            <remarks>
            Returns the type of inner action element. Possible values:
            <see cref="F:iText.Kernel.Pdf.PdfName.URI"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Launch"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.GoTo"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.GoToR"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Named"/>.
            </remarks>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            type of inner action element
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.ActionObject.SetType(iText.Kernel.Pdf.PdfName)">
            <summary>Sets the type of inner action element.</summary>
            <remarks>
            Sets the type of inner action element. Possible values:
            <see cref="F:iText.Kernel.Pdf.PdfName.URI"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Launch"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.GoTo"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.GoToR"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Named"/>.
            </remarks>
            <param name="type">
            
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            type of inner action object
            </param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.ActionObject"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.ActionObject.GetUri">
            <summary>Gets the string value of URI elements.</summary>
            <remarks>
            Gets the string value of URI elements. Corresponds to Name, required attribute of URI element.
            For more details see paragraph 6.5.30 in Xfdf specification.
            </remarks>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            value of URI element
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.ActionObject.SetUri(iText.Kernel.Pdf.PdfString)">
            <summary>Sets the string value of URI element.</summary>
            <remarks>
            Sets the string value of URI element. Corresponds to Name, required attribute of URI element.
            For more details see paragraph 6.5.30 in Xfdf specification.
            </remarks>
            <param name="uri">
            
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            value to be set to URI element
            </param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.ActionObject"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.ActionObject.IsMap">
            <summary>Gets IsMap, optional attribute of URI element.</summary>
            <remarks>Gets IsMap, optional attribute of URI element. For more details see paragraph 6.5.30 in Xfdf specification.
                </remarks>
            <returns>boolean indicating if URI element is a map</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.ActionObject.SetMap(System.Boolean)">
            <summary>Sets IsMap, optional attribute of URI element.</summary>
            <remarks>Sets IsMap, optional attribute of URI element. For more details see paragraph 6.5.30 in Xfdf specification.
                </remarks>
            <param name="map">boolean indicating if URI element is a map</param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.ActionObject"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.ActionObject.GetNameAction">
            <summary>Gets the value of Name, required attribute of Named element.</summary>
            <remarks>Gets the value of Name, required attribute of Named element. For more details see paragraph 6.5.24 in Xfdf specification.
                </remarks>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            value of Name attribute of a named action element
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.ActionObject.SetNameAction(iText.Kernel.Pdf.PdfName)">
            <summary>Sets the value of Name, required attribute of Named element.</summary>
            <remarks>Sets the value of Name, required attribute of Named element. For more details see paragraph 6.5.24 in Xfdf specification.
                </remarks>
            <param name="nameAction">
            
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            value to be set to Name attribute of a named action element
            </param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.ActionObject"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.ActionObject.GetFileOriginalName">
            <summary>Gets the string value of OriginalName, required attribute of File inner element of GoToR or Launch element.
                </summary>
            <remarks>
            Gets the string value of OriginalName, required attribute of File inner element of GoToR or Launch element.
            Corresponds to F key in go-to action or launch dictionaries.
            For more details see paragraphs 6.5.11, 6.5.23 in Xfdf specification.
            </remarks>
            <returns>
            
            <see cref="T:System.String"/>
            value of OriginalName attribute of current action object
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.ActionObject.SetFileOriginalName(System.String)">
            <summary>Sets the string value of OriginalName, required attribute of File inner element of GoToR or Launch element.
                </summary>
            <remarks>
            Sets the string value of OriginalName, required attribute of File inner element of GoToR or Launch element.
            Corresponds to F key in go-to action or launch dictionaries.
            For more details see paragraphs 6.5.11, 6.5.23 in Xfdf specification.
            </remarks>
            <param name="fileOriginalName">
            
            <see cref="T:System.String"/>
            value of OriginalName attribute of action object
            </param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.ActionObject"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.ActionObject.IsNewWindow">
            <summary>Gets the boolean value of NewWindow, optional attribute of Launch element.</summary>
            <remarks>Gets the boolean value of NewWindow, optional attribute of Launch element. For more details see paragraph 6.5.23 in Xfdf specification.
                </remarks>
            <returns>boolean indicating if current Launch action element should be opened in a new window</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.ActionObject.SetNewWindow(System.Boolean)">
            <summary>Sets the boolean value of NewWindow, optional attribute of Launch element.</summary>
            <remarks>Sets the boolean value of NewWindow, optional attribute of Launch element. For more details see paragraph 6.5.23 in Xfdf specification.
                </remarks>
            <param name="newWindow">boolean indicating if current Launch action element should be opened in a new window
                </param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.ActionObject"/>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.ActionObject.GetDestination">
            <summary>Gets Dest, inner element of link, GoTo, and GoToR elements.</summary>
            <remarks>
            Gets Dest, inner element of link, GoTo, and GoToR elements.
            Corresponds to Dest key in link annotation dictionary.
            For more details see paragraph 6.5.10 in Xfdf specification.
            </remarks>
            <returns>
            
            <see cref="T:iText.Forms.Xfdf.DestObject"/>
            destination attribute of current action element
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.ActionObject.SetDestination(iText.Forms.Xfdf.DestObject)">
            <summary>Sets Dest, inner element of link, GoTo, and GoToR elements.</summary>
            <remarks>
            Sets Dest, inner element of link, GoTo, and GoToR elements.
            Corresponds to Dest key in link annotation dictionary.
            For more details see paragraph 6.5.10 in Xfdf specification.
            </remarks>
            <param name="destination">
            
            <see cref="T:iText.Forms.Xfdf.DestObject"/>
            destination attribute of the action element
            </param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.ActionObject"/>
            </returns>
        </member>
        <member name="T:iText.Forms.Xfdf.AnnotObject">
            <summary>Represents annotation, a child element of annots tag in Xfdf document structure.</summary>
            <remarks>Represents annotation, a child element of annots tag in Xfdf document structure. For more details see part 6.4 in Xfdf specification.
                </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.AnnotObject.name">
            <summary>Represents the type of annotation.</summary>
            <remarks>
            Represents the type of annotation. Possible values:
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.CARET"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.CIRCLE"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.FILEATTACHMENT"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.FREETEXT"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.HIGHLIGHT"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.INK"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.LINE"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.POLYGON"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.POLYLINE"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.SOUND"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.SQUARE"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.SQUIGGLY"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.STAMP"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.STRIKEOUT"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.TEXT"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.UNDERLINE"/>.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.AnnotObject.attributes">
            <summary>Represents a list of attributes of the annotation.</summary>
        </member>
        <member name="F:iText.Forms.Xfdf.AnnotObject.contents">
            <summary>Represents contents tag in Xfdf document structure.</summary>
            <remarks>
            Represents contents tag in Xfdf document structure. Is a child of caret, circle, fileattachment, freetext,
            highlight, ink, line, polygon, polyline, sound, square, squiggly, stamp, strikeout, text, and
            underline elements.
            Corresponds to Contents key in annotation dictionary.
            Content model: a string or a rich text string.
            For more details see paragraph 6.5.4 in Xfdf document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.AnnotObject.contentsRichText">
            <summary>Represents contents-richtext tag in Xfdf document structure.</summary>
            <remarks>
            Represents contents-richtext tag in Xfdf document structure. Is a child of caret, circle, fileattachment, freetext,
            highlight, ink, line, polygon, polyline, sound, square, squiggly, stamp, strikeout, text, and
            underline elements.
            Corresponds to RC key in annotation dictionary.
            Content model: text string.
            For more details see paragraph 6.5.5 in Xfdf document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.AnnotObject.hasPopup">
            <summary>A boolean, indicating if annotation has inner popup element.</summary>
        </member>
        <member name="F:iText.Forms.Xfdf.AnnotObject.popup">
            <summary>Represents a popup annotation, an inner element of the annotation element.</summary>
        </member>
        <member name="F:iText.Forms.Xfdf.AnnotObject.action">
            <summary>Represents Action element, a child of OnActivation element of the link annotation.</summary>
            <remarks>
            Represents Action element, a child of OnActivation element of the link annotation.
            Corresponds to the A key in the link annotation dictionary.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.AnnotObject.destination">
            <summary>Represents Dest element, a child element of link, GoTo, GoToR elements.</summary>
            <remarks>
            Represents Dest element, a child element of link, GoTo, GoToR elements.
            Corresponds to the Dest key in link annotation dictionary.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.AnnotObject.appearance">
            <summary>Represents appearance element,  a child element of stamp element.</summary>
            <remarks>
            Represents appearance element,  a child element of stamp element.
            Corresponds to the AP key in the annotation dictionary.
            Content model: Base64 encoded string.
            For more details see paragraph 6.5.1 in Xfdf document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.AnnotObject.defaultAppearance">
            <summary>Represents the defaultappearance element, a child of the caret and freetext elements.</summary>
            <remarks>
            Represents the defaultappearance element, a child of the caret and freetext elements.
            Corresponds to the DA key in the free text annotation dictionary.
            Content model: text string.
            For more details see paragraph 6.5.7 in Xfdf document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.AnnotObject.defaultStyle">
            <summary>Represents defaultstyle element, a child of the freetext element.</summary>
            <remarks>
            Represents defaultstyle element, a child of the freetext element.
            Corresponds to the DS key in the free text annotation dictionary.
            Content model : a text string.
            For more details see paragraph 6.5.9 in Xfdf document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.AnnotObject.borderStyleAlt">
            <summary>Represents the BorderStyleAlt element, a child of the link element.</summary>
            <remarks>
            Represents the BorderStyleAlt element, a child of the link element.
            Corresponds to the Border key in the common annotation dictionary.
            For more details see paragraph 6.5.3 in Xfdf document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.AnnotObject.vertices">
            <summary>Represents the string, containing vertices element, a child of the polygon and polyline elements.
                </summary>
            <remarks>
            Represents the string, containing vertices element, a child of the polygon and polyline elements.
            Corresponds to the Vertices key in the polygon or polyline annotation dictionary.
            For more details see paragraph 6.5.31 in Xfdf document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.AnnotObject.ref">
            <summary>
            The reference to the source
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>.
            </summary>
            <remarks>
            The reference to the source
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            . Used for attaching popups in case of reading data from pdf file.
            </remarks>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.GetName">
            <summary>Gets the string value of the type of annotation.</summary>
            <remarks>
            Gets the string value of the type of annotation. Possible values:
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.CARET"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.CIRCLE"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.FILEATTACHMENT"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.FREETEXT"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.HIGHLIGHT"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.INK"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.LINE"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.POLYGON"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.POLYLINE"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.SOUND"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.SQUARE"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.SQUIGGLY"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.STAMP"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.STRIKEOUT"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.TEXT"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.UNDERLINE"/>.
            </remarks>
            <returns>
            
            <see cref="T:System.String"/>
            value of the type of annotation
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.SetName(System.String)">
            <summary>Sets the string value of the type of annotation.</summary>
            <remarks>
            Sets the string value of the type of annotation. Possible values:
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.CARET"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.CIRCLE"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.FILEATTACHMENT"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.FREETEXT"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.HIGHLIGHT"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.INK"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.LINE"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.POLYGON"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.POLYLINE"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.SOUND"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.SQUARE"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.SQUIGGLY"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.STAMP"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.STRIKEOUT"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.TEXT"/>
            ,
            <see cref="F:iText.Forms.Xfdf.XfdfConstants.UNDERLINE"/>.
            </remarks>
            <param name="name">
            
            <see cref="T:System.String"/>
            value of the type of annotation
            </param>
            <returns>
            
            <see cref="T:iText.Forms.Xfdf.AnnotObject">annotation object</see>
            with set name
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.GetAttributes">
            <summary>Gets a list of all attributes of the annotation.</summary>
            <returns>
            
            <see cref="!:System.Collections.IList&lt;E&gt;">list</see>
            containing all
            <see cref="T:iText.Forms.Xfdf.AttributeObject">attribute objects</see>
            of the annotation
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.GetAttribute(System.String)">
            <summary>Finds the attribute by name in attributes list.</summary>
            <param name="name">The name of the attribute to look for.</param>
            <returns>
            
            <see cref="T:iText.Forms.Xfdf.AttributeObject"/>
            with the given name, or null, if no object with this name was found.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.GetAttributeValue(System.String)">
            <summary>Finds the attribute by name in attributes list and return its string value.</summary>
            <param name="name">The name of the attribute to look for.</param>
            <returns>
            the value of the
            <see cref="T:iText.Forms.Xfdf.AttributeObject"/>
            with the given name, or null, if no object with this name was found.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.GetPopup">
            <summary>Gets the popup annotation, an inner element of the annotation element.</summary>
            <returns>
            
            <see cref="T:iText.Forms.Xfdf.AnnotObject"/>
            representing the inner popup annotation
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.SetPopup(iText.Forms.Xfdf.AnnotObject)">
            <summary>Sets the popup annotation, an inner element of the annotation element.</summary>
            <param name="popup">
            
            <see cref="T:iText.Forms.Xfdf.AnnotObject">annotation object</see>
            representing inner popup annotation
            </param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.AnnotObject">annotation object</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.IsHasPopup">
            <summary>Gets the boolean, indicating if annotation has an inner popup element.</summary>
            <returns>true if annotation has an inner popup element, false otherwise</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.SetHasPopup(System.Boolean)">
            <summary>Sets the boolean, indicating if annotation has inner popup element.</summary>
            <param name="hasPopup">a boolean indicating if annotation has inner popup element</param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.AnnotObject">annotation object</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.GetContents">
            <summary>Gets the string value of contents tag in Xfdf document structure.</summary>
            <remarks>
            Gets the string value of contents tag in Xfdf document structure. Contents is a child of caret, circle,
            fileattachment, freetext, highlight, ink, line, polygon, polyline, sound, square, squiggly, stamp, strikeout,
            text, and underline elements.
            Corresponds to Contents key in annotation dictionary.
            Content model: a string or a rich text string.
            For more details see paragraph 6.5.4 in Xfdf document specification.
            </remarks>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            value of inner contents element of current annotation object
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.SetContents(iText.Kernel.Pdf.PdfString)">
            <summary>Sets the string value of contents tag in Xfdf document structure.</summary>
            <param name="contents">
            
            <see cref="T:iText.Kernel.Pdf.PdfString">string</see>
            value of inner contents element
            </param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.AnnotObject">annotation object</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.GetContentsRichText">
            <summary>Gets the string value of contents-richtext tag in Xfdf document structure.</summary>
            <remarks>
            Gets the string value of contents-richtext tag in Xfdf document structure. It is a child of caret, circle, fileattachment,
            freetext, highlight, ink, line, polygon, polyline, sound, square, squiggly, stamp, strikeout, text, and
            underline elements.
            Corresponds to RC key in annotation dictionary.
            Content model: text string.
            For more details see paragraph 6.5.5 in Xfdf document specification.
            </remarks>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            value of inner contents-richtext element of current annotation object
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.SetContentsRichText(iText.Kernel.Pdf.PdfString)">
            <summary>Sets the string value of contents-richtext tag in xfdf document structure.</summary>
            <param name="contentsRichRext">
            
            <see cref="T:iText.Kernel.Pdf.PdfString">rich text string</see>
            value of inner contents-richtext element
            </param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.AnnotObject">annotation object</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.GetAction">
            <summary>Gets Action element, a child of OnActivation element of the link annotation.</summary>
            <remarks>
            Gets Action element, a child of OnActivation element of the link annotation.
            Corresponds to the A key in the link annotation dictionary.
            </remarks>
            <returns>
            inner
            <see cref="T:iText.Forms.Xfdf.ActionObject">action object</see>
            of annotation object
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.SetAction(iText.Forms.Xfdf.ActionObject)">
            <summary>Sets Action element, a child of OnActivation element of the link annotation.</summary>
            <remarks>
            Sets Action element, a child of OnActivation element of the link annotation.
            Corresponds to the A key in the link annotation dictionary.
            </remarks>
            <param name="action">
            
            <see cref="T:iText.Forms.Xfdf.ActionObject">action object</see>
            , an inner element of annotation object
            </param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.AnnotObject">annotation object</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.AddAttribute(iText.Forms.Xfdf.AttributeObject)">
            <summary>
            Adds new
            <see cref="T:iText.Forms.Xfdf.AttributeObject"/>
            to the list of annotation attributes.
            </summary>
            <param name="attr">attribute to be added.</param>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.AddAttribute(System.String,System.Boolean)">
            <summary>Adds new attribute with given name and boolean value converted to string.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.AddAttribute(System.String,iText.Kernel.Pdf.PdfObject,System.Boolean)">
            <summary>Adds new attribute by given name and value.</summary>
            <remarks>Adds new attribute by given name and value. If required attribute is present, value of the attribute can't be null.
                </remarks>
            <param name="name">
            
            <see cref="T:System.String"/>
            attribute name
            </param>
            <param name="valueObject">
            
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            attribute value
            </param>
            <param name="required">boolean indicating if the attribute is required</param>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.AddFdfAttributes(System.Int32)">
            <summary>Adds page, required attribute of every annotation.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.GetDestination">
            <summary>Gets Dest element, a child element of link, GoTo, GoToR elements.</summary>
            <remarks>
            Gets Dest element, a child element of link, GoTo, GoToR elements.
            Corresponds to the Dest key in link annotation dictionary.
            </remarks>
            <returns>
            inner
            <see cref="T:iText.Forms.Xfdf.DestObject">destination object</see>
            of annotation object
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.SetDestination(iText.Forms.Xfdf.DestObject)">
            <summary>Sets Dest element, a child element of link, GoTo, GoToR elements.</summary>
            <remarks>
            Sets Dest element, a child element of link, GoTo, GoToR elements.
            Corresponds to the Dest key in link annotation dictionary.
            </remarks>
            <param name="destination">
            
            <see cref="T:iText.Forms.Xfdf.DestObject">destination object</see>
            , an inner element of annotation object
            </param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.AnnotObject">annotation object</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.GetAppearance">
            <summary>Gets the string value of the appearance element, a child element of stamp element.</summary>
            <remarks>
            Gets the string value of the appearance element, a child element of stamp element.
            Corresponds to the AP key in the annotation dictionary.
            Content model: Base64 encoded string.
            For more details see paragraph 6.5.1 in Xfdf document specification.
            </remarks>
            <returns>
            
            <see cref="T:System.String"/>
            value of inner appearance element
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.SetAppearance(System.String)">
            <summary>Gets the string value of the appearance element,  a child element of stamp element.</summary>
            <remarks>
            Gets the string value of the appearance element,  a child element of stamp element.
            Corresponds to the AP key in the annotation dictionary.
            Content model: Base64 encoded string.
            </remarks>
            <param name="appearance">
            
            <see cref="T:System.String"/>
            value of inner appearance element of annotation object
            </param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.AnnotObject">annotation object</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.GetDefaultAppearance">
            <summary>Gets the string value of the defaultappearance element, a child of the caret and freetext elements.
                </summary>
            <remarks>
            Gets the string value of the defaultappearance element, a child of the caret and freetext elements.
            Corresponds to the DA key in the free text annotation dictionary.
            Content model: text string.
            For more details see paragraph 6.5.7 in Xfdf document specification.
            </remarks>
            <returns>
            
            <see cref="T:System.String"/>
            value of inner deafultappearance element
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.SetDefaultAppearance(System.String)">
            <summary>Sets the string value of the defaultappearance element, a child of the caret and freetext elements.
                </summary>
            <remarks>
            Sets the string value of the defaultappearance element, a child of the caret and freetext elements.
            Corresponds to the DA key in the free text annotation dictionary.
            Content model: text string.
            </remarks>
            <param name="defaultAppearance">
            
            <see cref="T:System.String"/>
            value of inner defaultappearance element of annotation object
            </param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.AnnotObject">annotation object</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.GetDefaultStyle">
            <summary>Gets the string value of the defaultstyle element, a child of the freetext element.</summary>
            <remarks>
            Gets the string value of the defaultstyle element, a child of the freetext element.
            Corresponds to the DS key in the free text annotation dictionary.
            Content model : a text string.
            For more details see paragraph 6.5.9 in Xfdf document specification.
            </remarks>
            <returns>
            
            <see cref="T:System.String"/>
            value of inner defaultstyle element
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.SetDefaultStyle(System.String)">
            <summary>Sets the string value of the defaultstyle element, a child of the freetext element.</summary>
            <remarks>
            Sets the string value of the defaultstyle element, a child of the freetext element.
            Corresponds to the DS key in the free text annotation dictionary.
            Content model : a text string.
            </remarks>
            <param name="defaultStyle">
            
            <see cref="T:System.String"/>
            value of inner defaultstyle element of annotation object
            </param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.AnnotObject">annotation object</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.GetBorderStyleAlt">
            <summary>Gets the BorderStyleAlt element, a child of the link element.</summary>
            <remarks>
            Gets the BorderStyleAlt element, a child of the link element.
            Corresponds to the Border key in the common annotation dictionary.
            For more details see paragraph 6.5.3 in Xfdf document specification.
            </remarks>
            <returns>
            inner
            <see cref="T:iText.Forms.Xfdf.BorderStyleAltObject">BorderStyleAlt object</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.SetBorderStyleAlt(iText.Forms.Xfdf.BorderStyleAltObject)">
            <summary>Sets the BorderStyleAlt element, a child of the link element.</summary>
            <remarks>
            Sets the BorderStyleAlt element, a child of the link element.
            Corresponds to the Border key in the common annotation dictionary.
            </remarks>
            <param name="borderStyleAlt">
            inner
            <see cref="T:iText.Forms.Xfdf.BorderStyleAltObject">BorderStyleAlt object</see>
            </param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.AnnotObject">annotation object</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.GetVertices">
            <summary>Gets the string, containing vertices element, a child of the polygon and polyline elements.</summary>
            <remarks>
            Gets the string, containing vertices element, a child of the polygon and polyline elements.
            Corresponds to the Vertices key in the polygon or polyline annotation dictionary.
            For more details see paragraph 6.5.31 in Xfdf document specification.
            </remarks>
            <returns>
            
            <see cref="T:System.String"/>
            value of inner vertices element
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.SetVertices(System.String)">
            <summary>Sets the string, containing vertices element, a child of the polygon and polyline elements.</summary>
            <remarks>
            Sets the string, containing vertices element, a child of the polygon and polyline elements.
            Corresponds to the Vertices key in the polygon or polyline annotation dictionary.
            </remarks>
            <param name="vertices">
            
            <see cref="T:System.String"/>
            value of inner vertices element
            </param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.AnnotObject">annotation object</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.GetRef">
            <summary>
            Gets the reference to the source
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>.
            </summary>
            <remarks>
            Gets the reference to the source
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            . Used for attaching popups in case of reading data from pdf file.
            </remarks>
            <returns>
            an
            <see cref="T:iText.Kernel.Pdf.PdfIndirectReference"/>
            of the source annotation object.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotObject.SetRef(iText.Kernel.Pdf.PdfIndirectReference)">
            <summary>
            Sets the reference to the source
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>.
            </summary>
            <remarks>
            Sets the reference to the source
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            . Used for attaching popups in case of reading data from pdf file.
            </remarks>
            <param name="ref">
            
            <see cref="T:iText.Kernel.Pdf.PdfIndirectReference"/>
            of the source annotation object.
            </param>
            <returns>
            this
            <see cref="T:iText.Forms.Xfdf.AnnotObject"/>
            instance.
            </returns>
        </member>
        <member name="T:iText.Forms.Xfdf.AnnotsObject">
            <summary>Represent annots tag in xfdf document structure.</summary>
            <remarks>
            Represent annots tag in xfdf document structure.
            Content model: ( text | caret | freetext | fileattachment | highlight | ink | line | link
            | circle | square | polygon | polyline | sound | squiggly | stamp |
            strikeout | underline )*.
            Attributes: none.
            For more details see paragraph 6.4.1 in Xfdf specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.AnnotsObject.annotsList">
            <summary>Represents a list of children annotations.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotsObject.#ctor">
            <summary>Creates an instance with the empty list of children annotations.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotsObject.GetAnnotsList">
            <summary>Gets children annotations.</summary>
            <returns>
            a
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            <see cref="T:iText.Forms.Xfdf.AnnotObject"/>
            each representing a child annotation of this annots tag.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AnnotsObject.AddAnnot(iText.Forms.Xfdf.AnnotObject)">
            <summary>
            Adds a new
            <see cref="T:iText.Forms.Xfdf.AnnotObject"/>
            to the list of children annotations.
            </summary>
            <param name="annot">
            
            <see cref="T:iText.Forms.Xfdf.AnnotObject"/>
            containing info about pdf document annotation.
            </param>
            <returns>
            this
            <see cref="T:iText.Forms.Xfdf.AnnotsObject"/>
            instance.
            </returns>
        </member>
        <member name="T:iText.Forms.Xfdf.AttributeObject">
            <summary>Represents the attribute of any XFDF element.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.AttributeObject.#ctor(System.String,System.String)">
            <summary>Creates an instance with given attribute name and value.</summary>
            <param name="name">the name of the attribute, constrained by XML attributes specification.</param>
            <param name="value">the value of the attribute, constrained by XML attributes specification.</param>
        </member>
        <member name="M:iText.Forms.Xfdf.AttributeObject.GetName">
            <summary>Returns attribute name.</summary>
            <returns>a string representation of attribute name, case-sensitive as per XML specification.</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.AttributeObject.GetValue">
            <summary>Returns attribute value.</summary>
            <returns>a string representation of attribute value.</returns>
        </member>
        <member name="T:iText.Forms.Xfdf.BorderStyleAltObject">
            <summary>Represents the BorderStyleAlt element, a child of the link element.</summary>
            <remarks>
            Represents the BorderStyleAlt element, a child of the link element.
            Corresponds to the Border key in the common annotation dictionary.
            Content model: border style encoded in the format specified in the border style attributes.
            Required attributes: HCornerRadius, VCornerRadius, Width.
            Optional attributes: DashPattern.
            For more details see paragraph 6.5.3 in Xfdf document specification.
            For more details about attributes see paragraph 6.6.19 in Xfdf document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.BorderStyleAltObject.hCornerRadius">
            <summary>Number specifying the horizontal corner radius of the rectangular border.</summary>
            <remarks>
            Number specifying the horizontal corner radius of the rectangular border.
            Corresponds to array index 0 in the Border key in the common annotation dictionary.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.BorderStyleAltObject.vCornerRadius">
            <summary>Number specifying the vertical corner radius of the rectangular border.</summary>
            <remarks>
            Number specifying the vertical corner radius of the rectangular border.
            Corresponds to array index 1 in the Border key in the common annotation dictionary.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.BorderStyleAltObject.width">
            <summary>Number specifying the width of the rectangular border.</summary>
            <remarks>
            Number specifying the width of the rectangular border.
            Corresponds to array index 2 in the Border key in the common annotation dictionary.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.BorderStyleAltObject.dashPattern">
            <summary>An array of numbers specifying the pattern of dashes and gaps of the border.</summary>
            <remarks>
            An array of numbers specifying the pattern of dashes and gaps of the border.
            Corresponds to array index 3 in the Border key in the common annotation dictionary.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.BorderStyleAltObject.content">
            <summary>Encoded border style string.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.BorderStyleAltObject.#ctor(System.Single,System.Single,System.Single)">
            <summary>Creates an instance that encapsulates BorderStyleAlt XFDF element data.</summary>
            <param name="hCornerRadius">a float value specifying the horizontal corner radius of the rectangular border.
                </param>
            <param name="vCornerRadius">a float value specifying the vertical corner radius of the rectangular border.
                </param>
            <param name="width">a float value specifying the width of the rectangular border.</param>
        </member>
        <member name="M:iText.Forms.Xfdf.BorderStyleAltObject.GetHCornerRadius">
            <summary>Gets the horizontal corner radius of the rectangular border.</summary>
            <remarks>
            Gets the horizontal corner radius of the rectangular border.
            Corresponds to array index 0 in the Border key in the common annotation dictionary.
            </remarks>
            <returns>a float value specifying the horizontal corner radius.</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.BorderStyleAltObject.GetVCornerRadius">
            <summary>Gets the vertical corner radius of the rectangular border.</summary>
            <remarks>
            Gets the vertical corner radius of the rectangular border.
            Corresponds to array index 1 in the Border key in the common annotation dictionary.
            </remarks>
            <returns>a float value specifying the vertical corner radius.</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.BorderStyleAltObject.GetWidth">
            <summary>Gets the width of the rectangular border.</summary>
            <remarks>
            Gets the width of the rectangular border.
            Corresponds to array index 2 in the Border key in the common annotation dictionary.
            </remarks>
            <returns>a float value specifying the width of the border.</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.BorderStyleAltObject.GetDashPattern">
            <summary>Gets the dash pattern of the border.</summary>
            <remarks>
            Gets the dash pattern of the border.
            Corresponds to array index 3 in the Border key in the common annotation dictionary.
            </remarks>
            <returns>an array of numbers specifying the pattern of dashes and gaps of the border.</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.BorderStyleAltObject.SetDashPattern(System.Single[])">
            <summary>Sets the dash pattern of the border.</summary>
            <remarks>
            Sets the dash pattern of the border.
            Corresponds to array index 3 in the Border key in the common annotation dictionary.
            </remarks>
            <param name="dashPattern">an array of numbers specifying the pattern of dashes and gaps of the border.</param>
            <returns>
            this
            <see cref="T:iText.Forms.Xfdf.BorderStyleAltObject"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.BorderStyleAltObject.GetContent">
            <summary>Gets border style.</summary>
            <returns>an encoded border style as string.</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.BorderStyleAltObject.SetContent(System.String)">
            <summary>Sets border style.</summary>
            <param name="content">an encoded border style as string.</param>
            <returns>
            this
            <see cref="T:iText.Forms.Xfdf.BorderStyleAltObject"/>
            instance.
            </returns>
        </member>
        <member name="T:iText.Forms.Xfdf.DestObject">
            <summary>Represents Dest element, a child of the link, GoTo, and GoToR elements.</summary>
            <remarks>
            Represents Dest element, a child of the link, GoTo, and GoToR elements.
            Corresponds to the Dest key in the link annotations dictionary.
            For more details see paragraph 6.5.10 in XFDF document specification.
            Content model: ( Named | XYZ | Fit | FitH | FitV | FitR | FitB | FitBH | FitBV )
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.DestObject.name">
            <summary>Represents Name attribute of Named element, a child of Dest element.</summary>
            <remarks>
            Represents Name attribute of Named element, a child of Dest element.
            Allows a destination to be referred to indirectly by means of a name object or a byte string.
            For more details see paragraph 6.5.25 in XFDF document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.DestObject.xyz">
            <summary>Represents the XYZ element, a child of the Dest element.</summary>
            <remarks>
            Represents the XYZ element, a child of the Dest element.
            Corresponds to the XYZ key in the destination syntax.
            Required attributes: Page, Left, Bottom, Right, Top.
            For more details see paragraph 6.5.32 in XFDF document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.DestObject.fit">
            <summary>Represents the Fit element, a child of the Dest element.</summary>
            <remarks>
            Represents the Fit element, a child of the Dest element.
            Corresponds to the Fit key in the destination syntax.
            Required attributes: Page.
            For more details see paragraph 6.5.13 in XFDF document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.DestObject.fitH">
            <summary>Represents the FitH element, a child of the Dest element.</summary>
            <remarks>
            Represents the FitH element, a child of the Dest element.
            Corresponds to the FitH key in the destination syntax.
            Required attributes: Page, Top.
            For more details see paragraph 6.5.17 in XFDF document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.DestObject.fitV">
            <summary>Represents the FitV element, a child of the Dest element.</summary>
            <remarks>
            Represents the FitV element, a child of the Dest element.
            Corresponds to the FitV key in the destination syntax.
            Required attributes: Page, Left.
            For more details see paragraph 6.5.19 in XFDF document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.DestObject.fitR">
            <summary>Represents the FitR element, a child of the Dest element.</summary>
            <remarks>
            Represents the FitR element, a child of the Dest element.
            Corresponds to the FitR key in the destination syntax.
            Required attributes: Page, Left, Bottom, Right, Top.
            For more details see paragraph 6.5.18 in XFDF document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.DestObject.fitB">
            <summary>Represents the FitB element, a child of the Dest element.</summary>
            <remarks>
            Represents the FitB element, a child of the Dest element.
            Corresponds to the FitB key in the destination syntax.
            Required attributes: Page.
            For more details see paragraph 6.5.14 in XFDF document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.DestObject.fitBH">
            <summary>Represents the FitBH element, a child of the Dest element.</summary>
            <remarks>
            Represents the FitBH element, a child of the Dest element.
            Corresponds to the FitBH key in the destination syntax.
            Required attributes: Page, Top.
            For more details see paragraph 6.5.15 in XFDF document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.DestObject.fitBV">
            <summary>Represents the FitBV element, a child of the Dest element.</summary>
            <remarks>
            Represents the FitBV element, a child of the Dest element.
            Corresponds to the FitBV key in the destination syntax.
            Required attributes: Page, Left.
            For more details see paragraph 6.5.16 in XFDF document specification.
            </remarks>
        </member>
        <member name="M:iText.Forms.Xfdf.DestObject.GetName">
            <summary>Gets the Name attribute of Named element, a child of Dest element.</summary>
            <remarks>
            Gets the Name attribute of Named element, a child of Dest element.
            Allows a destination to be referred to indirectly by means of a name object or a byte string.
            For more details see paragraph 6.5.25 in XFDF document specification.
            </remarks>
            <returns>string value of the Name attribute.</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.DestObject.SetName(System.String)">
            <summary>Sets the Name attribute of Named element, a child of Dest element.</summary>
            <remarks>
            Sets the Name attribute of Named element, a child of Dest element.
            Allows a destination to be referred to indirectly by means of a name object or a byte string.
            </remarks>
            <param name="name">string value of the Name attribute.</param>
            <returns>
            this
            <see cref="T:iText.Forms.Xfdf.DestObject"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.DestObject.GetXyz">
            <summary>Gets the XYZ element, a child of the Dest element.</summary>
            <remarks>
            Gets the XYZ element, a child of the Dest element.
            Corresponds to the XYZ key in the destination syntax.
            Required attributes: Page, Left, Bottom, Right, Top.
            For more details see paragraph 6.5.32 in XFDF document specification.
            </remarks>
            <returns>
            a
            <see cref="T:iText.Forms.Xfdf.FitObject"/>
            that represents XYZ of Dest element.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.DestObject.SetXyz(iText.Forms.Xfdf.FitObject)">
            <summary>Sets the XYZ element, a child of the Dest element.</summary>
            <remarks>
            Sets the XYZ element, a child of the Dest element.
            Corresponds to the XYZ key in the destination syntax.
            Required attributes: Page, Left, Bottom, Right, Top.
            </remarks>
            <param name="xyz">
            a
            <see cref="T:iText.Forms.Xfdf.FitObject"/>
            that represents XYZ of Dest element.
            </param>
            <returns>
            this
            <see cref="T:iText.Forms.Xfdf.DestObject"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.DestObject.GetFit">
            <summary>Gets the Fit element, a child of the Dest element.</summary>
            <remarks>
            Gets the Fit element, a child of the Dest element.
            Corresponds to the Fit key in the destination syntax.
            Required attributes: Page.
            For more details see paragraph 6.5.13 in XFDF document specification.
            </remarks>
            <returns>
            a
            <see cref="T:iText.Forms.Xfdf.FitObject"/>
            that represents Fit of Dest element.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.DestObject.SetFit(iText.Forms.Xfdf.FitObject)">
            <summary>Sets the Fit element, a child of the Dest element.</summary>
            <remarks>
            Sets the Fit element, a child of the Dest element.
            Corresponds to the Fit key in the destination syntax.
            Required attributes: Page.
            </remarks>
            <param name="fit">
            a
            <see cref="T:iText.Forms.Xfdf.FitObject"/>
            that represents Fit of Dest element.
            </param>
            <returns>
            this
            <see cref="T:iText.Forms.Xfdf.DestObject"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.DestObject.GetFitH">
            <summary>Gets the FitH element, a child of the Dest element.</summary>
            <remarks>
            Gets the FitH element, a child of the Dest element.
            Corresponds to the FitH key in the destination syntax.
            Required attributes: Page, Top.
            For more details see paragraph 6.5.17 in XFDF document specification.
            </remarks>
            <returns>
            a
            <see cref="T:iText.Forms.Xfdf.FitObject"/>
            that represents FitH of Dest element.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.DestObject.SetFitH(iText.Forms.Xfdf.FitObject)">
            <summary>Sets the FitH element, a child of the Dest element.</summary>
            <remarks>
            Sets the FitH element, a child of the Dest element.
            Corresponds to the FitH key in the destination syntax.
            Required attributes: Page, Top.
            </remarks>
            <param name="fitH">
            a
            <see cref="T:iText.Forms.Xfdf.FitObject"/>
            that represents FitH of Dest element.
            </param>
            <returns>
            this
            <see cref="T:iText.Forms.Xfdf.DestObject"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.DestObject.GetFitV">
            <summary>Gets the FitV element, a child of the Dest element.</summary>
            <remarks>
            Gets the FitV element, a child of the Dest element.
            Corresponds to the FitV key in the destination syntax.
            Required attributes: Page, Left.
            For more details see paragraph 6.5.19 in XFDF document specification.
            </remarks>
            <returns>
            a
            <see cref="T:iText.Forms.Xfdf.FitObject"/>
            that represents FitV of Dest element.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.DestObject.SetFitV(iText.Forms.Xfdf.FitObject)">
            <summary>Sets the FitV element, a child of the Dest element.</summary>
            <remarks>
            Sets the FitV element, a child of the Dest element.
            Corresponds to the FitV key in the destination syntax.
            Required attributes: Page, Left.
            </remarks>
            <param name="fitV">
            a
            <see cref="T:iText.Forms.Xfdf.FitObject"/>
            that represents FitV of Dest element.
            </param>
            <returns>
            this
            <see cref="T:iText.Forms.Xfdf.DestObject"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.DestObject.GetFitR">
            <summary>Gets the FitR element, a child of the Dest element.</summary>
            <remarks>
            Gets the FitR element, a child of the Dest element.
            Corresponds to the FitR key in the destination syntax.
            Required attributes: Page, Left, Bottom, Right, Top.
            For more details see paragraph 6.5.18 in XFDF document specification.
            </remarks>
            <returns>
            a
            <see cref="T:iText.Forms.Xfdf.FitObject"/>
            that represents FitR of Dest element.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.DestObject.SetFitR(iText.Forms.Xfdf.FitObject)">
            <summary>Sets the FitR element, a child of the Dest element.</summary>
            <remarks>
            Sets the FitR element, a child of the Dest element.
            Corresponds to the FitR key in the destination syntax.
            Required attributes: Page, Left, Bottom, Right, Top.
            </remarks>
            <param name="fitR">
            a
            <see cref="T:iText.Forms.Xfdf.FitObject"/>
            that represents FitR of Dest element.
            </param>
            <returns>
            this
            <see cref="T:iText.Forms.Xfdf.DestObject"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.DestObject.GetFitB">
            <summary>Sets the FitB element, a child of the Dest element.</summary>
            <remarks>
            Sets the FitB element, a child of the Dest element.
            Corresponds to the FitB key in the destination syntax.
            Required attributes: Page.
            For more details see paragraph 6.5.14 in XFDF document specification.
            </remarks>
            <returns>
            a
            <see cref="T:iText.Forms.Xfdf.FitObject"/>
            that represents FitB of Dest element.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.DestObject.SetFitB(iText.Forms.Xfdf.FitObject)">
            <summary>Gets the FitB element, a child of the Dest element.</summary>
            <remarks>
            Gets the FitB element, a child of the Dest element.
            Corresponds to the FitB key in the destination syntax.
            Required attributes: Page.
            For more details see paragraph 6.5.14 in XFDF document specification.
            </remarks>
            <param name="fitB">
            a
            <see cref="T:iText.Forms.Xfdf.FitObject"/>
            that represents FitB of Dest element.
            </param>
            <returns>
            this
            <see cref="T:iText.Forms.Xfdf.DestObject"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.DestObject.GetFitBH">
            <summary>Sets the FitBH element, a child of the Dest element.</summary>
            <remarks>
            Sets the FitBH element, a child of the Dest element.
            Corresponds to the FitBH key in the destination syntax.
            Required attributes: Page, Top.
            For more details see paragraph 6.5.15 in XFDF document specification.
            </remarks>
            <returns>
            a
            <see cref="T:iText.Forms.Xfdf.FitObject"/>
            that represents FitBH of Dest element.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.DestObject.SetFitBH(iText.Forms.Xfdf.FitObject)">
            <summary>Gets the FitBH element, a child of the Dest element.</summary>
            <remarks>
            Gets the FitBH element, a child of the Dest element.
            Corresponds to the FitBH key in the destination syntax.
            Required attributes: Page, Top.
            </remarks>
            <param name="fitBH">
            a
            <see cref="T:iText.Forms.Xfdf.FitObject"/>
            that represents FitBH of Dest element.
            </param>
            <returns>
            this
            <see cref="T:iText.Forms.Xfdf.DestObject"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.DestObject.GetFitBV">
            <summary>Sets the FitBV element, a child of the Dest element.</summary>
            <remarks>
            Sets the FitBV element, a child of the Dest element.
            Corresponds to the FitBV key in the destination syntax.
            Required attributes: Page, Left.
            For more details see paragraph 6.5.16 in XFDF document specification.
            </remarks>
            <returns>
            a
            <see cref="T:iText.Forms.Xfdf.FitObject"/>
            that represents FitBV of Dest element.
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.DestObject.SetFitBV(iText.Forms.Xfdf.FitObject)">
            <summary>Sets the FitBV element, a child of the Dest element.</summary>
            <remarks>
            Sets the FitBV element, a child of the Dest element.
            Corresponds to the FitBV key in the destination syntax.
            Required attributes: Page, Left.
            </remarks>
            <param name="fitBV">
            a
            <see cref="T:iText.Forms.Xfdf.FitObject"/>
            that represents FitBV of Dest element.
            </param>
            <returns>
            this
            <see cref="T:iText.Forms.Xfdf.DestObject"/>
            instance.
            </returns>
        </member>
        <member name="T:iText.Forms.Xfdf.ElementContentEncodingFormat">
            <summary>Represents encoding attribute of data or resource elements (children of fileattachment and sound elements).
                </summary>
        </member>
        <member name="T:iText.Forms.Xfdf.FieldObject">
            <summary>Represents the field element, a child of the fields and field elements.</summary>
            <remarks>
            Represents the field element, a child of the fields and field elements.
            The field element corresponds to a form field.
            Content model: ( field* | value* | ( value? &amp; value-richtext? )).
            Required attributes: name.
            For more details see paragraph 6.3.2 in XFDF document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.FieldObject.name">
            <summary>Represents the name attribute of the field element.</summary>
            <remarks>
            Represents the name attribute of the field element.
            Corresponds to the T key in the field dictionary.
            In a hierarchical form field, the name is the partial field name.
            For more details see paragraph 6.3.2.2 in XFDF document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.FieldObject.value">
            <summary>
            Represents the value element, a child of the field element and contains the field's value, whose format may
            vary depending on the field type.
            </summary>
            <remarks>
            Represents the value element, a child of the field element and contains the field's value, whose format may
            vary depending on the field type.
            Corresponds to the V key in the FDF field dictionary.
            Content model: text string.
            For more details see paragraph 6.3.3 in XFDF document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.FieldObject.richTextValue">
            <summary>
            Represents the value-richtext element, a child of the field element and contains the field's value formatted as a
            rich text string.
            </summary>
            <remarks>
            Represents the value-richtext element, a child of the field element and contains the field's value formatted as a
            rich text string.
            Corresponds to the RV key in the variable text field dictionary.
            Content model: text strign or rich text string.
            Attributes: none.
            For more details see paragraph 6.3.4 in XFDF document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.FieldObject.containsRichText">
            <summary>Indicates if a value-richtext element is present inside the field.</summary>
        </member>
        <member name="F:iText.Forms.Xfdf.FieldObject.parent">
            <summary>Parent field of current field.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.FieldObject.GetName">
            <summary>Gets the string value of the name attribute of the field element.</summary>
            <remarks>
            Gets the string value of the name attribute of the field element.
            Corresponds to the T key in the field dictionary.
            In a hierarchical form field, the name is the partial field name.
            For more details see paragraph 6.3.2.2 in XFDF document specification.
            </remarks>
            <returns>
            
            <see cref="T:System.String"/>
            value of field name attribute
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.FieldObject.SetName(System.String)">
            <summary>Sets the string value of the name attribute of the field element.</summary>
            <remarks>
            Sets the string value of the name attribute of the field element.
            Corresponds to the T key in the field dictionary.
            In a hierarchical form field, the name is the partial field name.
            </remarks>
            <param name="name">
            
            <see cref="T:System.String"/>
            value of field name attribute
            </param>
        </member>
        <member name="M:iText.Forms.Xfdf.FieldObject.GetValue">
            <summary>
            Gets the string representation of the value element, a child of the field element and contains the field's value,
            whose format may vary depending on the field type.
            </summary>
            <remarks>
            Gets the string representation of the value element, a child of the field element and contains the field's value,
            whose format may vary depending on the field type.
            Corresponds to the V key in the FDF field dictionary.
            For more details see paragraph 6.3.3 in XFDF document specification.
            </remarks>
            <returns>
            
            <see cref="T:System.String"/>
            representation of inner value element of the field
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.FieldObject.SetValue(System.String)">
            <summary>
            Sets the string representation of the value element, a child of the field element and contains the field's value,
            whose format may vary depending on the field type.
            </summary>
            <remarks>
            Sets the string representation of the value element, a child of the field element and contains the field's value,
            whose format may vary depending on the field type.
            Corresponds to the V key in the FDF field dictionary.
            </remarks>
            <param name="value">
            
            <see cref="T:System.String"/>
            representation of inner value element of the field
            </param>
        </member>
        <member name="M:iText.Forms.Xfdf.FieldObject.GetRichTextValue">
            <summary>
            Gets the string representation of the value-richtext element, a child of the field element and contains the
            field's value formatted as a rich text string.
            </summary>
            <remarks>
            Gets the string representation of the value-richtext element, a child of the field element and contains the
            field's value formatted as a rich text string.
            Corresponds to the RV key in the variable text field dictionary.
            Content model: text strign or rich text string.
            For more details see paragraph 6.3.4 in XFDF document specification.
            </remarks>
            <returns>
            
            <see cref="T:System.String"/>
            representation of inner value-richtext element of the field
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.FieldObject.SetRichTextValue(System.String)">
            <summary>
            Sets the string representation of the value-richtext element, a child of the field element and contains the
            field's value formatted as a rich text string.
            </summary>
            <remarks>
            Sets the string representation of the value-richtext element, a child of the field element and contains the
            field's value formatted as a rich text string.
            Corresponds to the RV key in the variable text field dictionary.
            Content model: text string or rich text string.
            </remarks>
            <param name="richTextValue">
            
            <see cref="T:System.String"/>
            representation of inner value-richtext element of the field
            </param>
        </member>
        <member name="M:iText.Forms.Xfdf.FieldObject.IsContainsRichText">
            <summary>Gets a boolean indicating if a value-richtext element is present inside the field.</summary>
            <returns>true if a value-richtext element is present inside the field, false otherwise</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.FieldObject.SetContainsRichText(System.Boolean)">
            <summary>Sets a boolean indicating if a value-richtext element is present inside the field.</summary>
            <param name="containsRichText">a boolean indicating if a value-richtext element is present inside the field
                </param>
        </member>
        <member name="M:iText.Forms.Xfdf.FieldObject.GetParent">
            <summary>Gets a parent field of current field.</summary>
            <returns>
            parent
            <see cref="T:iText.Forms.Xfdf.FieldObject">field object</see>
            of the current field
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.FieldObject.SetParent(iText.Forms.Xfdf.FieldObject)">
            <summary>Sets a parent field of current field.</summary>
            <param name="parent">
            
            <see cref="T:iText.Forms.Xfdf.FieldObject">field object</see>
            that is a parent of the current field
            </param>
        </member>
        <member name="T:iText.Forms.Xfdf.FieldsObject">
            <summary>Represents the fields element, a child of the xfdf element and is the container for form field elements.
                </summary>
            <remarks>
            Represents the fields element, a child of the xfdf element and is the container for form field elements.
            Content model: ( field* ).
            Attributes: none.
            For more details see paragraph 6.3.1 in Xfdf specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.FieldsObject.fieldList">
            <summary>Represents a list of children fields</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.FieldsObject.GetFieldList">
            <summary>Gets a list of children fields</summary>
            <returns>
            
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            containing all children
            <see cref="T:iText.Forms.Xfdf.FieldObject">field objects</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.FieldsObject.AddField(iText.Forms.Xfdf.FieldObject)">
            <summary>Adds a new field to the list.</summary>
            <param name="field">FieldObject containing the info about the form field.</param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.FieldsObject">fields object</see>
            </returns>
        </member>
        <member name="T:iText.Forms.Xfdf.FitObject">
            <summary>Represent Fit, a child of the Dest element.</summary>
            <remarks>
            Represent Fit, a child of the Dest element.
            Content model: none.
            Attributes: depends of type of Fit (FitH, FitB, FitV etc.).
            For more details see paragraphs 6.5.13-6.5.19, 6.6.23 in Xfdf specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.FitObject.page">
            <summary>Represents the page displayed by current Fit element.</summary>
            <remarks>
            Represents the page displayed by current Fit element.
            Attribute of Fit, FitB, FitBH, FitBV, FitH, FitR, FitV, XYZ elements.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.FitObject.top">
            <summary>Vertical coordinate positioned at the top edge of the window.</summary>
        </member>
        <member name="F:iText.Forms.Xfdf.FitObject.bottom">
            <summary>Vertical coordinate positioned at the bottom edge of the window.</summary>
        </member>
        <member name="F:iText.Forms.Xfdf.FitObject.left">
            <summary>Horizontal coordinate positioned at the left edge of the window.</summary>
        </member>
        <member name="F:iText.Forms.Xfdf.FitObject.right">
            <summary>Horizontal coordinate positioned at the right edge of the window.</summary>
        </member>
        <member name="F:iText.Forms.Xfdf.FitObject.zoom">
            <summary>Corresponds to the zoom object in the destination syntax.</summary>
            <remarks>
            Corresponds to the zoom object in the destination syntax.
            Attribute of XYZ object.
            </remarks>
        </member>
        <member name="M:iText.Forms.Xfdf.FitObject.GetPage">
            <summary>Gets the PdfObject representing the page displayed by current Fit element.</summary>
            <remarks>
            Gets the PdfObject representing the page displayed by current Fit element.
            Attribute of Fit, FitB, FitBH, FitBV, FitH, FitR, FitV, XYZ elements.
            </remarks>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfObject">page</see>
            of the current Fit element
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.FitObject.GetTop">
            <summary>Gets a float vertical coordinate positioned at the top edge of the window.</summary>
            <returns>top vertical coordinate</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.FitObject.SetTop(System.Single)">
            <summary>Sets a float vertical coordinate positioned at the top edge of the window.</summary>
            <param name="top">vertical coordinate value</param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.FitObject">fit object</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.FitObject.GetLeft">
            <summary>Gets a float horizontal coordinate positioned at the left edge of the window.</summary>
            <returns>left horizontal coordinate</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.FitObject.SetLeft(System.Single)">
            <summary>Sets a float horizontal coordinate positioned at the left edge of the window.</summary>
            <param name="left">horizontal coordinate value</param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.FitObject">fit object</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.FitObject.GetBottom">
            <summary>Gets a float vertical coordinate positioned at the bottom edge of the window.</summary>
            <returns>bottom vertical coordinate</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.FitObject.SetBottom(System.Single)">
            <summary>Sets a float vertical coordinate positioned at the bottom edge of the window.</summary>
            <param name="bottom">vertical coordinate value</param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.FitObject">fit object</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.FitObject.GetRight">
            <summary>Gets a float horizontal coordinate positioned at the right edge of the window.</summary>
            <returns>right horizontal coordinate</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.FitObject.SetRight(System.Single)">
            <summary>Sets a float horizontal coordinate positioned at the right edge of the window.</summary>
            <param name="right">horizontal coordinate</param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.FitObject">fit object</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.FitObject.GetZoom">
            <summary>Gets a float representing the zoom ratio.</summary>
            <remarks>
            Gets a float representing the zoom ratio.
            Attribute of XYZ object.
            </remarks>
            <returns>zoom ratio value</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.FitObject.SetZoom(System.Single)">
            <summary>Sets a float representing the zoom ratio.</summary>
            <remarks>
            Sets a float representing the zoom ratio.
            Attribute of XYZ object.
            </remarks>
            <param name="zoom">ratio value</param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.FitObject">fit object</see>
            </returns>
        </member>
        <member name="T:iText.Forms.Xfdf.FObject">
            <summary>Represents f element, child of the xfdf element.</summary>
            <remarks>
            Represents f element, child of the xfdf element.
            Corresponds to the F key in the file dictionary.
            Specifies the source file or target file: the PDF document that this XFDF file was exported from or is intended to be
            imported into.
            Attributes: href.
            For more details see paragraph 6.2.2 in Xfdf document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.FObject.href">
            <summary>The name of the source or target file.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.FObject.GetHref">
            <summary>Gets the name of the source or target file.</summary>
            <returns>the name of the source or target file</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.FObject.SetHref(System.String)">
            <summary>Sets the name of the source or target file.</summary>
            <param name="href">the name of the source or target file</param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.FObject">f object</see>
            </returns>
        </member>
        <member name="T:iText.Forms.Xfdf.IdsObject">
            <summary>Represents ids element, child of the xfdf element.</summary>
            <remarks>
            Represents ids element, child of the xfdf element.
            Corresponds to the ID key in the file dictionary.
            The two attributes are file identifiers for the source or target file designated by the f element, taken
            from the ID entry in the file’s trailer dictionary.
            Attributes: original, modified.
            For more details see paragraph 6.2.3 in Xfdf document specification.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.IdsObject.original">
            <summary>
            This attribute corresponds to the permanent identifier which
            is based on the contents of the file at the time it was originally created.
            </summary>
            <remarks>
            This attribute corresponds to the permanent identifier which
            is based on the contents of the file at the time it was originally created.
            This value does not change when the file is incrementally updated.
            The value shall be a hexadecimal number.
            A common value for this is an MD5 checksum.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.IdsObject.modified">
            <summary>
            The attribute contains a unique identifier for the
            modified version of the pdf and corresponding xfdf document.
            </summary>
            <remarks>
            The attribute contains a unique identifier for the
            modified version of the pdf and corresponding xfdf document. The
            modified attribute corresponds to the changing identifier that is based
            on the file's contents at the time it was last updated.
            The value shall be a hexadecimal number.
            A common value for this is an MD5 checksum.
            </remarks>
        </member>
        <member name="M:iText.Forms.Xfdf.IdsObject.GetOriginal">
            <summary>
            Gets the string value of the permanent identifier which
            is based on the contents of the file at the time it was originally created.
            </summary>
            <remarks>
            Gets the string value of the permanent identifier which
            is based on the contents of the file at the time it was originally created.
            This value does not change when the file is incrementally updated.
            The value shall be a hexadecimal number.
            </remarks>
            <returns>the permanent identifier value</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.IdsObject.SetOriginal(System.String)">
            <summary>
            Sets the string value of the permanent identifier which
            is based on the contents of the file at the time it was originally created.
            </summary>
            <remarks>
            Sets the string value of the permanent identifier which
            is based on the contents of the file at the time it was originally created.
            This value does not change when the file is incrementally updated.
            The value shall be a hexadecimal number.
            A common value for this is an MD5 checksum.
            </remarks>
            <param name="original">the permanent identifier value</param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.IdsObject">ids object</see>
            </returns>
        </member>
        <member name="M:iText.Forms.Xfdf.IdsObject.GetModified">
            <summary>
            Gets the string value of the unique identifier for the
            modified version of the pdf and corresponding xfdf document.
            </summary>
            <remarks>
            Gets the string value of the unique identifier for the
            modified version of the pdf and corresponding xfdf document. The
            modified attribute corresponds to the changing identifier that is based
            on the file's contents at the time it was last updated.
            The value shall be a hexadecimal number.
            </remarks>
            <returns>the unique identifier value</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.IdsObject.SetModified(System.String)">
            <summary>
            Sets the string value of the unique identifier for the
            modified version of the pdf and corresponding xfdf document.
            </summary>
            <remarks>
            Sets the string value of the unique identifier for the
            modified version of the pdf and corresponding xfdf document. The
            modified attribute corresponds to the changing identifier that is based
            on the file's contents at the time it was last updated.
            The value shall be a hexadecimal number.
            A common value for this is an MD5 checksum.
            </remarks>
            <param name="modified">the unique identifier value</param>
            <returns>
            current
            <see cref="T:iText.Forms.Xfdf.IdsObject">ids object</see>
            </returns>
        </member>
        <member name="T:iText.Forms.Xfdf.Mode">
            <summary>Represents the mode attribute of data and resource elements.</summary>
            <remarks>
            Represents the mode attribute of data and resource elements.
            Does not correspond to a PDF key.
            </remarks>
        </member>
        <member name="T:iText.Forms.Xfdf.XfdfConstants">
            <summary>Class containing constants to be used in XFDF processing.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfFileUtils.CreateNewXfdfDocument">
            <summary>Creates a new xml-styled document for writing xfdf info.</summary>
            <remarks>Creates a new xml-styled document for writing xfdf info.</remarks>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfFileUtils.CreateXfdfDocumentFromStream(System.IO.Stream)">
            <summary>Creates a new xfdf document based on given input stream.</summary>
            <param name="inputStream"> the stream containing xfdf info.</param>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfFileUtils.SaveXfdfDocumentToFile(System.Xml.XmlDocument,System.IO.Stream)">
            <summary>Saves the info from output stream to xml-styled document.</summary>
            <param name="document"> the document to save info to.</param>
            <param name=" outputStream"> the stream containing xfdf info.</param>
        </member>
        <member name="T:iText.Forms.Xfdf.XfdfObject">
            <summary>Represents xfdf element, the top level element in an xfdf document.</summary>
            <remarks>
            Represents xfdf element, the top level element in an xfdf document.
            For more details see paragraph 6.2.1 in Xfdf document specification.
            Content model: ( f? &amp; ids? &amp; fields? &amp; annots? )
            Attributes: xml:space, xmlns.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.XfdfObject.f">
            <summary>Represents f element, child of the xfdf element.</summary>
            <remarks>
            Represents f element, child of the xfdf element.
            Corresponds to the F key in the file dictionary.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.XfdfObject.ids">
            <summary>Represents ids element, a child of the xfdf element.</summary>
            <remarks>
            Represents ids element, a child of the xfdf element.
            Corresponds to the ID key in the file dictionary.
            </remarks>
        </member>
        <member name="F:iText.Forms.Xfdf.XfdfObject.fields">
            <summary>Represents the fields element, a child of the xfdf element and is the container for form field elements.
                </summary>
        </member>
        <member name="F:iText.Forms.Xfdf.XfdfObject.annots">
            <summary>Represent annots element, a child of the xfdf element and is the container for annot elements.</summary>
        </member>
        <member name="F:iText.Forms.Xfdf.XfdfObject.attributes">
            <summary>A list of attributes of xfdf object.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObject.GetF">
            <summary>Gets the f element, child of the xfdf element.</summary>
            <remarks>
            Gets the f element, child of the xfdf element.
            Corresponds to the F key in the file dictionary.
            </remarks>
            <returns>the f element</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObject.SetF(iText.Forms.Xfdf.FObject)">
            <summary>Sets f element, child of the xfdf element.</summary>
            <remarks>
            Sets f element, child of the xfdf element.
            Corresponds to the F key in the file dictionary.
            </remarks>
            <param name="f">element</param>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObject.GetIds">
            <summary>Gets the ids element, child of the xfdf element.</summary>
            <remarks>
            Gets the ids element, child of the xfdf element.
            Corresponds to the ID key in the file dictionary.
            </remarks>
            <returns>the ids element</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObject.SetIds(iText.Forms.Xfdf.IdsObject)">
            <summary>Sets ids element, child of the xfdf element.</summary>
            <remarks>
            Sets ids element, child of the xfdf element.
            Corresponds to the ID key in the file dictionary.
            </remarks>
            <param name="ids">element</param>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObject.GetFields">
            <summary>Gets the fields element, a child of the xfdf element and is the container for form field elements.
                </summary>
            <returns>the fields element</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObject.SetFields(iText.Forms.Xfdf.FieldsObject)">
            <summary>Sets fields element, a child of the xfdf element and is the container for form field elements.</summary>
            <param name="fields">element</param>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObject.GetAnnots">
            <summary>Gets the annots element, a child of the xfdf element and is the container for annot elements.</summary>
            <returns>the annots element</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObject.SetAnnots(iText.Forms.Xfdf.AnnotsObject)">
            <summary>Sets the annots element, a child of the xfdf element and is the container for annot elements.</summary>
            <param name="annots">element</param>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObject.GetAttributes">
            <summary>Gets the list of attributes of xfdf object.</summary>
            <returns>the list of attributes</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObject.SetAttributes(System.Collections.Generic.IList{iText.Forms.Xfdf.AttributeObject})">
            <summary>Sets the list of attributes of xfdf object.</summary>
            <param name="attributes">list of attributes objects</param>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObject.MergeToPdf(iText.Kernel.Pdf.PdfDocument,System.String)">
            <summary>Merges info from XfdfObject to pdf document.</summary>
            <param name="pdfDocument">the target document for merge.</param>
            <param name="pdfDocumentName">
            the name of the target document. Will be checked in the merge process to determined
            if it is the same as href attribute of f element of merged XfdfObject. If the names are
            different, a warning will be thrown.
            </param>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObject.WriteToFile(System.String)">
            <summary>Writes info from XfdfObject to .xfdf file.</summary>
            <param name="filename">name of the target file.</param>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObject.WriteToFile(System.IO.Stream)">
            <summary>Writes info from XfdfObject to .xfdf file.</summary>
            <param name="os">target output stream.</param>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectFactory.CreateXfdfObject(iText.Kernel.Pdf.PdfDocument,System.String)">
            <summary>Extracts data from pdf document acroform and annotations into XfdfObject.</summary>
            <remarks>
            Extracts data from pdf document acroform and annotations into XfdfObject.
            *
            </remarks>
            <param name="document">Pdf document for data extraction.</param>
            <param name="filename">The name od pdf document for data extraction.</param>
            <returns>XfdfObject containing data from pdf forms and annotations.</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectFactory.CreateXfdfObject(System.IO.Stream)">
            <summary>Extracts data from input stream into XfdfObject.</summary>
            <remarks>Extracts data from input stream into XfdfObject. Typically input stream is based on .xfdf file</remarks>
            <param name="xfdfInputStream">The input stream containing xml-styled xfdf data.</param>
            <returns>XfdfObject containing original xfdf data.</returns>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectUtils.ConvertRectFromString(System.String)">
            <summary>
            Converts a string containing 2 or 4 float values into a
            <see cref="T:iText.Kernel.Geom.Rectangle"/>.
            </summary>
            <remarks>
            Converts a string containing 2 or 4 float values into a
            <see cref="T:iText.Kernel.Geom.Rectangle"/>.
            If only two coordinates are present, they should represent
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            width and height.
            </remarks>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectUtils.ConvertFringeFromString(System.String)">
            <summary>Converts a string containing 4 float values into a PdfArray, representing rectangle fringe.</summary>
            <remarks>
            Converts a string containing 4 float values into a PdfArray, representing rectangle fringe.
            If the number of floats in the string is not equal to 4, returns and PdfArray with empty values.
            </remarks>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectUtils.ConvertRectToString(iText.Kernel.Geom.Rectangle)">
            <summary>Converts a Rectangle to a string containing 4 float values.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectUtils.ConvertFloatToString(System.Single)">
            <summary>Converts float value to string with UTF-8 encoding.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectUtils.ConvertQuadPointsFromCoordsString(System.String)">
            <summary>Converts a string containing 4 float values into a float array, representing quadPoints.</summary>
            <remarks>
            Converts a string containing 4 float values into a float array, representing quadPoints.
            If the number of floats in the string is not equal to 8, returns an empty float array.
            </remarks>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectUtils.ConvertQuadPointsToCoordsString(System.Single[])">
            <summary>Converts a float array, representing quadPoints into a string containing 8 float values.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectUtils.ConvertFlagsFromString(System.String)">
            <summary>
            Converts a string containing a comma separated list of names of the flags into an integer representation
            of the flags.
            </summary>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectUtils.ConvertFlagsToString(iText.Kernel.Pdf.Annot.PdfAnnotation)">
            <summary>Converts an integer representation of the flags into a string with a comma separated list of names of the flags.
                </summary>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectUtils.ConvertColorToString(System.Single[])">
            <summary>Converts an array of 3 floats into a hex string representing the rgb color.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectUtils.ConvertColorToString(iText.Kernel.Colors.Color)">
            <summary>Converts a Color object into a hex string representing the rgb color.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectUtils.ConvertColorFloatToHex(System.Single)">
            <summary>Converts float representation of the rgb color into a hex string representing the rgb color.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectUtils.ConvertIdToHexString(System.String)">
            <summary>Converts string containing id from decimal to hexadecimal format.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectUtils.ConvertColorFromString(System.String)">
            <summary>Converts string containing hex color code to Color object.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectUtils.ConvertColorFloatsFromString(System.String)">
            <summary>Converts string containing hex color code into an array of 3 integer values representing rgb color.
                </summary>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectUtils.ConvertVerticesToString(System.Single[])">
            <summary>Converts an array of float vertices to string.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectUtils.ConvertFringeToString(System.Single[])">
            <summary>Converts to string an array of floats representing the fringe.</summary>
            <remarks>
            Converts to string an array of floats representing the fringe.
            If the number of floats doesn't equal 4, an empty string is returned.
            </remarks>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectUtils.ConvertVerticesFromString(System.String)">
            <summary>Converts a string into an array of floats representing vertices.</summary>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectUtils.ConvertLineStartToString(System.Single[])">
            <summary>Returns a string representation of the start point of the line (x_1, y_1) based on given line array.
                </summary>
            <remarks>
            Returns a string representation of the start point of the line (x_1, y_1) based on given line array.
            If the line array doesn't contain 4 floats, returns an empty string.
            </remarks>
            <param name="line">an array of 4 floats representing the line (x_1, y_1, x_2, y_2)</param>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfObjectUtils.ConvertLineEndToString(System.Single[])">
            <summary>Returns a string representation of the end point of the line (x_2, y_2) based on given line array.
                </summary>
            <remarks>
            Returns a string representation of the end point of the line (x_2, y_2) based on given line array.
            If the line array doesn't contain 4 floats, returns an empty string.
            </remarks>
            <param name="line">an array of 4 floats representing the line (x_1, y_1, x_2, y_2)</param>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfReader.MergeXfdfIntoPdf(iText.Forms.Xfdf.XfdfObject,iText.Kernel.Pdf.PdfDocument,System.String)">
            <summary>Merges existing XfdfObject into pdf document associated with it.</summary>
            <param name="xfdfObject">The object to be merged.</param>
            <param name="pdfDocument">The associated pdf document.</param>
            <param name="pdfDocumentName">The name of the associated pdf document.</param>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfReader.MergeFields(iText.Forms.Xfdf.FieldsObject,iText.Forms.PdfAcroForm)">
            <summary>
            Merges existing FieldsObject and children FieldObject entities into the form of the pdf document
            associated with it.
            </summary>
            <param name="fieldsObject">object containing acroform fields data to be merged.</param>
            <param name="form">acroform to be filled with xfdf data.</param>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfReader.MergeAnnotations(iText.Forms.Xfdf.AnnotsObject,iText.Kernel.Pdf.PdfDocument)">
            <summary>Merges existing XfdfObject into pdf document associated with it.</summary>
            <param name="annotsObject">The AnnotsObject with children AnnotObject entities to be mapped into PdfAnnotations.
                </param>
            <param name="pdfDocument">The associated pdf document.</param>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfWriter.#ctor(System.IO.Stream)">
            <summary>Creates a XfdfWriter for output stream specified.</summary>
            <param name="outputStream">A stream to write xfdf file into.</param>
        </member>
        <member name="M:iText.Forms.Xfdf.XfdfWriter.Write(iText.Forms.Xfdf.XfdfObject)">
            <summary>
            Writes data from
            <see cref="T:iText.Forms.Xfdf.XfdfObject"/>
            into a xfdf data file.
            </summary>
            <param name="xfdfObject">
            
            <see cref="T:iText.Forms.Xfdf.XfdfObject"/>
            containing the data.
            </param>
        </member>
    </members>
</doc>
