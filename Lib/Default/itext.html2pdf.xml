<?xml version="1.0"?>
<doc>
    <assembly>
        <name>itext.html2pdf</name>
    </assembly>
    <members>
        <member name="T:iText.Html2pdf.Actions.Data.PdfHtmlProductData">
            <summary>
            Stores an instance of
            <see cref="T:iText.Commons.Actions.Data.ProductData"/>
            related to iText pdfHTML module.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Actions.Data.PdfHtmlProductData.GetInstance">
            <summary>
            Getter for an instance of
            <see cref="T:iText.Commons.Actions.Data.ProductData"/>
            related to iText pdfHTML module.
            </summary>
            <returns>iText pdfHTML product description</returns>
        </member>
        <member name="T:iText.Html2pdf.Actions.Events.PdfHtmlProductEvent">
            <summary>Class represents events registered in iText pdfHTML module.</summary>
        </member>
        <member name="F:iText.Html2pdf.Actions.Events.PdfHtmlProductEvent.CONVERT_HTML">
            <summary>Convert html event type.</summary>
        </member>
        <member name="M:iText.Html2pdf.Actions.Events.PdfHtmlProductEvent.#ctor(iText.Commons.Actions.Sequence.SequenceId,iText.Commons.Actions.Contexts.IMetaInfo,System.String)">
            <summary>Creates an event associated with a general identifier and additional meta data.</summary>
            <param name="sequenceId">is an identifier associated with the event</param>
            <param name="metaInfo">is an additional meta info</param>
            <param name="eventType">is a string description of the event</param>
        </member>
        <member name="M:iText.Html2pdf.Actions.Events.PdfHtmlProductEvent.CreateConvertHtmlEvent(iText.Commons.Actions.Sequence.SequenceId,iText.Commons.Actions.Contexts.IMetaInfo)">
            <summary>Creates a convert html event which associated with a general identifier and additional meta data.
                </summary>
            <param name="sequenceId">is an identifier associated with the event</param>
            <param name="metaInfo">is an additional meta info</param>
            <returns>the convert html event</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Attacher">
            <summary>
            Helper class to add parsed HTML content to an existing iText document,
            or to parse HTML to a list of iText elements.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Attacher.#ctor">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.Attacher"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Attacher.Attach(iText.StyledXmlParser.Node.IDocumentNode,iText.Kernel.Pdf.PdfDocument,iText.Html2pdf.ConverterProperties)">
            <summary>
            Attaches the HTML content stored in a document node to
            an existing PDF document, using specific converter properties,
            and returning an iText
            <see cref="T:iText.Layout.Document"/>
            object.
            </summary>
            <param name="documentNode">the document node with the HTML</param>
            <param name="pdfDocument">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            instance
            </param>
            <param name="converterProperties">
            the
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <returns>
            an iText
            <see cref="T:iText.Layout.Document"/>
            object
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Attacher.Attach(iText.StyledXmlParser.Node.IDocumentNode,iText.Html2pdf.ConverterProperties)">
            <summary>
            Attaches the HTML content stored in a document node to
            a list of
            <see cref="T:iText.Layout.Element.IElement"/>
            objects.
            </summary>
            <param name="documentNode">the document node with the HTML</param>
            <param name="converterProperties">
            the
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <returns>
            the list of
            <see cref="T:iText.Layout.Element.IElement"/>
            objects
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.IHtmlProcessor">
            <summary>
            Interface for classes that can process HTML to PDF in the form of a
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            or a list of
            <see cref="T:iText.Layout.Element.IElement"/>
            objects.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.IHtmlProcessor.ProcessDocument(iText.StyledXmlParser.Node.INode,iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Parses HTML to add the content to a
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>.
            </summary>
            <param name="root">the root node of the HTML that needs to be parsed</param>
            <param name="pdfDocument">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            instance
            </param>
            <returns>
            a
            <see cref="T:iText.Layout.Document"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.IHtmlProcessor.ProcessElements(iText.StyledXmlParser.Node.INode)">
            <summary>
            Parses HTML to add the content to a list of
            <see cref="T:iText.Layout.Element.IElement"/>
            objects.
            </summary>
            <param name="root">the root node of the HTML that needs to be parsed</param>
            <returns>the resulting list</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor">
            <summary>The default implementation to process HTML.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.logger">
            <summary>The logger instance.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.ignoredTags">
            <summary>Set of tags that do not map to any tag worker and that are deliberately excluded from the logging.
                </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.ignoredCssTags">
            <summary>Set of tags to which we do not want to apply CSS to and that are deliberately excluded from the logging
                </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.ignoredChildTags">
            <summary>Set of tags that might be not processed by some tag workers and that are deliberately excluded from the logging.
                </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.context">
            <summary>The processor context.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.roots">
            <summary>A list of parent objects that result from parsing the HTML.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.cssResolver">
            <summary>The CSS resolver.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.#ctor(iText.Html2pdf.ConverterProperties)">
            <summary>Instantiates a new default html processor.</summary>
            <param name="converterProperties">the converter properties</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.SetConvertedRootElementProperties(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Sets properties to top-level layout elements converted from HTML.</summary>
            <remarks>
            Sets properties to top-level layout elements converted from HTML.
            This enables features set by user via HTML converter API and also changes properties defaults
            to the ones specific to HTML-like behavior.
            </remarks>
            <param name="cssProperties">HTML document-level css properties.</param>
            <param name="context">processor context specific to the current HTML conversion.</param>
            <param name="propertyContainer">top-level layout element converted from HTML.</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.VisitToProcessCounters(iText.StyledXmlParser.Node.INode)">
            <summary>Recursively processes a node to preprocess target-counters.</summary>
            <param name="node">the node</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.Visit(iText.StyledXmlParser.Node.INode)">
            <summary>Recursively processes a node converting HTML into PDF using tag workers.</summary>
            <param name="node">the node</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.AddFontFaceFonts">
            <summary>Adds @font-face fonts to the FontProvider.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.CreateFont(System.String,iText.StyledXmlParser.Css.Font.CssFontFace.CssFontFaceSrc,iText.Layout.Font.Range)">
            <summary>Creates a font and adds it to the context.</summary>
            <param name="fontFamily">the font family</param>
            <param name="src">the source of the font</param>
            <param name="unicodeRange">the unicode range</param>
            <returns>true, if successful</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.CreatePseudoElement(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ITagWorker,System.String)">
            <summary>Creates a pseudo element (before and after CSS).</summary>
            <param name="node">the node</param>
            <param name="tagWorker">the tagWorker</param>
            <param name="pseudoElementName">the pseudo element name</param>
            <returns>created pseudo element</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.FindElement(iText.StyledXmlParser.Node.INode,System.String)">
            <summary>Find an element in a node.</summary>
            <param name="node">the node</param>
            <param name="tagName">the tag name</param>
            <returns>the element node</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.FindHtmlNode(iText.StyledXmlParser.Node.INode)">
            <summary>Find the HTML node.</summary>
            <param name="node">the node</param>
            <returns>the i element node</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.FindBodyNode(iText.StyledXmlParser.Node.INode)">
            <summary>Find the BODY node.</summary>
            <param name="node">the node</param>
            <returns>the i element node</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultHtmlProcessor.IsDisplayable(iText.StyledXmlParser.Node.IElementNode)">
            <summary>Checks if an element should be displayed.</summary>
            <param name="element">the element</param>
            <returns>true, if the element should be displayed</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.DefaultTagWorkerFactory">
            <summary>
            The default implementation of a tag worker factory, mapping tags to
            tag worker implementations.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.DefaultTagWorkerFactory.defaultMapping">
            <summary>The default mapping.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultTagWorkerFactory.#ctor">
            <summary>Instantiates a new default tag worker factory.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultTagWorkerFactory.GetInstance">
            <summary>
            Gets
            <see cref="T:iText.Html2pdf.Attach.ITagWorkerFactory"/>
            instance.
            </summary>
            <returns>default instance that is used if custom tag workers are not configured</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultTagWorkerFactory.GetTagWorkerCreator(iText.Html2pdf.Util.TagProcessorMapping{iText.Html2pdf.Attach.Impl.DefaultTagWorkerMapping.ITagWorkerCreator},iText.StyledXmlParser.Node.IElementNode)">
            <summary>Gets the tag worker creator for a specific element node.</summary>
            <param name="mapping">the mapping</param>
            <param name="tag">the element node</param>
            <returns>the tag worker class creator</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultTagWorkerFactory.GetCustomTagWorker(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>This is a hook method.</summary>
            <remarks>
            This is a hook method. Users wanting to provide a custom mapping
            or introduce their own ITagWorkers should implement this method.
            </remarks>
            <param name="tag">the tag</param>
            <param name="context">the context</param>
            <returns>the custom tag worker</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.DefaultTagWorkerMapping">
            <summary>
            Contains the actual mapping of the
            <see cref="T:iText.Html2pdf.Attach.Impl.DefaultTagWorkerFactory"/>.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.DefaultTagWorkerMapping.workerMapping">
            <summary>The worker mapping.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultTagWorkerMapping.GetDefaultTagWorkerMapping">
            <summary>Gets the default tag worker mapping.</summary>
            <returns>the default mapping</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.DefaultTagWorkerMapping.#ctor">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.DefaultTagWorkerMapping"/>
            instance.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.HtmlMetaInfoContainer">
            <summary>Class to store metaInfo that will be used for html operations.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.HtmlMetaInfoContainer.#ctor(iText.Commons.Actions.Contexts.IMetaInfo)">
            <summary>Creates HtmlMetaInfoContainer instance with provided meta info.</summary>
            <param name="metaInfo">the meta info</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.HtmlMetaInfoContainer.GetMetaInfo">
            <summary>Return the IMetaInfo object.</summary>
            <returns>returns IMetaInfo</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer">
            <summary>
            This class is used to store styles of
            <c>&lt;html&gt;</c>
            and
            <c>&lt;body&gt;</c>
            tags,
            to simplify their application on the document as an
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty"/>
            and to simplify their processing on the layout level.
            </summary>
            <remarks>
            This class is used to store styles of
            <c>&lt;html&gt;</c>
            and
            <c>&lt;body&gt;</c>
            tags,
            to simplify their application on the document as an
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty"/>
            and to simplify their processing on the layout level.
            This class is primarily meant for internal usage.
            </remarks>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.SetProperty(System.Int32,System.Object)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.HasProperty(System.Int32)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.HasOwnProperty(System.Int32)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.DeleteOwnProperty(System.Int32)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.GetProperty``1(System.Int32)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.GetOwnProperty``1(System.Int32)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.GetDefaultProperty``1(System.Int32)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.HasContentToDraw">
            <summary>
            This method is needed to check if we need to draw a simulated
            <see cref="T:iText.Layout.Element.Div"/>
            element,
            i.e. to perform any drawing at all.
            </summary>
            <returns>
            true if there is at least one
            <see cref="T:iText.Layout.Borders.Border"/>
            or a
            <see cref="T:iText.Layout.Properties.Background"/>
            or a
            <see cref="T:iText.Layout.Properties.BackgroundImage"/>
            present in the container
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.HasStylesToApply">
            <summary>This method is needed to check if there are styles applied on the current element.</summary>
            <returns>true if in the container there are present styles which impact the layout</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer.GetTotalWidth">
            <summary>
            This method calculates the total widths of TOP-, RIGHT-, BOTTOM- and LEFT- side styles,
            each combined of widths of applied margins, borders and paddings.
            </summary>
            <returns>a float array containing applied TOP-, RIGHT-, BOTTOM- and LEFT- side widths of styles respectively
                </returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.DimensionContainer">
            <summary>Container class for grouping necessary values used in dimension calculation</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.DimensionContainer.IsAutoDimension">
            <summary>Check if this dimension is auto</summary>
            <returns>True if the dimension is to be automatically calculated, false if it was set via a property</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.AbstractSelectField">
            <summary>An abstract class for fields that represents a control for selecting one or several of the provided options.
                </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.AbstractSelectField.AddOption(iText.Layout.Element.IBlockElement)">
            <summary>Adds a container with option(s).</summary>
            <remarks>Adds a container with option(s). This might be a container for options group.</remarks>
            <param name="optionElement">a container with option(s)</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.AbstractSelectField.GetOptions">
            <summary>Gets a list of containers with option(s).</summary>
            <remarks>Gets a list of containers with option(s). Every container might be a container for options group.
                </remarks>
            <returns>a list of containers with option(s)</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.Button">
            <summary>
            Extension of the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1"/>
            class representing a button in html
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.Button.Add(iText.Layout.Element.IBlockElement)">
            <summary>Adds any block element to the div's contents.</summary>
            <param name="element">
            a
            <see cref="T:iText.Layout.Element.BlockElement`1"/>
            </param>
            <returns>this Element</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.Button.Add(iText.Layout.Element.Image)">
            <summary>Adds an image to the div's contents.</summary>
            <param name="element">
            an
            <see cref="T:iText.Layout.Element.Image"/>
            </param>
            <returns>this Element</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.CheckBox">
            <summary>
            Extension of the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1"/>
            class representing a checkbox so that
            a
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.CheckBoxRenderer"/>
            is used instead of the default renderer for fields.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.CheckBox.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.CheckBox"/>
            instance.
            </summary>
            <param name="id">the id</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.ComboBoxField">
            <summary>A field that represents a control for selecting one of the provided options.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.ComboBoxField.#ctor(System.String)">
            <summary>Creates a new select field box.</summary>
            <param name="id">the id</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1">
            <summary>
            Implementation of the
            <see cref="T:iText.Layout.Element.AbstractElement`1"/>
            class for form fields.
            </summary>
            <typeparam name="T">the generic type of the form field (e.g. input field, button, text area)</typeparam>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1.id">
            <summary>The id.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1.#ctor(System.String)">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1"/>
            instance.
            </summary>
            <param name="id">the id</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.IFormField">
            <summary>Common interface for HTML form elements</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.IFormField.GetId">
            <summary>Gets the id.</summary>
            <returns>the id</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.InputButton">
            <summary>
            Extension of the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1"/>
            class representing a input with type button or submit in html
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.InputButton.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.InputButton"/>
            instance.
            </summary>
            <param name="id">the id</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.InputField">
            <summary>
            Extension of the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1"/>
            class representing a button so that
            a
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.InputFieldRenderer"/>
            is used.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.InputField.#ctor(System.String)">
            <summary>Creates a new input field.</summary>
            <param name="id">the id</param>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Form.Element.InputField.placeholder">
            <summary>The placeholder paragraph.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.InputField.GetPlaceholder">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.InputField.SetPlaceholder(iText.Layout.Element.Paragraph)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.IPlaceholderable">
            <summary>A marker interface that specifies that the layout object has placeholder</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.IPlaceholderable.GetPlaceholder">
            <summary>Gets the placeholder paragraph.</summary>
            <returns>the placeholder paragraph</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.IPlaceholderable.SetPlaceholder(iText.Layout.Element.Paragraph)">
            <summary>Sets the placeholder paragraph.</summary>
            <param name="placeholder">the paragraph to be used as placeholder</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.ListBoxField">
            <summary>A field that represents a control for selecting one or several of the provided options.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.ListBoxField.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>Creates a new list box field.</summary>
            <param name="size">the size of the list box, which will define the height of visible properties, shall be greater than zero
                </param>
            <param name="allowMultipleSelection">a boolean flag that defines whether multiple options are allowed to be selected at once
                </param>
            <param name="id">the id</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.Radio">
            <summary>
            Extension of the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1"/>
            class representing a radio button so that
            a
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.RadioRenderer"/>
            is used instead of the default renderer for fields.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.Radio.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.Radio"/>
            instance.
            </summary>
            <param name="id">the id</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.TextArea">
            <summary>
            Extension of the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.FormField`1"/>
            class representing a button so that
            a
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.TextAreaRenderer"/>
            is used instead of the default renderer for fields.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Form.Element.TextArea.placeholder">
            <summary>The placeholder paragraph.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.TextArea.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Element.TextArea"/>
            instance.
            </summary>
            <param name="id">the id</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.TextArea.GetPlaceholder">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Element.TextArea.SetPlaceholder(iText.Layout.Element.Paragraph)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer">
            <summary>
            Abstract
            <see cref="T:iText.Layout.Renderer.BlockRenderer"/>
            for form fields.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.flatRenderer">
            <summary>The flat renderer.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.IFormField)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.IsFlatten">
            <summary>Checks if form fields need to be flattened.</summary>
            <returns>true, if fields need to be flattened</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.GetDefaultValue">
            <summary>Gets the default value of the form field.</summary>
            <returns>the default value of the form field</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.AdjustFieldLayout(iText.Layout.Layout.LayoutContext)">
            <summary>Adjusts the field layout.</summary>
            <param name="layoutContext">layout context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.CreateFlatRenderer">
            <summary>Creates the flat renderer instance.</summary>
            <returns>the renderer instance</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.ApplyAcroField(iText.Layout.Renderer.DrawContext)">
            <summary>Applies the AcroField widget.</summary>
            <param name="drawContext">the draw context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.GetModelId">
            <summary>Gets the model id.</summary>
            <returns>the model id</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.IsRendererFit(System.Single,System.Single)">
            <summary>Checks if the renderer fits a certain width and height.</summary>
            <param name="availableWidth">the available width</param>
            <param name="availableHeight">the available height</param>
            <returns>true, if the renderer fits</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractFormFieldRenderer.GetLang">
            <summary>Gets the accessibility language.</summary>
            <returns>the accessibility language</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer">
            <summary>
            Abstract
            <see cref="T:iText.Layout.Renderer.BlockRenderer"/>
            for a single line of text content in a form field.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.IFormField)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer.CropContentLines(System.Collections.Generic.IList{iText.Layout.Renderer.LineRenderer},iText.Kernel.Geom.Rectangle)">
            <summary>Crops the content lines.</summary>
            <param name="lines">a list of lines</param>
            <param name="bBox">the bounding box</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer.UpdateParagraphHeight">
            <summary>Updates the paragraph height.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer.SetContentHeight(iText.Layout.Renderer.IRenderer,System.Single)">
            <summary>Sets the content height.</summary>
            <param name="flatRenderer">the flat renderer</param>
            <param name="height">the height</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractSelectFieldRenderer">
            <summary>
            Abstract
            <see cref="T:iText.Layout.Renderer.BlockRenderer"/>
            for select form fields.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractSelectFieldRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.AbstractSelectField)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractSelectFieldRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractSelectFieldRenderer.GetLang">
            <summary>Gets the accessibility language.</summary>
            <returns>the accessibility language</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractSelectFieldRenderer.IsFlatten">
            <summary>Checks if form fields need to be flattened.</summary>
            <returns>true, if fields need to be flattened</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractSelectFieldRenderer.GetModelId">
            <summary>Gets the model id.</summary>
            <returns>the model id</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer">
            <summary>
            Abstract
            <see cref="T:iText.Layout.Renderer.BlockRenderer"/>
            for form fields with text content.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer.font">
            <summary>The font to be used for the text.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.IFormField)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer.CreateParagraphRenderer(System.String)">
            <summary>Creates a paragraph renderer.</summary>
            <param name="defaultValue">the default value</param>
            <returns>the renderer</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer.AdjustNumberOfContentLines(System.Collections.Generic.IList{iText.Layout.Renderer.LineRenderer},iText.Kernel.Geom.Rectangle,System.Int32)">
            <summary>Adjust number of content lines.</summary>
            <param name="lines">the lines that need to be rendered</param>
            <param name="bBox">the bounding box</param>
            <param name="rows">the desired number of lines</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer.AdjustNumberOfContentLines(System.Collections.Generic.IList{iText.Layout.Renderer.LineRenderer},iText.Kernel.Geom.Rectangle,System.Single)">
            <summary>Adjust number of content lines.</summary>
            <param name="lines">the lines that need to be rendered</param>
            <param name="bBox">the bounding box</param>
            <param name="height">the desired height of content</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer.ApplyDefaultFieldProperties(iText.Forms.Fields.PdfFormField)">
            <summary>Applies the default field properties.</summary>
            <param name="inputField">the input field</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer.UpdatePdfFont(iText.Layout.Renderer.ParagraphRenderer)">
            <summary>Updates the font.</summary>
            <param name="renderer">the renderer</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.ButtonRenderer">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer"/>
            implementation for buttons with kids.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.ButtonRenderer.GetModelId">
            <summary>Gets the model id.</summary>
            <returns>the model id</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.ButtonRenderer.IsFlatten">
            <summary>Checks if form fields need to be flattened.</summary>
            <returns>true, if fields need to be flattened</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.ButtonRenderer.GetDefaultValue">
            <summary>Gets the default value of the form field.</summary>
            <returns>the default value of the form field</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.CheckBoxRenderer">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer"/>
            implementation for checkboxes.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.CheckBoxRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.CheckBox)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.CheckBoxRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.CheckBoxRenderer.IsBoxChecked">
            <summary>Defines whether the box is checked or not.</summary>
            <returns>the default value of the checkbox field</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.InputButtonRenderer">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer"/>
            implementation for buttons with no kids.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.InputButtonRenderer.isSplit">
            <summary>Indicates of the content was split.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.InputButtonRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.InputButton)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.InputButtonRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.InputFieldRenderer">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer"/>
            implementation for input fields.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.InputFieldRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.InputField)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.InputFieldRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.InputFieldRenderer.GetSize">
            <summary>Gets the size of the input field.</summary>
            <returns>the input field size</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.InputFieldRenderer.IsPassword">
            <summary>Checks if the input field is a password field.</summary>
            <returns>true, if the input field is a password field</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.InputFieldRenderer.ObfuscatePassword(System.String)">
            <summary>Obfuscates the content of a password input field.</summary>
            <param name="text">the password</param>
            <returns>a string consisting of '*' characters.</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.RadioRenderer">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractOneLineTextFieldRenderer"/>
            implementation for radio buttons.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.RadioRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.Radio)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.RadioRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.RadioRenderer.IsBoxChecked">
            <summary>Defines whether the radio is checked or not.</summary>
            <returns>the default value of the radio field</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.SelectFieldComboBoxRenderer">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.SelectFieldComboBoxRenderer"/>
            implementation for select field renderer.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.SelectFieldComboBoxRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.AbstractSelectField)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.SelectFieldComboBoxRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.SelectFieldListBoxRenderer">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.SelectFieldListBoxRenderer"/>
            implementation for select field renderer.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.SelectFieldListBoxRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.AbstractSelectField)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.SelectFieldListBoxRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.SelectFieldListBoxRenderer.SetFontColorRecursively(iText.Layout.Renderer.IRenderer)">
            <summary>
            The `select` tag has default color css property, therefore it makes sense to explicitly override this property to all children,
            otherwise it will be not applied due to the css resolving mechanism.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.TextAreaRenderer">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.AbstractTextFieldRenderer"/>
            implementation for text area fields.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.TextAreaRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.Form.Element.TextArea)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.TextAreaRenderer"/>
            instance.
            </summary>
            <param name="modelElement">the model element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.TextAreaRenderer.GetCols">
            <summary>Gets the number of columns.</summary>
            <returns>the cols value of the text area field</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.Form.Renderer.TextAreaRenderer.GetRows">
            <summary>Gets the number of rows.</summary>
            <returns>the rows value of the text area field</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty">
            <summary>Set of constants that will be used as keys to get and set properties.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.PROPERTY_START">
            <summary>The Constant PROPERTY_START.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.KEEP_WITH_PREVIOUS">
            <summary>The Constant KEEP_WITH_PREVIOUS works only for top-level elements, i.e. ones that are added to the document directly.
                </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.PAGE_COUNT_TYPE">
            <summary>The Constant PAGE_COUNT_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_FLATTEN">
            <summary>The Constant FORM_FIELD_FLATTEN for form related properties.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_SIZE">
            <summary>The Constant FORM_FIELD_SIZE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_VALUE">
            <summary>The Constant FORM_FIELD_VALUE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_PASSWORD_FLAG">
            <summary>The Constant FORM_FIELD_PASSWORD_FLAG.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_COLS">
            <summary>The Constant FORM_FIELD_COLS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_ROWS">
            <summary>The Constant FORM_FIELD_ROWS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_CHECKED">
            <summary>The Constant FORM_FIELD_CHECKED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.BODY_STYLING">
            <summary>The Constant BODY_STYLING.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.HTML_STYLING">
            <summary>The Constant HTML_STYLING.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_MULTIPLE">
            <summary>The Constant FORM_FIELD_MULTIPLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_SELECTED">
            <summary>The Constant FORM_FIELD_SELECTED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_FIELD_LABEL">
            <summary>The Constant FORM_FIELD_SELECTED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.FORM_ACCESSIBILITY_LANGUAGE">
            <summary>The Constant FORM_ACCESSIBILITY_LANGUAGE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.Html2PdfProperty.CAPITALIZE_ELEMENT">
            <summary>The Constant CAPITALIZE_ELEMENT indicates if an inline element needs to be capitalized.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.HtmlBodyStylesApplierHandler">
            <summary>This handler draws backgrounds and borders for html, body and page-annotation styles.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlBodyStylesApplierHandler.#ctor(iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer,System.Collections.Generic.IDictionary{System.Int32,iText.Html2pdf.Attach.Impl.Layout.HtmlBodyStylesApplierHandler.PageStylesProperties})">
            <summary>Constructor for HtmlBodyStylesApplierHandler.</summary>
            <param name="htmlDocumentRenderer">
            
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer"/>
            </param>
            <param name="pageStylesPropertiesMap">
            
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.HtmlBodyStylesApplierHandler.PageStylesProperties"/>
            map that contains styles for html and body elements
            </param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlBodyStylesApplierHandler.ApplyFirstBackground(iText.Kernel.Pdf.PdfPage,System.Single[],iText.Html2pdf.Attach.Impl.Layout.BodyHtmlStylesContainer[],System.Int32)">
            <summary>If html doesn't have a background and the body has, then body background must be drawn on the whole page.
                </summary>
            <remarks>
            If html doesn't have a background and the body has, then body background must be drawn on the whole page.
            Also for case when html doesn't have a background, but has borders,
            then body's background must be under the html's borders.
            </remarks>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.HtmlDocument">
            <summary>
            This class is a wrapper on
            <see cref="T:iText.Layout.Document"/>
            , which is the default root element while creating a self-sufficient PDF.
            </summary>
            <remarks>
            This class is a wrapper on
            <see cref="T:iText.Layout.Document"/>
            , which is the default root element while creating a self-sufficient PDF.
            It contains several html-specific customizations.
            </remarks>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlDocument.#ctor(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.PageSize,System.Boolean)">
            <summary>
            Creates a html document from a
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            with a manually set
            <see cref="T:iText.Kernel.Geom.PageSize"/>.
            </summary>
            <param name="pdfDoc">the in-memory representation of the PDF document</param>
            <param name="pageSize">the page size</param>
            <param name="immediateFlush">
            if true, write pages and page-related instructions
            to the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            as soon as possible.
            </param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlDocument.Relayout">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer">
            <summary>The DocumentRenderer class for HTML.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.TRIM_LAST_BLANK_PAGE">
            <summary>The Constant TRIM_LAST_BLANK_PAGE.</summary>
            <remarks>
            The Constant TRIM_LAST_BLANK_PAGE.
            In a future version, we might want to expose this value to the users,
            or make it a public setting of the HTML renderer.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.firstPageProc">
            <summary>The page context processor for the first page.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.leftPageProc">
            <summary>The page context processor for all left pages.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.rightPageProc">
            <summary>The page context processor for all right pages.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.evenPagesAreLeft">
            <summary>Indicates if even pages are considered as left or right.</summary>
            <remarks>
            Indicates if even pages are considered as left or right.
            Important: this value might differ depending on page progression direction,
            as well as because the first page break-before might change right page to left (in ltr cases),
            but a blank page will not be added.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.waitingElement">
            <summary>
            The waiting element, an child element is kept waiting for the
            next element to process the "keep with previous" property.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.shouldTrimFirstBlankPagesCausedByBreakBeforeFirstElement">
            <summary>
            Indicates if the first blank pages caused by a break-before-first
            element should be trimmed.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.anythingAddedToCurrentArea">
            <summary>Indicates if anything was added to the current area.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.estimatedNumberOfPages">
            <summary>The estimated number of pages.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.#ctor(iText.Layout.Document,System.Boolean)">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer"/>
            instance.
            </summary>
            <param name="document">
            an iText
            <see cref="T:iText.Layout.Document"/>
            instance
            </param>
            <param name="immediateFlush">the immediate flush indicator</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.ProcessPageRules(iText.StyledXmlParser.Node.INode,iText.StyledXmlParser.Css.ICssResolver,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>Processes the page rules.</summary>
            <param name="rootNode">the root node</param>
            <param name="cssResolver">the CSS resolver</param>
            <param name="context">the processor context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.RemoveEventHandlers">
            <summary>
            Removes event handlers that were added to pdf document when this
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer"/>
            was created.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.ProcessWaitingElement">
            <summary>Layouts waiting element.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.SimulateTrimLastPage">
            <summary>
            Returns the number of pages that will be trimmed on
            <see cref="M:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.Close"/>
            </summary>
            <returns>0 if no pages will be trimmed, or positive number of trimmed pages in case any are trimmed</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.GetPageProcessor(System.Int32)">
            <summary>Gets a page processor for the page.</summary>
            <param name="pageNum">
            the number of the page for which the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor"/>
            shall be obtained
            </param>
            <returns>a page processor</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.GetEstimatedNumberOfPages">
            <summary>Gets the estimated number of pages.</summary>
            <returns>the estimated number of pages</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.IsPageLeft(System.Int32)">
            <summary>Checks if the current page is a left page.</summary>
            <returns>true, if is current page left</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlDocumentRenderer.IsPageRight(System.Int32)">
            <summary>Checks if the current page is a right page.</summary>
            <returns>true, if is current page right</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreak">
            <summary>
            The HTML implementation of an
            <see cref="T:iText.Layout.Element.AreaBreak"/>.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreak.breakType">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreakType"/>.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreak.#ctor(iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreakType)">
            <summary>Instantiates a new html page break.</summary>
            <param name="type">the page break type</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreak.GetBreakType">
            <summary>
            Gets the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreakType"/>.
            </summary>
            <returns>the page break type</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreakType">
            <summary>Enumeration of the HTML page break types.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreakType.ALWAYS">
            <summary>Always break.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreakType.LEFT">
            <summary>Insert page break so that the next page is formatted as a left page.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreakType.RIGHT">
            <summary>Insert page break so that the next page is formatted as a right page.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor">
            <summary>Context processor for specific types of pages: first, left, or right page.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.pageSize">
            <summary>The page size.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.marks">
            <summary>Marks for page boundaries.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.bleed">
            <summary>The bleed value for the margin.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.margins">
            <summary>The margins.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.borders">
            <summary>The borders.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.paddings">
            <summary>The paddings.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.pageBackgroundSimulation">
            <summary>page background simulation.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.pageBordersSimulation">
            <summary>page borders simulation.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.LOGGER">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.#ctor(iText.Html2pdf.Attach.Impl.Layout.PageContextProperties,iText.Html2pdf.Attach.ProcessorContext,iText.Kernel.Geom.PageSize,System.Single[])">
            <summary>Instantiates a new page context processor.</summary>
            <param name="properties">the page context properties</param>
            <param name="context">the processor context</param>
            <param name="defaultPageSize">the default page size</param>
            <param name="defaultPageMargins">the default page margins</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.ParseMarks(System.String)">
            <summary>Parses the marks.</summary>
            <param name="marksStr">
            a
            <see cref="T:System.String"/>
            value defining the marks
            </param>
            <returns>
            a
            <see cref="!:Java.Util.Set&lt;E&gt;"/>
            of mark values
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.Reset(iText.Kernel.Geom.PageSize,System.Single[])">
            <summary>
            Re-initializes page context processor based on default current page size and page margins
            and on properties from css page at-rules.
            </summary>
            <remarks>
            Re-initializes page context processor based on default current page size and page margins
            and on properties from css page at-rules. Css properties priority is higher than default document values.
            </remarks>
            <param name="defaultPageSize">current default page size to be used if it is not defined in css</param>
            <param name="defaultPageMargins">current default page margins to be used if they are not defined in css</param>
            <returns>
            this
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.GetPageSize">
            <summary>Gets the page size.</summary>
            <returns>the page size</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.ComputeLayoutMargins">
            <summary>Compute layout margins.</summary>
            <returns>the float values of the margins</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.ProcessPageEnd(System.Int32,iText.Kernel.Pdf.PdfDocument,iText.Layout.Renderer.DocumentRenderer)">
            <summary>Finalizes page processing by drawing margins if necessary.</summary>
            <param name="pageNum">the page to process</param>
            <param name="pdfDocument">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to which content is written
            </param>
            <param name="documentRenderer">the document renderer</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.ProcessNewPage(iText.Kernel.Pdf.PdfPage)">
            <summary>
            Processes a new page by setting the bleed value, adding marks, drawing
            page backgrounds and borders.
            </summary>
            <param name="page">the page to process</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.DrawPageBackground(iText.Kernel.Pdf.PdfPage)">
            <summary>Draws page background.</summary>
            <param name="page">the page</param>
            <returns>pdfCanvas instance if there was a background to draw, otherwise returns null</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.SetBleed(iText.Kernel.Pdf.PdfPage)">
            <summary>Sets the bleed value for a page.</summary>
            <param name="page">the new bleed</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.DrawMarks(iText.Kernel.Pdf.PdfPage)">
            <summary>
            Sets the different page boundaries and draws printer marks on the page
            (if necessary).
            </summary>
            <param name="page">the page</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.DrawCross(iText.Kernel.Pdf.Canvas.PdfCanvas,System.Single,System.Single,System.Boolean)">
            <summary>
            Draws a cross (used in the
            <see cref="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.DrawMarks(iText.Kernel.Pdf.PdfPage)"/>
            method).
            </summary>
            <param name="canvas">the canvas to draw on</param>
            <param name="x">the x value</param>
            <param name="y">the y value</param>
            <param name="horizontalCross">true if horizontal</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.DrawPageBorders(iText.Kernel.Pdf.PdfPage)">
            <summary>Draws page border.</summary>
            <param name="page">the page</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.DrawMarginBoxes(System.Int32,iText.Kernel.Pdf.PdfDocument,iText.Layout.Renderer.DocumentRenderer)">
            <summary>Draws margin boxes.</summary>
            <param name="pageNumber">the page</param>
            <param name="pdfDocument">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            to which content is written
            </param>
            <param name="documentRenderer">the document renderer</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.ParseMargins(System.Collections.Generic.IDictionary{System.String,System.String},System.Single,System.Single,System.Single[])">
            <summary>Parses the margins.</summary>
            <param name="styles">
            a
            <see cref="!:System.Collections.IDictionary&lt;K, V&gt;"/>
            containing the styles
            </param>
            <param name="em">a measurement expressed in em</param>
            <param name="rem">a measurement expressed in rem (root em)</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.ParsePaddings(System.Collections.Generic.IDictionary{System.String,System.String},System.Single,System.Single)">
            <summary>Parses the paddings.</summary>
            <param name="styles">
            a
            <see cref="!:System.Collections.IDictionary&lt;K, V&gt;"/>
            containing the styles
            </param>
            <param name="em">a measurement expressed in em</param>
            <param name="rem">a measurement expressed in rem (root em)</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.ParseBorders(System.Collections.Generic.IDictionary{System.String,System.String},System.Single,System.Single)">
            <summary>Parses the borders.</summary>
            <param name="styles">
            a
            <see cref="!:System.Collections.IDictionary&lt;K, V&gt;"/>
            containing the styles
            </param>
            <param name="em">a measurement expressed in em</param>
            <param name="rem">a measurement expressed in rem (root em)</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor.CreatePageSimulationElements(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext)">
            <summary>Creates the page simulation elements.</summary>
            <param name="styles">
            a
            <see cref="!:System.Collections.IDictionary&lt;K, V&gt;"/>
            containing the styles
            </param>
            <param name="context">the processor context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties">
            <summary>
            Properties class for the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.PageContextProcessor"/>.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties.pageMarginBoxNames">
            <summary>List containing possible names for page margin boxes.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties.pageContextNode">
            <summary>The page context node.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties.pageMarginBoxes">
            <summary>The page margin boxes.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties.#ctor(iText.StyledXmlParser.Css.Page.PageContextNode,System.Collections.Generic.IList{iText.StyledXmlParser.Css.Page.PageMarginBoxContextNode})">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties"/>
            instance.
            </summary>
            <param name="pageProps">the page context node</param>
            <param name="pagesMarginBoxes">the page margin boxes</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties.Resolve(iText.StyledXmlParser.Node.INode,iText.StyledXmlParser.Css.ICssResolver,iText.Html2pdf.Css.Resolve.CssContext,System.String[])">
            <summary>
            Resolves a node with a
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties"/>
            instance as result.
            </summary>
            <param name="rootNode">the root node to resolve</param>
            <param name="cssResolver">the CSS resolver</param>
            <param name="context">the CSS context</param>
            <param name="pageClasses">the page classes</param>
            <returns>
            the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties"/>
            for a specific node
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties.GetResolvedMarginBoxes(iText.StyledXmlParser.Css.Page.PageContextNode,iText.StyledXmlParser.Css.ICssResolver,iText.Html2pdf.Css.Resolve.CssContext)">
            <summary>Gets the resolved margin boxes.</summary>
            <param name="pageClassNode">the page contex node</param>
            <param name="cssResolver">the CSS resolver</param>
            <param name="context">the CSS context</param>
            <returns>the resolved margin boxes</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties.GetResolvedPageClassNode(iText.StyledXmlParser.Node.INode,iText.StyledXmlParser.Css.ICssResolver,iText.Html2pdf.Css.Resolve.CssContext,System.String[])">
            <summary>Gets the resolved page class node.</summary>
            <param name="rootNode">the root node</param>
            <param name="cssResolver">the CSS resolver</param>
            <param name="context">the CSS context</param>
            <param name="pageClasses">the page classes</param>
            <returns>the resolved page class node</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties.GetResolvedPageContextNode">
            <summary>Gets the resolved page context node.</summary>
            <returns>the resolved page context node</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageContextProperties.GetResolvedPageMarginBoxes">
            <summary>Gets the resolved page margin boxes.</summary>
            <returns>the resolved page margin boxes</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.PageCountElement">
            <summary>
            <see cref="T:iText.Layout.Element.Text"/>
            implementation to be used for the page count.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageCountElement.#ctor">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.PageCountElement"/>.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageCountElement.#ctor(iText.Html2pdf.Css.Resolve.Func.Counter.CounterDigitsGlyphStyle)">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.PageCountElement"/>.
            </summary>
            <param name="digitsGlyphStyle">digits glyph style</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageCountElement.GetDigitsGlyphStyle">
            <summary>Gets glyph style for digits.</summary>
            <returns>name of the glyph style</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.PageCountRenderer">
            <summary>
            <see cref="T:iText.Layout.Renderer.TextRenderer"/>
            implementation for the page count.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageCountRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.PageCountElement)">
            <summary>Instantiates a new page count renderer.</summary>
            <param name="textElement">the text element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageCountRenderer.GetNextRenderer">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageCountRenderer.CreateCopy(iText.IO.Font.Otf.GlyphLine,iText.Kernel.Font.PdfFont)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.PageCountType">
            <summary>Enumeration of page count types.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageCountType.CURRENT_PAGE_NUMBER">
            <summary>Type for the current page number.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageCountType.TOTAL_PAGE_COUNT">
            <summary>Type for the total page count.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageMarginBoxBuilder.RemoveAreaBreaks(iText.Layout.Renderer.IRenderer)">
            <summary>Gets rid of all page breaks that might have occurred inside page margin boxes because of the running elements.
                </summary>
            <param name="renderer">root renderer of renderers subtree</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageMarginBoxBuilder.CalculatePageMarginBoxDimensions(iText.Html2pdf.Attach.Impl.Layout.DimensionContainer,iText.Html2pdf.Attach.Impl.Layout.DimensionContainer,iText.Html2pdf.Attach.Impl.Layout.DimensionContainer,System.Single)">
            <summary>
            See the algorithm detailed at https://www.w3.org/TR/css3-page/#margin-dimension
            Divide the available dimension along the A,B and C according to their properties.
            </summary>
            <param name="dimA">object containing the dimension-related properties of A</param>
            <param name="dimB">object containing the dimension-related properties of B</param>
            <param name="dimC">object containing the dimension-related properties of C</param>
            <param name="availableDimension">maximum available dimension that can be taken up</param>
            <returns>float[3] containing the distributed dimensions of A at [0], B at [1] and C at [2]</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageMarginBoxBuilder.GetStartCoordForCenterOrMiddleBox(System.Single,System.Single,System.Single)">
            <summary>Calculate the starting coordinate in a given dimension for a center of middle box</summary>
            <param name="availableDimension">size of the available area</param>
            <param name="dimensionResult">the calculated dimensions of the middle (center) box</param>
            <param name="offset">offset from the start of the page (page margins and padding included)</param>
            <returns>starting coordinate in a given dimension for a center of middle box</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageMarginBoxBuilder.SetManualDimension(iText.Html2pdf.Attach.Impl.Layout.DimensionContainer,System.Single[],System.Int32)">
            <summary>Set the calculated dimension to the manually set dimension in the passed float array</summary>
            <param name="dim">Dimension Container containing the manually set dimension</param>
            <param name="dimensions">array of calculated auto values for boxes in the given dimension</param>
            <param name="index">position in the array to replace</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageMarginBoxBuilder.DistributeDimensionBetweenTwoBoxes(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Distribute the available dimension between two boxes A and C based on their content-needs.</summary>
            <remarks>
            Distribute the available dimension between two boxes A and C based on their content-needs.
            The box with more content will get more space assigned
            </remarks>
            <param name="maxContentDimensionA">maximum of the dimension the content in A occupies</param>
            <param name="minContentDimensionA">minimum of the dimension the content in A occupies</param>
            <param name="maxContentDimensionC">maximum of the dimension the content in C occupies</param>
            <param name="minContentDimensionC">minimum of the dimension the content in C occupies</param>
            <param name="availableDimension">maximum available dimension to distribute</param>
            <returns>float[2], distributed dimension for A in [0], distributed dimension for B in [1]</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageMarginBoxBuilder.RecalculateIfNecessary(iText.Html2pdf.Attach.Impl.Layout.DimensionContainer,System.Single[],System.Int32)">
            <summary>Check if a calculated dimension value needs to be recalculated</summary>
            <param name="dim">Dimension container containing min and max dimension info</param>
            <param name="dimensions">array of calculated auto values for boxes in the given dimension</param>
            <param name="index">position in the array to look at</param>
            <returns><c>true</c> if the values in dimensions trigger a recalculation, <c>false</c> otherwise</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageMarginBoxBuilder.CalculateMarginBoxRectanglesCornersOnly">
            <summary>Calculate the margin boxes given the list of margin boxes that have generated content</summary>
            <returns>
            Rectangle[12] containing the calculated bounding boxes of the margin-box-nodes. Rectangles with 0 width and/or height
            refer to empty boxes. The order is TLC(top-left-corner)-TL-TC-TY-TRC-RT-RM-RB-RBC-BR-BC-BL-BLC-LB-LM-LT
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageMarginBoxBuilder.CalculateContainingBlockSizesForMarginBox(System.Int32,iText.Kernel.Geom.Rectangle)">
            <summary>Calculate containing block sizes for margin box.</summary>
            <param name="marginBoxInd">the margin box index</param>
            <param name="pageMarginBoxRectangle">
            a
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            defining dimensions of the page margin box corresponding to the given index
            </param>
            <returns>the corresponding rectangle</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageMarginBoxBuilder.MapMarginBoxNameToIndex(System.String)">
            <summary>Maps a margin box name to an index.</summary>
            <param name="marginBoxName">the margin box name</param>
            <returns>the index corresponding with the margin box name</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.PageSizeParser">
            <summary>The Class PageSizeParser.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Layout.PageSizeParser.pageSizeConstants">
            <summary>A Map mapping page size names to page size values.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageSizeParser.FetchPageSize(System.String,System.Single,System.Single,iText.Kernel.Geom.PageSize)">
            <summary>Fetch the page size.</summary>
            <param name="pageSizeStr">the name of the page size ("a4", "letter",...)</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <param name="defaultPageSize">the default page size</param>
            <returns>the page size</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageSizeParser.ParsePageLengthValue(System.String[],System.Single,System.Single)">
            <summary>Parses a page length value into a page size.</summary>
            <param name="pageSizeChunks">array of string values that represent the page size</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <returns>the page size</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageSizeParser.TryParsePageLengthValue(System.String,System.Single,System.Single)">
            <summary>Try to parse a page length value.</summary>
            <param name="valueChunk">a string containing a value</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <returns>the value as a float</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageSizeParser.IsLengthValue(System.String)">
            <summary>Checks if a string represents length value.</summary>
            <param name="pageSizeChunk">the string that possibly represents a length value</param>
            <returns>true, if the string represents a length value</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageSizeParser.IsLandscapePortraitValue(System.String)">
            <summary>Checks if a string represents the CSS value for landscape or portrait orientation.</summary>
            <param name="pageSizeChunk">the string that possibly represents a landscape or portrait value</param>
            <returns>true, if the string represents a landscape or portrait value</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.PageTargetCountElement">
            <summary>
            <see cref="T:iText.Layout.Element.Text"/>
            implementation to be used for the page target-counter.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageTargetCountElement.#ctor(System.String)">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.PageTargetCountElement"/>.
            </summary>
            <param name="target">name of the corresponding target</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageTargetCountElement.#ctor(System.String,iText.Html2pdf.Css.Resolve.Func.Counter.CounterDigitsGlyphStyle)">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.PageTargetCountElement"/>.
            </summary>
            <param name="target">name of the corresponding target</param>
            <param name="digitsGlyphStyle">digits glyph style</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageTargetCountElement.GetTarget">
            <summary>Gets element's target.</summary>
            <returns>target which was specified for this element.</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageTargetCountElement.GetDigitsGlyphStyle">
            <summary>Gets glyph style for digits.</summary>
            <returns>name of the glyph style</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageTargetCountElement.MakeNewRenderer">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.PageTargetCountRenderer">
            <summary>
            <see cref="T:iText.Layout.Renderer.TextRenderer"/>
            implementation for the page target-counter.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageTargetCountRenderer.#ctor(iText.Html2pdf.Attach.Impl.Layout.PageTargetCountElement)">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.PageTargetCountRenderer"/>.
            </summary>
            <param name="textElement">the text element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageTargetCountRenderer.Layout(iText.Layout.Layout.LayoutContext)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageTargetCountRenderer.Draw(iText.Layout.Renderer.DrawContext)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageTargetCountRenderer.GetNextRenderer">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageTargetCountRenderer.CreateCopy(iText.IO.Font.Otf.GlyphLine,iText.Kernel.Font.PdfFont)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.PageTargetCountRenderer.ResolveFonts(System.Collections.Generic.IList{iText.Layout.Renderer.IRenderer})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.RunningElement">
            <summary>
            An
            <see cref="T:iText.Layout.Element.IElement"/>
            that serves as a placeholder for removed running element
            from the normal flow.
            </summary>
            <remarks>
            An
            <see cref="T:iText.Layout.Element.IElement"/>
            that serves as a placeholder for removed running element
            from the normal flow. This element is designed to register where particular running element would have been placed.
            </remarks>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.RunningElement.#ctor(iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer)">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.RunningElement"/>.
            </summary>
            <param name="runningElementContainer">a container for the actual running element removed from the normal flow.
                </param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.RunningElement.RunningElementRenderer">
            <summary>It's an empty div so it's not expected to be ever split between areas.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer">
            <summary>A wrapper for the running elements taken out of the normal flow.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ITagWorker)">
            <summary>
            Initializes a new instance of
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer"/>
            that contains
            given running element
            <see cref="T:iText.StyledXmlParser.Node.IElementNode"/>
            and
            <see cref="T:iText.Html2pdf.Attach.ITagWorker"/>
            instances.
            </summary>
            <param name="runningElement">
            the
            <see cref="T:iText.StyledXmlParser.Node.IElementNode"/>
            of the running element.
            </param>
            <param name="processedElementWorker">
            the
            <see cref="T:iText.Html2pdf.Attach.ITagWorker"/>
            that was created for the running element
            and have been already completely processed (with all running element children).
            </param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer.SetOccurrencePage(System.Int32,System.Boolean)">
            <summary>Sets the page on which underlying running element was to be placed.</summary>
            <param name="pageNum">the 1-based index of the page on which running element was to be placed.</param>
            <param name="firstOnPage">specifies if the given running element would have placed as the first element on the page or not.
                </param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer.GetOccurrencePage">
            <summary>Gets the page on which underlying running element was to be placed.</summary>
            <returns>the 1-based index of the page or 0 if element page is not yet defined.</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer.IsFirstOnPage">
            <summary>Specifies if the given running element would have placed as the first element on the page or not.
                </summary>
            <remarks>
            Specifies if the given running element would have placed as the first element on the page or not.
            Returned value only makes sense if
            <see cref="M:iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer.GetOccurrencePage"/>
            returns value greater than 0.
            </remarks>
            <returns>true if it would be the first element on the page, otherwise false.</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.LinkContext">
            <summary>This class keeps track of information regarding link (destinations) that occur in the document.</summary>
            <remarks>
            This class keeps track of information regarding link (destinations) that occur in the document.
            Doing so enables us to drastically trim the amount of PdfDestinations that will end up being included in the document.
            For performance reasons it was decided to scan the DOM tree only once and store the result in a separate object
            (this object) in the ProcessorContext.
            <para />
            This class is not reusable and a new instance shall be created for every new conversion process.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.LinkContext.linkDestinations">
            <summary>the ids currently in use as valid link destinations</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.LinkContext.#ctor">
            <summary>Construct an (empty) LinkContext</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.LinkContext.ScanForIds(iText.StyledXmlParser.Node.INode)">
            <summary>Scan the DOM tree for all (internal) link targets</summary>
            <param name="root">the DOM tree root node</param>
            <returns>this LinkContext</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.LinkContext.IsUsedLinkDestination(System.String)">
            <summary>Returns whether a given (internal) link destination is used by at least one href element in the document
                </summary>
            <param name="linkDestination">link destination</param>
            <returns>whether a given (internal) link destination is used by at least one href element in the document</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.OutlineHandler">
            <summary>
            A
            <see cref="T:iText.Html2pdf.Attach.Impl.OutlineHandler"/>
            handles creating outlines for tags.
            </summary>
            <remarks>
            A
            <see cref="T:iText.Html2pdf.Attach.Impl.OutlineHandler"/>
            handles creating outlines for tags.
            <para />
            This class is not reusable and a new instance shall be created for every new conversion process.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.OutlineHandler.DEFAULT_DESTINATION_NAME_PREFIX">
            <summary>The Constant DEFAULT_DESTINATION_PREFIX.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.OutlineHandler.destCounter">
            <summary>The destination counter.</summary>
            <remarks>
            The destination counter.
            Counts the number of created the destinations with the same prefix in name,
            to achieve the uniqueness of the destination names.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.OutlineHandler.currentOutline">
            <summary>The current outline.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.OutlineHandler.destinationsInProcess">
            <summary>The destinations in process.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.OutlineHandler.levelsInProcess">
            <summary>The levels in process.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.OutlineHandler.tagPrioritiesMapping">
            <summary>The tag priorities mapping.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.OutlineHandler.destinationNamePrefix">
            <summary>The destination prefix.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.CreateStandardHandler">
            <summary>Creates an OutlineHandler with standard predefined mappings.</summary>
            <returns>the outline handler</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.PutTagPriorityMapping(System.String,System.Nullable{System.Int32})">
            <summary>Put tag priority mapping.</summary>
            <param name="tagName">the tag name</param>
            <param name="priority">the priority</param>
            <returns>the outline handler</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.PutAllTagPriorityMappings(System.Collections.Generic.IDictionary{System.String,System.Nullable{System.Int32}})">
            <summary>Put all tag priority mappings.</summary>
            <param name="mappings">the mappings</param>
            <returns>the outline handler</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.GetTagPriorityMapping(System.String)">
            <summary>Gets the tag priority mapping.</summary>
            <param name="tagName">the tag name</param>
            <returns>the tag priority mapping</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.HasTagPriorityMapping(System.String)">
            <summary>Checks for tag priority mapping.</summary>
            <param name="tagName">the tag name</param>
            <returns>true, if the tag name is listed in the tag priorities mapping</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.Reset">
            <summary>
            Resets the current state so that this
            <see cref="T:iText.Html2pdf.Attach.Impl.OutlineHandler"/>
            is ready to process new document
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.SetDestinationNamePrefix(System.String)">
            <summary>Sets the destination name prefix.</summary>
            <remarks>
            Sets the destination name prefix.
            The destination name prefix serves as the prefix for the destination names created in the
            <see cref="M:iText.Html2pdf.Attach.Impl.OutlineHandler.GenerateUniqueDestinationName(iText.StyledXmlParser.Node.IElementNode)"/>
            method.
            </remarks>
            <param name="destinationNamePrefix">the destination name prefix</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.GetDestinationNamePrefix">
            <summary>Gets the destination name prefix.</summary>
            <remarks>
            Gets the destination name prefix.
            The destination name prefix serves as the prefix for the destination names created in the
            <see cref="M:iText.Html2pdf.Attach.Impl.OutlineHandler.GenerateUniqueDestinationName(iText.StyledXmlParser.Node.IElementNode)"/>
            method.
            </remarks>
            <returns>the destination name prefix</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.GenerateUniqueDestinationName(iText.StyledXmlParser.Node.IElementNode)">
            <summary>Generate the unique destination name.</summary>
            <remarks>
            Generate the unique destination name.
            The destination name is a unique identifier for the outline so it is generated for the outline
            in the
            <see cref="M:iText.Html2pdf.Attach.Impl.OutlineHandler.AddOutlineAndDestToDocument(iText.Html2pdf.Attach.ITagWorker,iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)"/>
            method. You can override this method to set
            your own way to generate the destination names, to avoid the destination name conflicts when
            merging several PDF files created by html2pdf.
            </remarks>
            <param name="element">the element</param>
            <returns>the unique destination name</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.GenerateOutlineName(iText.StyledXmlParser.Node.IElementNode)">
            <summary>Generate the outline name.</summary>
            <remarks>
            Generate the outline name.
            This method is used in the
            <see cref="M:iText.Html2pdf.Attach.Impl.OutlineHandler.AddOutlineAndDestToDocument(iText.Html2pdf.Attach.ITagWorker,iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)"/>
            method.
            You can override this method to set your own way to generate the outline names.
            </remarks>
            <param name="element">the element</param>
            <returns>the unique destination name</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.AddOutlineAndDestToDocument(iText.Html2pdf.Attach.ITagWorker,iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>Adds the outline and the destination.</summary>
            <remarks>
            Adds the outline and the destination.
            Adds the outline and its corresponding the destination to the PDF document
            if the priority mapping is set for the element.
            </remarks>
            <param name="tagWorker">the tag worker</param>
            <param name="element">the element</param>
            <param name="context">the processor context</param>
            <returns>the outline handler</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.SetDestinationToElement(iText.Html2pdf.Attach.ITagWorker,iText.StyledXmlParser.Node.IElementNode)">
            <summary>Sets the destination to element.</summary>
            <remarks>
            Sets the destination to element.
            Sets the destination previously created in the
            <see cref="M:iText.Html2pdf.Attach.Impl.OutlineHandler.AddOutlineAndDestToDocument(iText.Html2pdf.Attach.ITagWorker,iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)"/>
            method
            to the tag worker element.
            </remarks>
            <param name="tagWorker">the tag worker</param>
            <param name="element">the element</param>
            <returns>the outline handler</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.OutlineHandler.GetUniqueID(System.String)">
            <summary>Gets the unique ID.</summary>
            <remarks>
            Gets the unique ID.
            This method is used in the
            <see cref="M:iText.Html2pdf.Attach.Impl.OutlineHandler.GenerateUniqueDestinationName(iText.StyledXmlParser.Node.IElementNode)"/>
            method to generate the unique
            destination names and in the
            <see cref="M:iText.Html2pdf.Attach.Impl.OutlineHandler.GenerateOutlineName(iText.StyledXmlParser.Node.IElementNode)"/>
            method to generate the unique
            outline names. The
            <see cref="F:iText.Html2pdf.Attach.Impl.OutlineHandler.destCounter"/>
            map serves to achieve the uniqueness of an ID.
            </remarks>
            <param name="key">the key</param>
            <returns>the unique ID</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.AbbrTagWorker">
            <summary>
            Tag worker class for the
            <c>abbr</c>
            element.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.AbbrTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.AbbrTagWorker"/>
            instance.
            </summary>
            <param name="element">the tag</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.AbbrTagWorker.EnrichSpan(System.String)">
            <summary>Enrich the span with accessibility features, more specifically the expansion text.</summary>
            <param name="expansionText">the expansion text</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.ABlockTagWorker">
            <summary>TagWorker class for a link block.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ABlockTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.ABlockTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.ATagWorker">
            <summary>
            TagWorker class for the
            <c>a</c>
            element.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ATagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.ATagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.BodyTagWorker">
            <summary>
            TagWorker class for the
            <c>body</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.BodyTagWorker.parentTagWorker">
            <summary>The parent tag worker.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.BodyTagWorker.lang">
            <summary>The lang attribute value.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.BodyTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.BodyTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.BrTagWorker">
            <summary>
            TagWorker class for the
            <c>br</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.BrTagWorker.newLine">
            <summary>A new line Text element.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.BrTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.BrTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.ButtonTagWorker">
            <summary>TagWorker class for a button element.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ButtonTagWorker.DEFAULT_BUTTON_NAME">
            <summary>The Constant DEFAULT_BUTTON_NAME.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ButtonTagWorker.formField">
            <summary>The button.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ButtonTagWorker.lang">
            <summary>The lang attribute value.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ButtonTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.ButtonTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.CaptionTagWorker">
            <summary>
            TagWorker class for the
            <c>caption</c>
            element.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.CaptionTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.CaptionTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.ColgroupTagWorker">
            <summary>TagWorker class for a column group.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ColgroupTagWorker.colgroup">
            <summary>The column group.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ColgroupTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.ColgroupTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ColgroupTagWorker.GetColgroup">
            <summary>Gets the column group.</summary>
            <returns>the column group</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.ColTagWorker">
            <summary>TagWorker class for a column.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ColTagWorker.col">
            <summary>The column.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ColTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.ColTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ColTagWorker.GetColumn">
            <summary>Gets the column.</summary>
            <returns>the column</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.DisplayFlexTagWorker">
            <summary>
            <see cref="T:iText.Html2pdf.Attach.ITagWorker"/>
            implementation for elements with
            <c>display: flex</c>.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayFlexTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates instance of
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.DisplayFlexTagWorker"/>.
            </summary>
            <param name="element">the element with defined styles</param>
            <param name="context">the context of the converter processor</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker">
            <summary>TagWorker class for a table row element.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker.rowWrapper">
            <summary>The row wrapper.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker.inlineHelper">
            <summary>The helper class for waiting inline elements.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker.waitingCell">
            <summary>The cell waiting for flushing.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker.lang">
            <summary>The lang attribute value.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker.GetTableRowWrapper">
            <summary>Gets the table row wrapper.</summary>
            <returns>the table row wrapper</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker.ProcessCell(iText.Layout.Element.Cell,System.Boolean)">
            <summary>Processes a cell.</summary>
            <param name="cell">the cell</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker.FlushInlineElementsToWaitingCell">
            <summary>Flushes inline elements to the waiting cell.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker.FlushWaitingCell">
            <summary>Flushes the waiting cell.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableRowTagWorker.CreateWrapperCell">
            <summary>Creates a wrapper cell.</summary>
            <returns>the cell</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker">
            <summary>TagWorker class for a table element.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.table">
            <summary>The table.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.tableWrapper">
            <summary>The table wrapper.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.inlineHelper">
            <summary>The helper class for waiting inline elements.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.waitingCell">
            <summary>The cell waiting for flushing.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.currentRowIsFinished">
            <summary>The flag which indicates whether.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.ProcessCell(iText.Layout.Element.Cell,System.Boolean)">
            <summary>Processes a cell.</summary>
            <param name="cell">the cell</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.FlushInlineElementsToWaitingCell">
            <summary>Flushes inline elements to the waiting cell.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.FlushWaitingCell">
            <summary>Flushes the waiting cell.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DisplayTableTagWorker.CreateWrapperCell">
            <summary>Creates a wrapper cell.</summary>
            <returns>the cell</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.DivTagWorker">
            <summary>
            TagWorker class for the
            <c>div</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DivTagWorker.div">
            <summary>The div element.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DivTagWorker.inlineHelper">
            <summary>Helper class for waiting inline elements.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.DivTagWorker.display">
            <summary>The display value.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DivTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.DivTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DivTagWorker.AddBlockChild(iText.Layout.Element.IElement)">
            <summary>Adds a child element to the div block.</summary>
            <param name="element">the element</param>
            <returns>true, if successful</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.DivTagWorker.PostProcessInlineGroup">
            <summary>Post-processes the hanging leaves of the waiting inline elements.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.HrTagWorker">
            <summary>
            TagWorker class for the
            <c>hr</c>
            element.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.HrTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.HrTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.HTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.HTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.HtmlTagWorker">
            <summary>
            TagWorker class for the
            <c>html</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.HtmlTagWorker.document">
            <summary>The iText document instance.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.HtmlTagWorker.inlineHelper">
            <summary>Helper class for waiting inline elements.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.HtmlTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.HtmlTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.HtmlTagWorker.ProcessPageRules(iText.StyledXmlParser.Node.INode,iText.StyledXmlParser.Css.ICssResolver,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>Processes the page rules.</summary>
            <param name="rootNode">the root node</param>
            <param name="cssResolver">the css resolver</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.HtmlTagWorker.ProcessBlockChild(iText.Layout.IPropertyContainer)">
            <summary>Processes a block child.</summary>
            <param name="element">the element</param>
            <returns>true, if successful</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.HtmlTagWorker.PostProcessInlineGroup">
            <summary>Post-processes the hanging leaves of the waiting inline elements.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.IDisplayAware">
            <summary>
            Interface for those TagWorker implementations that deal
            with tags that can have a display value.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.IDisplayAware.GetDisplay">
            <summary>Gets the display value.</summary>
            <returns>the display value</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker">
            <summary>
            TagWorker class for the
            <c>img</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.LOGGER">
            <summary>The logger.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.image">
            <summary>The image.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.display">
            <summary>The display value.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.GetDisplay">
            <summary>Gets the display value.</summary>
            <returns>the display value</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.HtmlImage">
            <summary>Implementation of the Image class when used in the context of HTML to PDF conversion.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.HtmlImage.dimensionMultiplier">
            <summary>
            In iText, we use user unit for the image sizes (and by default
            one user unit = one point), whereas images are usually measured
            in pixels.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.HtmlImage.#ctor(iText.Kernel.Pdf.Xobject.PdfImageXObject)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.HtmlImage"/>
            instance.
            </summary>
            <param name="xObject">an Image XObject</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.HtmlImage.#ctor(iText.Kernel.Pdf.Xobject.PdfFormXObject)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker.HtmlImage"/>
            instance.
            </summary>
            <param name="xObject">an Image XObject</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.InputTagWorker">
            <summary>
            TagWorker class for the
            <c>input</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.InputTagWorker.formElement">
            <summary>The form element.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.InputTagWorker.display">
            <summary>The display.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.InputTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.InputTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.LinkTagWorker">
            <summary>
            TagWorker class for the
            <c>link</c>
            element.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.LinkTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.LinkTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.LiTagWorker">
            <summary>
            TagWorker class for the
            <c>li</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.LiTagWorker.listItem">
            <summary>The list item.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.LiTagWorker.list">
            <summary>The list.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.LiTagWorker.inlineHelper">
            <summary>The inline helper.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.LiTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.LiTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.LiTagWorker.ProcessChild(iText.Layout.IPropertyContainer)">
            <summary>Processes a child.</summary>
            <param name="propertyContainer">the property container</param>
            <returns>true, if successful</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.MetaTagWorker">
            <summary>
            TagWorker class for the
            <c>meta</c>
            element.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.MetaTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.MetaTagWorker"/>
            instance.
            </summary>
            <param name="tag">the tag</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.ObjectTagWorker">
            <summary>
            TagWorker class for the
            <c>object</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ObjectTagWorker.LOGGER">
            <summary>The logger.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ObjectTagWorker.processUtil">
            <summary>Helper for conversion of SVG processing results.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ObjectTagWorker.image">
            <summary>An Outcome of the worker.</summary>
            <remarks>An Outcome of the worker. The Svg as image.</remarks>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.ObjectTagWorker.res">
            <summary>Output of SVG processing.</summary>
            <remarks>Output of SVG processing.  Intermediate result.</remarks>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ObjectTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.ImgTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.OptGroupTagWorker">
            <summary>
            TagWorker class for the
            <c>optgroup</c>
            element.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.OptGroupTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.OptGroupTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.OptionTagWorker">
            <summary>
            TagWorker class for the
            <c>option</c>
            element.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.OptionTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.OptionTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.PageCountWorker">
            <summary>TagWorker class for the page count.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.PageCountWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.PageCountWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.PageMarginBoxWorker">
            <summary>TagWorker class for the page margin box.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.PageMarginBoxWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.PageMarginBoxWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.PlaceholderTagWorker">
            <summary>
            TagWorker class for the
            <c>input</c>
            's placeholder.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.PreTagWorker">
            <summary>
            TagWorker class for the
            <c>pre</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.PreTagWorker.anyContentProcessed">
            <summary>Keeps track to see if any content was processed.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.PreTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.PreTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.PTagWorker">
            <summary>
            TagWorker class for the
            <c>p</c>
            element.
            </summary>
            <remarks>
            TagWorker class for the
            <c>p</c>
            element.
            <para />
            This is how this worker processes the &lt;p&gt; tag:
            <list type="bullet">
            <item><description> if the worker meets a text or an inline element, it processes them with a help of
            the
            <see cref="T:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper"/>
            instance
            </description></item>
            <item><description> if the worker meets a block element without inline displaying or
            an inline element with the
            <c>display: block</c>
            style, it wraps all the content which hasn't been handled yet
            into a
            <c>com.itextpdf.layout.element.Paragraph</c>
            object and adds this paragraph to the resultant
            <c>com.itextpdf.layout.element.Div</c>
            object
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.PTagWorker.lastParagraph">
            <summary>The latest paragraph object inside tag.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.PTagWorker.elementsContainer">
            <summary>The container which handles the elements that are present in the &lt;p&gt; tag.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.PTagWorker.inlineHelper">
            <summary>Helper class for waiting inline elements.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.PTagWorker.display">
            <summary>The display value.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.PTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.PTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.RunningElementTagWorker">
            <summary>TagWorker class for the running elements taken out of the normal flow.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.SelectTagWorker">
            <summary>
            TagWorker class for the
            <c>select</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.SelectTagWorker.selectElement">
            <summary>The form element.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.SelectTagWorker.display">
            <summary>The display.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.SelectTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.SelectTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker">
            <summary>
            TagWorker class for the
            <c>span</c>
            tag.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.spanWrapper">
            <summary>The span wrapper.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.elements">
            <summary>A list of elements belonging to the span.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.ownLeafElements">
            <summary>The own leaf elements.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.inlineHelper">
            <summary>The helper object for waiting inline elements.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.display">
            <summary>The display value.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.textTransform">
            <summary>The text-transform value.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the processor context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.GetAllElements">
            <summary>Gets all the elements in the span.</summary>
            <returns>a list of elements</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.GetOwnLeafElements">
            <summary>Gets the span's own leaf elements.</summary>
            <returns>the own leaf elements</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.GetElementDisplay(iText.Layout.IPropertyContainer)">
            <summary>
            The child shall be one from
            <see cref="M:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.GetAllElements"/>
            list.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.FlushInlineHelper">
            <summary>Flushes the waiting leaf elements.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.SpanTagWorker.SetCapitalizeProperty(System.Collections.Generic.ICollection{iText.Layout.Element.IElement})">
            <summary>
            Sets property that indicates whether the element should be capitalized, for
            <see cref="T:iText.Layout.Element.Text"/>
            elements only.
            </summary>
            <param name="elements">elements to which properties will be added</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.SvgTagWorker">
            <summary>
            TagWorker class for the
            <c>svg</c>
            element.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.SvgTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.SvgTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.TableFooterTagWorker">
            <summary>TagWorker class for the footer of a table.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TableFooterTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.TableFooterTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.TableHeaderTagWorker">
            <summary>TagWorker class for the header of a table.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TableHeaderTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <c>TableHeaderTagWorker</c>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker">
            <summary>
            TagWorker class for the
            <c>table</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.tableWrapper">
            <summary>The table wrapper.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.table">
            <summary>The table.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.footer">
            <summary>The footer.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.header">
            <summary>The header.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.parentTagWorker">
            <summary>The parent tag worker.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.colgroupsHelper">
            <summary>The colgroups helper.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.display">
            <summary>The display value.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.SetFooter">
            <summary>
            Method to indicate that this is actually a
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.TableFooterTagWorker"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.SetHeader">
            <summary>
            Method to indicate that this is actually a
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.TableHeaderTagWorker"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TableTagWorker.ApplyColStyles">
            <summary>Applies the column styles.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.TdTagWorker">
            <summary>
            TagWorker class for the
            <c>td</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TdTagWorker.cell">
            <summary>The cell.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TdTagWorker.inlineHelper">
            <summary>The inline helper.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TdTagWorker.display">
            <summary>The display.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TdTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.TdTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TdTagWorker.ProcessChild(iText.Layout.IPropertyContainer)">
            <summary>Processes a child element.</summary>
            <param name="propertyContainer">the property container</param>
            <returns>true, if successful</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.TextAreaTagWorker">
            <summary>
            TagWorker class for the
            <c>textarea</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TextAreaTagWorker.DEFAULT_TEXTAREA_NAME">
            <summary>The Constant DEFAULT_TEXTAREA_NAME.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TextAreaTagWorker.textArea">
            <summary>The text area.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TextAreaTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.TextAreaTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.ThTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.ThTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.TitleTagWorker">
            <summary>
            TagWorker class for the
            <c>title</c>
            element.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TitleTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.TitleTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.TrTagWorker">
            <summary>
            TagWorker class for the
            <c>tr</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TrTagWorker.rowWrapper">
            <summary>The row wrapper.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TrTagWorker.parentTagWorker">
            <summary>The parent tag worker.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.TrTagWorker.lang">
            <summary>The lang attribute value.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TrTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.TrTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.TrTagWorker.GetTableRowWrapper">
            <summary>Gets the table row wrapper.</summary>
            <returns>the table row wrapper</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Impl.Tags.UlOlTagWorker">
            <summary>
            TagWorker class for the
            <c>ul</c>
            and
            <c>ol</c>
            elements.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.UlOlTagWorker.list">
            <summary>The list object.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Impl.Tags.UlOlTagWorker.inlineHelper">
            <summary>Helper class for waiting inline elements.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.UlOlTagWorker.#ctor(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Impl.Tags.UlOlTagWorker"/>
            instance.
            </summary>
            <param name="element">the element</param>
            <param name="context">the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.UlOlTagWorker.ProcessUnlabeledListItem">
            <summary>Processes an unlabeled list item.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.UlOlTagWorker.AddUnlabeledListItem(iText.Layout.Element.IBlockElement)">
            <summary>Adds an unlabeled list item.</summary>
            <param name="item">the item</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Impl.Tags.UlOlTagWorker.AddBlockChild(iText.Layout.IPropertyContainer)">
            <summary>Adds a child.</summary>
            <param name="child">the child</param>
            <returns>true, if successful</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.ITagWorker">
            <summary>Interface for all the tag worker implementations.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.ITagWorker.ProcessEnd(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>Placeholder for what needs to be done after the content of a tag has been processed.</summary>
            <param name="element">the element node</param>
            <param name="context">the processor context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.ITagWorker.ProcessContent(System.String,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>Placeholder for what needs to be done while the content of a tag is being processed.</summary>
            <param name="content">the content of a node</param>
            <param name="context">the processor context</param>
            <returns>true, if content was successfully processed, otherwise false.</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ITagWorker.ProcessTagChild(iText.Html2pdf.Attach.ITagWorker,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>Placeholder for what needs to be done when a child node is being processed.</summary>
            <param name="childTagWorker">the tag worker of the child node</param>
            <param name="context">the processor context</param>
            <returns>true, if child was successfully processed, otherwise false.</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ITagWorker.GetElementResult">
            <summary>
            Gets a processed object if it can be expressed as an
            <see cref="T:iText.Layout.IPropertyContainer"/>
            instance.
            </summary>
            <returns>
            the same object on every call.
            Might return null either if result is not yet produced or if this particular
            tag worker doesn't produce result in a form of
            <see cref="T:iText.Layout.IPropertyContainer"/>.
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.ITagWorkerFactory">
            <summary>
            <see cref="T:iText.Html2pdf.Attach.ITagWorkerFactory"/>
            interface is used for instantiating new
            <see cref="T:iText.Html2pdf.Attach.ITagWorker"/>
            objects.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.ITagWorkerFactory.GetTagWorker(iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <param name="tag">IElementNode</param>
            <param name="context">ProcessorContext</param>
            <returns>
            a
            <see cref="T:iText.Html2pdf.Attach.ITagWorker"/>
            instance constructed based on the passed parameters.
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.ProcessorContext">
            <summary>Keeps track of the context of the processor.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.fontProvider">
            <summary>The font provider.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.tempFonts">
            <summary>Temporary set of fonts used in the PDF.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.resourceResolver">
            <summary>The resource resolver.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.deviceDescription">
            <summary>The device description.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.tagWorkerFactory">
            <summary>The tag worker factory.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.cssApplierFactory">
            <summary>The CSS applier factory.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.baseUri">
            <summary>The base URI.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.createAcroForm">
            <summary>Indicates whether an AcroForm needs to be created.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.formFieldNameResolver">
            <summary>The form field name resolver.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.radioCheckResolver">
            <summary>The radio check resolver.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.outlineHandler">
            <summary>The outline handler.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.immediateFlush">
            <summary>Indicates whether the document should be opened in immediate flush or not</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.state">
            <summary>The state.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.cssContext">
            <summary>The CSS context.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.linkContext">
            <summary>The link context</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.pdfDocument">
            <summary>The PDF document.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.metaInfo">
            <summary>The Processor meta info</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.ProcessorContext.processingInlineSvg">
            <summary>Internal state variable to keep track of whether the processor is currently inside an inlineSvg</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.#ctor(iText.Html2pdf.ConverterProperties)">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.ProcessorContext"/>
            instance.
            </summary>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetLimitOfLayouts">
            <summary>Gets maximum number of layouts.</summary>
            <returns>layouts limit</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.SetFontProvider(iText.Layout.Font.FontProvider)">
            <summary>Sets the font provider.</summary>
            <param name="fontProvider">the new font provider</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetState">
            <summary>Gets the state.</summary>
            <returns>the state</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetPdfDocument">
            <summary>Gets the PDF document.</summary>
            <returns>the PDF document</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetFontProvider">
            <summary>Gets the font provider.</summary>
            <returns>the font provider</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetTempFonts">
            <summary>Gets the temporary set of fonts.</summary>
            <returns>the set of fonts</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetResourceResolver">
            <summary>Gets the resource resolver.</summary>
            <returns>the resource resolver</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetDeviceDescription">
            <summary>Gets the device description.</summary>
            <returns>the device description</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetTagWorkerFactory">
            <summary>Gets the tag worker factory.</summary>
            <returns>the tag worker factory</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetCssApplierFactory">
            <summary>Gets the CSS applier factory.</summary>
            <returns>the CSS applier factory</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetCssContext">
            <summary>Gets the CSS context.</summary>
            <returns>the CSS context</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetLinkContext">
            <summary>Gets the link context.</summary>
            <returns>the link context</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.IsCreateAcroForm">
            <summary>Checks if is an AcroForm needs to be created.</summary>
            <returns>true, an AcroForm should be created</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetFormFieldNameResolver">
            <summary>Gets the form field name resolver.</summary>
            <returns>the form field name resolver</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetRadioCheckResolver">
            <summary>Gets the radio check resolver.</summary>
            <returns>the radio check resolver</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetOutlineHandler">
            <summary>Gets the outline handler.</summary>
            <returns>the outline handler</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.AddTemporaryFont(iText.Layout.Font.FontInfo,System.String)">
            <summary>Add temporary font from @font-face.</summary>
            <param name="fontInfo">the font info</param>
            <param name="alias">the alias</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.AddTemporaryFont(iText.IO.Font.FontProgram,System.String,System.String)">
            <summary>Add temporary font from @font-face.</summary>
            <param name="fontProgram">the font program</param>
            <param name="encoding">the encoding</param>
            <param name="alias">the alias</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.AddTemporaryFont(iText.IO.Font.FontProgram,System.String,System.String,iText.Layout.Font.Range)">
            <summary>Add temporary font from @font-face.</summary>
            <param name="fontProgram">the font program</param>
            <param name="encoding">the encoding</param>
            <param name="alias">the alias</param>
            <param name="unicodeRange">the unicode range</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.HasFonts">
            <summary>Check fonts in font provider and temporary font set.</summary>
            <returns>true, if there is at least one font either in FontProvider or temporary FontSet.</returns>
            <seealso cref="M:iText.Html2pdf.Attach.ProcessorContext.AddTemporaryFont(iText.Layout.Font.FontInfo,System.String)"/>
            <seealso cref="M:iText.Html2pdf.Attach.ProcessorContext.AddTemporaryFont(iText.IO.Font.FontProgram,System.String,System.String)"/>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.Reset">
            <summary>Resets the context.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.Reset(iText.Kernel.Pdf.PdfDocument)">
            <summary>Resets the context, and assigns a new PDF document.</summary>
            <param name="pdfDocument">the new PDF document for the context</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetBaseUri">
            <summary>Gets the baseURI: the URI which has been set manually or the directory of the html file in case when baseURI hasn't been set manually.
                </summary>
            <returns>the baseUri</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.IsImmediateFlush">
            <summary>Checks if immediateFlush is set</summary>
            <returns>true if immediateFlush is set, false if not.</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.GetMetaInfoContainer">
            <summary>Gets html meta info container.</summary>
            <remarks>
            Gets html meta info container.
            <para />Meta info will be used to determine event origin.
            </remarks>
            <returns>html meta info container</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.SetMetaInfo(iText.Commons.Actions.Contexts.IMetaInfo)">
            <summary>Sets IMetaInfo to processor context.</summary>
            <param name="metaInfo">the IMetaInfo object</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.IsProcessingInlineSvg">
            <summary>Check if the processor is currently processing an inline svg</summary>
            <returns>True if the processor is processing an inline Svg, false otherwise.</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.StartProcessingInlineSvg">
            <summary>Set the processor to processing Inline Svg state</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.ProcessorContext.EndProcessingInlineSvg">
            <summary>End the processing Svg State</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.State">
            <summary>State machine to push, pop, peek,...</summary>
            <remarks>
            State machine to push, pop, peek,...
            <see cref="T:iText.Html2pdf.Attach.ITagWorker"/>
            instances to and from the
            <see cref="!:System.Collections.Stack&lt;E&gt;"/>.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Attach.State.stack">
            <summary>The stack.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.State.#ctor">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.Attach.State"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.State.GetStack">
            <summary>Gets the stack.</summary>
            <returns>the stack</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.State.Push(iText.Html2pdf.Attach.ITagWorker)">
            <summary>
            Pushes a
            <see cref="T:iText.Html2pdf.Attach.ITagWorker"/>
            instance to the stack.
            </summary>
            <param name="tagWorker">the tag worker</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.State.Pop">
            <summary>
            Pops a
            <see cref="T:iText.Html2pdf.Attach.ITagWorker"/>
            from the stack.
            </summary>
            <returns>the tag worker</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.State.Top">
            <summary>
            Peeks at the
            <see cref="T:iText.Html2pdf.Attach.ITagWorker"/>
            at the top of the stack.
            </summary>
            <returns>the tag worker at the top</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.State.Empty">
            <summary>Checks if the stack is empty.</summary>
            <returns>true, if the stack is empty</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Util.LinkHelper">
            <summary>Helper class for links.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.LinkHelper.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Util.LinkHelper"/>
            class.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.LinkHelper.ApplyLinkAnnotation(iText.Layout.IPropertyContainer,System.String)">
            <summary>Applies a link annotation.</summary>
            <param name="container">the containing object</param>
            <param name="url">the destination</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.LinkHelper.CreateDestination(iText.Html2pdf.Attach.ITagWorker,iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>Creates a destination</summary>
            <param name="tagWorker">the tagworker that is building the (iText) element</param>
            <param name="element">the (HTML) element being converted</param>
            <param name="context">the Processor context</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Util.RowColHelper">
            <summary>Helper class to keep track of the current column / row position in a table.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.RowColHelper.lastEmptyRow">
            <summary>The last empty row.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.RowColHelper.currRow">
            <summary>The current row index.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.RowColHelper.currCol">
            <summary>The current column index.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.RowColHelper.NewRow">
            <summary>Move to a new row.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.RowColHelper.UpdateCurrentPosition(System.Int32,System.Int32)">
            <summary>Update current position based on a colspan and a rowspan.</summary>
            <param name="colspan">the colspan</param>
            <param name="rowspan">the rowspan</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.RowColHelper.MoveToNextEmptyCol">
            <summary>Move to next empty column.</summary>
            <returns>the current column position</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.RowColHelper.CanPutCell(System.Int32)">
            <summary>Checks if we can put a new cell in the column.</summary>
            <param name="col">the column index</param>
            <returns>true, if successful</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.RowColHelper.EnsureRowIsStarted">
            <summary>Ensure that a row is started.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Util.TrimUtil">
            <summary>Utility class to trim content.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.TrimUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Util.TrimUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.TrimUtil.TrimLeafElementsAndSanitize(System.Collections.Generic.IList{iText.Layout.Element.IElement})">
            <summary>Trim leaf elements, and sanitize.</summary>
            <param name="leafElements">the leaf elements</param>
            <returns>the trimmed and sanitized list</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.TrimUtil.IsNonLineBreakSpace(System.Char)">
            <summary>Checks if a character is white space value that doesn't cause a newline.</summary>
            <param name="ch">the character</param>
            <returns>true, if the character is a white space character, but no newline</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.TrimUtil.TrimSubList(System.Collections.Generic.List{iText.Layout.Element.IElement},System.Int32,System.Int32,System.Boolean)">
            <summary>Trims a sub list of leaf elements.</summary>
            <param name="list">the list of leaf elements</param>
            <param name="begin">the index where to begin</param>
            <param name="end">the index where to end</param>
            <param name="last">indicates where to start, if true, we start at the end</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.TrimUtil.TrimTextElement(iText.Layout.Element.Text,System.Boolean)">
            <summary>Trims a text element.</summary>
            <param name="text">the text element</param>
            <param name="last">indicates where to start, if true, we start at the end</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.TrimUtil.GetIndexOfFirstNonSpace(iText.Layout.Element.Text)">
            <summary>Gets the index of first character that isn't white space in some text.</summary>
            <remarks>
            Gets the index of first character that isn't white space in some text.
            Note: newline characters aren't counted as white space characters.
            </remarks>
            <param name="text">the text</param>
            <returns>the index of first character that isn't white space</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.TrimUtil.GetIndexAfterLastNonSpace(iText.Layout.Element.Text)">
            <summary>Gets the index of last character following a character that isn't white space in some text.</summary>
            <remarks>
            Gets the index of last character following a character that isn't white space in some text.
            Note: newline characters aren't counted as white space characters.
            </remarks>
            <param name="text">the text</param>
            <returns>the index following the last character that isn't white space</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper">
            <summary>Helper class for waiting column groups.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.tableElement">
            <summary>The table element.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.colgroups">
            <summary>The column groups.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.maxIndex">
            <summary>The maximum value of the index.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.indexToColgroupMapping">
            <summary>The index to column group mapping.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.shiftCol">
            <summary>The shift values for the columns.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.#ctor(iText.StyledXmlParser.Node.IElementNode)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper"/>
            instance.
            </summary>
            <param name="tableElement">the table element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.Add(iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper)">
            <summary>Adds a column group.</summary>
            <param name="colgroup">the column group</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.ApplyColStyles">
            <summary>Applies column styles.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.GetColWrapper(System.Int32)">
            <summary>Gets a specific column.</summary>
            <param name="index">the index of the column</param>
            <returns>the column</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.ApplyColStyles(iText.StyledXmlParser.Node.INode,iText.Html2pdf.Attach.Util.RowColHelper)">
            <summary>Applies column styles.</summary>
            <param name="node">the node</param>
            <param name="rowColHelper">the helper class to keep track of the position inside the table</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingColgroupsHelper.FinalizeColgroups">
            <summary>Finalizes the column groups.</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper">
            <summary>Helper class for waiting inline elements.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.textTransform">
            <summary>A value that defines how to transform text.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.keepLineBreaks">
            <summary>Indicates whether line breaks need to be preserved.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.collapseSpaces">
            <summary>Indicates whether white space characters need to be collapsed.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.waitingLeaves">
            <summary>List of waiting leaf elements.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.#ctor(System.String,System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper"/>
            instance.
            </summary>
            <param name="whiteSpace">we'll check if this value equals "pre" or "pre-wrap"</param>
            <param name="textTransform">will define the transformation that needs to be applied to the text</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.Add(System.String)">
            <summary>Adds text to the waiting leaves.</summary>
            <param name="text">the text</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.Add(iText.Layout.Element.ILeafElement)">
            <summary>Adds a leaf element to the waiting leaves.</summary>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.AddAll(System.Collections.Generic.ICollection{iText.Layout.Element.ILeafElement})">
            <summary>Adds a collecton of leaf elements to the waiting leaves.</summary>
            <param name="collection">the collection</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.FlushHangingLeaves(iText.Layout.IPropertyContainer)">
            <summary>Flush hanging leaves.</summary>
            <param name="container">a container element</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.CreateLeavesContainer">
            <summary>Creates the leaves container.</summary>
            <returns>a paragraph</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.GetWaitingLeaves">
            <summary>Gets the waiting leaves.</summary>
            <returns>the waiting leaves</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.GetSanitizedWaitingLeaves">
            <summary>Gets the sanitized waiting leaves.</summary>
            <returns>the sanitized waiting leaves</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.ClearWaitingLeaves">
            <summary>Clears the waiting leaves.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.CreateParagraphContainer">
            <summary>Creates a paragraph container.</summary>
            <returns>the paragraph container</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Util.WaitingInlineElementsHelper.Capitalize(System.Collections.Generic.IList{iText.Layout.Element.IElement})">
            <summary>Capitalizes a series of leaf elements.</summary>
            <param name="leaves">a list of leaf elements</param>
        </member>
        <member name="T:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper">
            <summary>
            Wrapper for the
            <c>colgroup</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.span">
            <summary>The span.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.lang">
            <summary>The lang attribute value.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.width">
            <summary>The width.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.indexToColMapping">
            <summary>The index to column mapping.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.cellCssProps">
            <summary>The cell CSS properties.</summary>
            <remarks>
            The cell CSS properties.
            These properties should be inherited from &lt;colgroup&gt; to &lt;col&gt;
            and are eventually applied to &lt;td&gt; or &lt;th&gt;.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.ownCssProps">
            <summary>The own CSS properties.</summary>
            <remarks>
            The own CSS properties.
            These properties shouldn't be applied to &lt;td&gt; or &lt;th&gt;.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.columns">
            <summary>A list of column wrappers.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.#ctor(System.Int32)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper"/>
            instance.
            </summary>
            <param name="span">the span</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.GetSpan">
            <summary>Gets the span.</summary>
            <returns>the span</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.GetWidth">
            <summary>Gets the width.</summary>
            <returns>the width</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.SetWidth(iText.Layout.Properties.UnitValue)">
            <summary>Sets the width.</summary>
            <param name="width">the width</param>
            <returns>
            this
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.GetCellCssProps">
            <summary>Gets the cell CSS properties.</summary>
            <returns>the cell CSS properties</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.SetCellCssProps(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Sets the cell CSS properties.</summary>
            <param name="cellCssProps">the cell CSS properties</param>
            <returns>
            this
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.GetOwnCssProps">
            <summary>Gets the own CSS properties.</summary>
            <returns>the own CSS properties</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.SetOwnCssProps(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Sets the own CSS properties.</summary>
            <param name="ownCssProps">the own CSS properties</param>
            <returns>
            this
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.GetColumns">
            <summary>Gets the columns.</summary>
            <returns>the columns</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.FinalizeCols">
            <summary>Finalize the columns.</summary>
            <returns>
            this
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.GetColumnByIndex(System.Int32)">
            <summary>Gets the column by index.</summary>
            <param name="index">the index</param>
            <returns>the column corresponding with the index</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.SetLang(System.String)">
            <summary>Sets the language attribute.</summary>
            <param name="lang">the lang attribute</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColgroupWrapper.GetLang">
            <summary>Gets the language attribute.</summary>
            <returns>the lang attribute</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Wrapelement.ColWrapper">
            <summary>
            Wrapper for the
            <c>col</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColWrapper.span">
            <summary>The span.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColWrapper.lang">
            <summary>The lang attribute value.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColWrapper.width">
            <summary>The width.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColWrapper.cellCssProps">
            <summary>The cell CSS properties.</summary>
            <remarks>
            The cell CSS properties.
            These properties should be inherited from &lt;colgroup&gt; to &lt;col&gt;
            and are eventually applied to &lt;td&gt; or &lt;th&gt;.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.ColWrapper.ownCssProps">
            <summary>The own CSS properties.</summary>
            <remarks>
            The own CSS properties.
            These properties shouldn't be applied to &lt;td&gt; or &lt;th&gt;.
            </remarks>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColWrapper.#ctor(System.Int32)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.ColWrapper"/>
            instance.
            </summary>
            <param name="span">the span</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColWrapper.GetSpan">
            <summary>Gets the span.</summary>
            <returns>the span</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColWrapper.GetWidth">
            <summary>Gets the width.</summary>
            <returns>the width</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColWrapper.SetWidth(iText.Layout.Properties.UnitValue)">
            <summary>Sets the width.</summary>
            <param name="width">the width</param>
            <returns>
            this
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.ColWrapper"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColWrapper.GetCellCssProps">
            <summary>Gets the cell CSS properties.</summary>
            <returns>the cell CSS properties</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColWrapper.SetCellCssProps(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Sets the cell CSS properties.</summary>
            <param name="cellCssProps">the cell CSS properties</param>
            <returns>
            this
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.ColWrapper"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColWrapper.GetOwnCssProps">
            <summary>Gets the own CSS properties.</summary>
            <returns>the own CSS properties</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColWrapper.SetOwnCssProps(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Sets the own CSS properties.</summary>
            <param name="ownCssProps">the own CSS properties</param>
            <returns>
            this
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.ColWrapper"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColWrapper.SetLang(System.String)">
            <summary>Sets the language attribute.</summary>
            <param name="lang">the lang attribute</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.ColWrapper.GetLang">
            <summary>Gets the language attribute.</summary>
            <returns>the lang attribute</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Wrapelement.IWrapElement">
            <summary>Interface for all the element wrapper classes (such as SpanWrapper, TableWrapper,...).</summary>
        </member>
        <member name="T:iText.Html2pdf.Attach.Wrapelement.SpanWrapper">
            <summary>
            Wrapper for the
            <c>span</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.SpanWrapper.children">
            <summary>The children of the span element.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.SpanWrapper.Add(iText.Html2pdf.Attach.Wrapelement.SpanWrapper)">
            <summary>Adds a child span.</summary>
            <param name="span">the span element to add</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.SpanWrapper.Add(iText.Layout.Element.ILeafElement)">
            <summary>Adds a child image.</summary>
            <param name="img">the img element to add</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.SpanWrapper.Add(iText.Layout.Element.IBlockElement)">
            <summary>Adds a child block element.</summary>
            <param name="block">the block element to add</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.SpanWrapper.AddAll(System.Collections.Generic.ICollection{iText.Layout.Element.IElement})">
            <summary>Adds a collection of lead elements as children.</summary>
            <param name="collection">the collection to add</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.SpanWrapper.GetElements">
            <summary>Gets a list of all the child elements.</summary>
            <returns>the child elements</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Wrapelement.TableRowWrapper">
            <summary>
            Wrapper for the
            <c>tr</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableRowWrapper.cells">
            <summary>The cells in the row.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableRowWrapper.AddCell(iText.Layout.Element.Cell)">
            <summary>Adds a cell to the row.</summary>
            <param name="cell">the cell</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableRowWrapper.GetCells">
            <summary>Gets the cells of the row.</summary>
            <returns>the cells</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Wrapelement.TableWrapper">
            <summary>
            Wrapper for the
            <c>table</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.rows">
            <summary>The body rows of the table.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.headerRows">
            <summary>The header rows.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.footerRows">
            <summary>The footer rows.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.rowShift">
            <summary>The current position in the body of the table (row / column).</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.headerRowShift">
            <summary>The current position in the header of the table (row / column).</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.footerRowShift">
            <summary>The current position in the footer of the table (row / column).</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.numberOfColumns">
            <summary>The number of columns.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.isRtl">
            <summary>The direction value.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.caption">
            <summary>The caption value.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.lang">
            <summary>The lang attribute value.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.footerLang">
            <summary>The footer lang attribute value.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.headerLang">
            <summary>The header lang attribute value.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.GetRowsSize">
            <summary>Gets the number of rows.</summary>
            <returns>the number of rows</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.NewRow">
            <summary>Adds a new body row.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.NewHeaderRow">
            <summary>Adds a new header row.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.NewFooterRow">
            <summary>Adds a new footer row.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.AddHeaderCell(iText.Layout.Element.Cell)">
            <summary>Adds a new cell to the header rows.</summary>
            <param name="cell">the cell</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.AddFooterCell(iText.Layout.Element.Cell)">
            <summary>Adds a new cell to the footer rows.</summary>
            <param name="cell">the cell</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.AddCell(iText.Layout.Element.Cell)">
            <summary>Adds a new cell to the body rows.</summary>
            <param name="cell">the cell</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.AddCellToTable(iText.Layout.Element.Cell,System.Collections.Generic.IList{System.Collections.Generic.IList{iText.Html2pdf.Attach.Wrapelement.TableWrapper.CellWrapper}},iText.Html2pdf.Attach.Util.RowColHelper)">
            <summary>Adds a cell to a table.</summary>
            <param name="cell">the cell</param>
            <param name="table">the table</param>
            <param name="tableRowShift">the applicable table row shift (current col / row position).</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.SetCaption(iText.Layout.Element.Div)">
            <summary>Sets the table's caption.</summary>
            <param name="caption">the caption to be set</param>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.ToTable(iText.Html2pdf.Attach.Util.WaitingColgroupsHelper)">
            <summary>
            Renders all the rows to a
            <see cref="T:iText.Layout.Element.Table"/>
            object.
            </summary>
            <param name="colgroupsHelper">the colgroups helper class</param>
            <returns>the table</returns>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.GetColWidths(iText.Html2pdf.Attach.Util.WaitingColgroupsHelper)">
            <summary>Gets the column widths.</summary>
            <param name="colgroups">the colgroups helper class</param>
            <returns>the column widths</returns>
        </member>
        <member name="T:iText.Html2pdf.Attach.Wrapelement.TableWrapper.CellWrapper">
            <summary>
            Wrapper for the
            <c>td</c>
            /
            <c>th</c>
            element.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.CellWrapper.col">
            <summary>The column index.</summary>
        </member>
        <member name="F:iText.Html2pdf.Attach.Wrapelement.TableWrapper.CellWrapper.cell">
            <summary>The cell.</summary>
        </member>
        <member name="M:iText.Html2pdf.Attach.Wrapelement.TableWrapper.CellWrapper.#ctor(System.Int32,iText.Layout.Element.Cell)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Attach.Wrapelement.TableWrapper.CellWrapper"/>
            instance.
            </summary>
            <param name="col">the column index</param>
            <param name="cell">the cell</param>
        </member>
        <member name="T:iText.Html2pdf.ConverterProperties">
            <summary>
            Properties that will be used by the
            <see cref="T:iText.Html2pdf.HtmlConverter"/>.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.DEFAULT_LIMIT_OF_LAYOUTS">
            <summary>Default maximum number of layouts.</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.mediaDeviceDescription">
            <summary>The media device description.</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.fontProvider">
            <summary>The font provider.</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.tagWorkerFactory">
            <summary>The tag worker factory.</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.cssApplierFactory">
            <summary>The CSS applier factory.</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.outlineHandler">
            <summary>The outline handler.</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.baseUri">
            <summary>The base URI.</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.resourceRetriever">
            <summary>The resource retriever.</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.createAcroForm">
            <summary>Indicates whether an AcroForm should be created.</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.charset">
            <summary>Character set used in conversion of input streams</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.immediateFlush">
            <summary>Indicates whether the document should be opened in immediate flush or not</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.limitOfLayouts">
            <summary>Maximum number of layouts.</summary>
        </member>
        <member name="F:iText.Html2pdf.ConverterProperties.metaInfo">
            <summary>Meta info that will be added to the events thrown by html2Pdf.</summary>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.#ctor">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.#ctor(iText.Html2pdf.ConverterProperties)">
            <summary>
            Instantiates a new
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance based on another
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            (copy constructor).
            </summary>
            <param name="other">
            the other
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.GetMediaDeviceDescription">
            <summary>Gets the media device description.</summary>
            <remarks>
            Gets the media device description.
            <para />
            The properties of the multimedia device are taken into account when creating the SVG and
            when processing the properties of the СSS.
            </remarks>
            <returns>the media device description</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetMediaDeviceDescription(iText.StyledXmlParser.Css.Media.MediaDeviceDescription)">
            <summary>Sets the media device description.</summary>
            <remarks>
            Sets the media device description.
            <para />
            The properties of the multimedia device are taken into account when creating the SVG and
            when processing the properties of the СSS.
            </remarks>
            <param name="mediaDeviceDescription">the media device description</param>
            <returns>
            the
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.GetFontProvider">
            <summary>Gets the font provider.</summary>
            <remarks>
            Gets the font provider.
            <para />
            Please note that
            <see cref="T:iText.Layout.Font.FontProvider"/>
            instances cannot be reused across several documents
            and thus as soon as you set this property, this
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance becomes only useful
            for a single HTML conversion.
            </remarks>
            <returns>the font provider</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetFontProvider(iText.Layout.Font.FontProvider)">
            <summary>Sets the font provider.</summary>
            <remarks>
            Sets the font provider.
            <para />
            Please note that
            <see cref="T:iText.Layout.Font.FontProvider"/>
            instances cannot be reused across several documents
            and thus as soon as you set this property, this
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance becomes only useful
            for a single HTML conversion.
            </remarks>
            <param name="fontProvider">the font provider</param>
            <returns>
            the
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.GetLimitOfLayouts">
            <summary>Gets maximum number of layouts.</summary>
            <returns>layouts limit</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetLimitOfLayouts(System.Int32)">
            <summary>Sets maximum number of layouts.</summary>
            <param name="limitOfLayouts">layouts limit</param>
            <returns>
            the
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.GetTagWorkerFactory">
            <summary>Gets the TagWorkerFactory instance.</summary>
            <remarks>
            Gets the TagWorkerFactory instance.
            <para />
            The tagWorkerFactory is used to create
            <see cref="T:iText.Html2pdf.Attach.ITagWorker"/>
            , which in turn
            are used to convert the HTML tags to the PDF elements.
            </remarks>
            <returns>the TagWorkerFactory</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetTagWorkerFactory(iText.Html2pdf.Attach.ITagWorkerFactory)">
            <summary>Sets the TagWorkerFactory.</summary>
            <remarks>
            Sets the TagWorkerFactory.
            <para />
            The tagWorkerFactory is used to create
            <see cref="T:iText.Html2pdf.Attach.ITagWorker"/>
            , which in turn
            are used to convert the HTML tags to the PDF elements.
            </remarks>
            <param name="tagWorkerFactory">the TagWorkerFactory</param>
            <returns>
            the
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.GetCssApplierFactory">
            <summary>Gets the CSS applier factory.</summary>
            <remarks>
            Gets the CSS applier factory.
            <para />
            The cssApplierFactory is used to create
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            , which in turn
            are used to convert the CSS properties to the PDF properties.
            </remarks>
            <returns>the CSS applier factory</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetCssApplierFactory(iText.Html2pdf.Css.Apply.ICssApplierFactory)">
            <summary>Sets the CSS applier factory.</summary>
            <remarks>
            Sets the CSS applier factory.
            <para />
            The cssApplierFactory is used to create
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            , which in turn
            are used to convert the CSS properties to the PDF properties.
            </remarks>
            <param name="cssApplierFactory">the CSS applier factory</param>
            <returns>
            the
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.GetBaseUri">
            <summary>Gets the base URI.</summary>
            <remarks>
            Gets the base URI.
            <para />
            Base URI is used to resolve other URI.
            </remarks>
            <returns>the base URI</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetBaseUri(System.String)">
            <summary>Sets the base URI.</summary>
            <remarks>
            Sets the base URI.
            <para />
            Base URI is used to resolve other URI.
            </remarks>
            <param name="baseUri">the base URI</param>
            <returns>
            the
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.GetResourceRetriever">
            <summary>Gets the resource retriever.</summary>
            <remarks>
            Gets the resource retriever.
            <para />
            The resourceRetriever is used to retrieve data from resources by URL.
            </remarks>
            <returns>the resource retriever</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetResourceRetriever(iText.StyledXmlParser.Resolver.Resource.IResourceRetriever)">
            <summary>Sets the resource retriever.</summary>
            <remarks>
            Sets the resource retriever.
            <para />
            The resourceRetriever is used to retrieve data from resources by URL.
            </remarks>
            <param name="resourceRetriever">the resource retriever</param>
            <returns>
            the
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.IsCreateAcroForm">
            <summary>Check if the createAcroForm flag is set.</summary>
            <remarks>
            Check if the createAcroForm flag is set.
            <para />
            If createAcroForm is set, then when the form is encountered in HTML, AcroForm will be created, otherwise
            a visually identical, but not functional element will be created. Please bare in mind that the created
            Acroform may visually differ a bit from the HTML one.
            </remarks>
            <returns>the createAcroForm flag</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetCreateAcroForm(System.Boolean)">
            <summary>Sets the createAcroForm value.</summary>
            <remarks>
            Sets the createAcroForm value.
            <para />
            If createAcroForm is set, then when the form is encountered in HTML, AcroForm will be created, otherwise
            a visually identical, but not functional element will be created. Please bare in mind that the created
            Acroform may visually differ a bit from the HTML one.
            </remarks>
            <param name="createAcroForm">true if an AcroForm needs to be created</param>
            <returns>
            the
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.GetOutlineHandler">
            <summary>Gets the outline handler.</summary>
            <remarks>
            Gets the outline handler.
            <para />
            If outlineHandler is specified, then outlines will be created in the PDF
            for HTML tags specified in outlineHandler.
            <para />
            Please note that
            <see cref="T:iText.Html2pdf.Attach.Impl.OutlineHandler"/>
            is not thread safe, thus
            as soon as you have set this property, this
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance cannot be used in
            converting multiple HTMLs simultaneously.
            </remarks>
            <returns>the outline handler</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetOutlineHandler(iText.Html2pdf.Attach.Impl.OutlineHandler)">
            <summary>Sets the outline handler.</summary>
            <remarks>
            Sets the outline handler.
            <para />
            If outlineHandler is specified, then outlines will be created in the PDF
            for HTML tags specified in outlineHandler.
            <para />
            Please note that
            <see cref="T:iText.Html2pdf.Attach.Impl.OutlineHandler"/>
            is not thread safe, thus
            as soon as you have set this property, this
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance cannot be used in
            converting multiple HTMLs simultaneously.
            </remarks>
            <param name="outlineHandler">the outline handler</param>
            <returns>
            the
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.GetCharset">
            <summary>Gets the encoding charset.</summary>
            <remarks>
            Gets the encoding charset.
            <para />
            Charset is used to correctly decode an HTML file.
            </remarks>
            <returns>the charset</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetCharset(System.String)">
            <summary>Sets the encoding charset.</summary>
            <remarks>
            Sets the encoding charset.
            <para />
            Charset is used to correctly decode an HTML file.
            </remarks>
            <param name="charset">the charset</param>
            <returns>
            the
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.IsImmediateFlush">
            <summary>Checks if immediateFlush is set.</summary>
            <remarks>
            Checks if immediateFlush is set.
            <para />
            This is used for
            <see cref="M:iText.Html2pdf.HtmlConverter.ConvertToDocument(System.String,iText.Kernel.Pdf.PdfWriter)"/>
            methods and will be
            overwritten to false if a page-counter declaration is present in the CSS of the HTML being converted.
            Has no effect when used in conjunction with
            <see cref="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.String,System.IO.Stream)"/>
            or
            <see cref="M:iText.Html2pdf.HtmlConverter.ConvertToElements(System.String)"/>.
            </remarks>
            <returns>true if immediateFlush is set, false if not</returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetImmediateFlush(System.Boolean)">
            <summary>Set the immediate flush property of the layout document.</summary>
            <remarks>
            Set the immediate flush property of the layout document.
            <para />
            This is used for
            <see cref="M:iText.Html2pdf.HtmlConverter.ConvertToDocument(System.String,iText.Kernel.Pdf.PdfWriter)"/>
            methods and will be
            overwritten to false if a page-counter declaration is present in the CSS of the HTML being converted.
            Has no effect when used in conjunction with
            <see cref="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.String,System.IO.Stream)"/>
            or
            <see cref="M:iText.Html2pdf.HtmlConverter.ConvertToElements(System.String)"/>.
            </remarks>
            <param name="immediateFlush">the immediate flush value</param>
            <returns>
            the
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.GetEventMetaInfo">
            <summary>Gets html meta info.</summary>
            <remarks>
            Gets html meta info.
            <para />
            This meta info will be used to determine event origin.
            </remarks>
            <returns>
            converter's
            <see cref="T:iText.Commons.Actions.Contexts.IMetaInfo"/>
            </returns>
        </member>
        <member name="M:iText.Html2pdf.ConverterProperties.SetEventMetaInfo(iText.Commons.Actions.Contexts.IMetaInfo)">
            <summary>Sets html meta info.</summary>
            <remarks>
            Sets html meta info.
            <para />
            This meta info will be used to determine event origin.
            </remarks>
            <param name="metaInfo">meta info to set</param>
            <returns>
            the
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.ICssApplier">
            <summary>Interface to be implemented by all types of CSS appliers.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.ICssApplier.Apply(iText.Html2pdf.Attach.ProcessorContext,iText.StyledXmlParser.Node.IStylesContainer,iText.Html2pdf.Attach.ITagWorker)">
            <summary>Applies styles to an element.</summary>
            <param name="context">the processor context</param>
            <param name="stylesContainer">the styles</param>
            <param name="tagWorker">the tag worker for the element</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.ICssApplierFactory">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplierFactory"/>
            interface is used for instantiating new
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            objects.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.ICssApplierFactory.GetCssApplier(iText.StyledXmlParser.Node.IElementNode)">
            <summary>
            Returns a
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            instance constructed based on the parameters of a node.
            </summary>
            <param name="tag">a node</param>
            <returns>a CSS applier based on the parameters of a node</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.BlockCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for Block elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.BodyTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for Body elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.CaptionCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for a <c>caption</c>element.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.ColgroupTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for column groups.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.ColTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for columns.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.CssContentLinearGradientApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for linear-gradient elements in content CSS property.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Impl.CssContentLinearGradientApplier.DEFAULT_CONTENT_WIDTH_PT">
            <summary>The default width of the div content in the points, and this will be 300 pixels.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Impl.CssContentLinearGradientApplier.DEFAULT_CONTENT_HEIGHT_PT">
            <summary>The default height of the div content in the points, and this will be 150 pixels.</summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.DefaultCssApplierFactory">
            <summary>
            A factory for creating
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            objects.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Impl.DefaultCssApplierFactory.defaultMapping">
            <summary>The default mapping of CSS keywords and CSS appliers.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Impl.DefaultCssApplierFactory.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Impl.DefaultCssApplierFactory"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Impl.DefaultCssApplierFactory.GetInstance">
            <summary>
            Gets
            <see cref="T:iText.Html2pdf.Css.Apply.Impl.DefaultCssApplierFactory"/>
            instance.
            </summary>
            <returns>default instance that is used if custom css appliers are not configured</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Impl.DefaultCssApplierFactory.GetCustomCssApplier(iText.StyledXmlParser.Node.IElementNode)">
            <summary>Gets a custom CSS applier.</summary>
            <remarks>
            Gets a custom CSS applier.
            This method needs to be overridden because the default CSS applier
            factory will always return
            <see langword="null"/>.
            </remarks>
            <param name="tag">the key</param>
            <returns>the custom CSS applier</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Impl.DefaultCssApplierFactory.GetCssApplierCreator(iText.Html2pdf.Util.TagProcessorMapping{iText.Html2pdf.Css.Apply.Impl.DefaultTagCssApplierMapping.ICssApplierCreator},iText.StyledXmlParser.Node.IElementNode)">
            <summary>Gets the css applier class.</summary>
            <param name="mapping">the mapping</param>
            <param name="tag">the tag</param>
            <returns>the css applier class creator</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.DefaultTagCssApplierMapping">
            <summary>Class that contains the default mapping between CSS keys and CSS appliers.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Impl.DefaultTagCssApplierMapping.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Impl.DefaultTagCssApplierMapping"/>
            instance.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Impl.DefaultTagCssApplierMapping.mapping">
            <summary>The default mapping.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Impl.DefaultTagCssApplierMapping.GetDefaultCssApplierMapping">
            <summary>Gets the default CSS applier mapping.</summary>
            <returns>the default CSS applier mapping</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.DisplayFlexTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for elements with display flex.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.DisplayTableRowTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for table rows.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.DlTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for Dl elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.HrTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for hr elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.HtmlTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for Html elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.LiTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for Li elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.PageMarginBoxCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for page margin box containers.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Impl.PageMarginBoxCssApplier.ParseBoxProps(System.Collections.Generic.IDictionary{System.String,System.String},System.Single,System.Single,System.Single[],iText.Kernel.Geom.Rectangle,System.String,System.String,System.String,System.String)">
            <summary>Parses the page and margin boxes properties (like margins, paddings, etc).</summary>
            <param name="styles">
            a
            <see cref="!:System.Collections.IDictionary&lt;K, V&gt;"/>
            containing the styles
            </param>
            <param name="em">a measurement expressed in em</param>
            <param name="rem">a measurement expressed in rem (root em)</param>
            <param name="defaultValues">the default values</param>
            <param name="containingBlock">the containing block</param>
            <param name="topPropName">the top prop name</param>
            <param name="rightPropName">the right prop name</param>
            <param name="bottomPropName">the bottom prop name</param>
            <param name="leftPropName">the left prop name</param>
            <returns>an array with a top, right, bottom, and top float value</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Impl.PageMarginBoxCssApplier.ParseBoxValue(System.String,System.Single,System.Single,System.Single)">
            <summary>Parses the box value.</summary>
            <param name="em">a measurement expressed in em</param>
            <param name="rem">a measurement expressed in rem (root em)</param>
            <param name="dimensionSize">the dimension size</param>
            <returns>a float value</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.PlaceholderCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for input's placeholder.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.SpanTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for Span elements.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Impl.SpanTagCssApplier.ApplyChildElementStyles(iText.Layout.IPropertyContainer,System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.StyledXmlParser.Node.IStylesContainer)">
            <summary>Applies styles to child elements.</summary>
            <param name="element">the element</param>
            <param name="css">the CSS mapping</param>
            <param name="context">the processor context</param>
            <param name="stylesContainer">the styles container</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.TableTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for table elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.TdTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for Td elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.TrTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for Tr elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Impl.UlOlTagCssApplier">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Apply.ICssApplier"/>
            implementation for Ul en Ol elements.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.BackgroundApplierUtil">
            <summary>Utilities class to apply backgrounds.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.BackgroundApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.BackgroundApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.BackgroundApplierUtil.ApplyBackground(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies background to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.BackgroundApplierUtil.HtmlBackgroundImage">
            <summary>Implementation of the Image class when used in the context of HTML to PDF conversion.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.BackgroundApplierUtil.HtmlBackgroundImage.dimensionMultiplier">
            <summary>
            In iText, we use user unit for the image sizes (and by default
            one user unit = one point), whereas images are usually measured
            in pixels.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.BackgroundApplierUtil.HtmlBackgroundImage.#ctor(iText.Kernel.Pdf.Xobject.PdfImageXObject,iText.Layout.Properties.BackgroundRepeat,iText.Layout.Properties.BackgroundPosition,iText.Layout.Properties.BlendMode,iText.Layout.Properties.BackgroundBox,iText.Layout.Properties.BackgroundBox)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.BackgroundApplierUtil.HtmlBackgroundImage"/>
            instance.
            </summary>
            <param name="xObject">
            background-image property.
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfImageXObject"/>
            instance.
            </param>
            <param name="repeat">
            background-repeat property.
            <see cref="T:iText.Layout.Properties.BackgroundRepeat"/>
            instance.
            </param>
            <param name="position">
            background-position property.
            <see cref="T:iText.Layout.Properties.BackgroundPosition"/>
            instance.
            </param>
            <param name="blendMode">
            background-blend-mode property.
            <see cref="T:iText.Layout.Properties.BlendMode"/>
            instance.
            </param>
            <param name="clip">
            background-clip property.
            <see cref="T:iText.Layout.Properties.BackgroundBox"/>
            instance.
            </param>
            <param name="origin">
            background-origin property.
            <see cref="T:iText.Layout.Properties.BackgroundBox"/>
            instance.
            </param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.BackgroundApplierUtil.HtmlBackgroundImage.#ctor(iText.Kernel.Pdf.Xobject.PdfFormXObject,iText.Layout.Properties.BackgroundRepeat,iText.Layout.Properties.BackgroundPosition,iText.Layout.Properties.BlendMode,iText.Layout.Properties.BackgroundBox,iText.Layout.Properties.BackgroundBox)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.BackgroundApplierUtil.HtmlBackgroundImage"/>
            instance.
            </summary>
            <param name="xObject">
            background-image property.
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfFormXObject"/>
            instance.
            </param>
            <param name="repeat">
            background-repeat property.
            <see cref="T:iText.Layout.Properties.BackgroundRepeat"/>
            instance.
            </param>
            <param name="position">
            background-position property.
            <see cref="T:iText.Layout.Properties.BackgroundPosition"/>
            instance.
            </param>
            <param name="blendMode">
            background-blend-mode property.
            <see cref="T:iText.Layout.Properties.BlendMode"/>
            instance.
            </param>
            <param name="clip">
            background-clip property.
            <see cref="T:iText.Layout.Properties.BackgroundBox"/>
            instance.
            </param>
            <param name="origin">
            background-origin property.
            <see cref="T:iText.Layout.Properties.BackgroundBox"/>
            instance.
            </param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.BorderStyleApplierUtil">
            <summary>Utilities class to apply border styles.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.BorderStyleApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.BorderStyleApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.BorderStyleApplierUtil.ApplyBorders(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies borders to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the Processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.BorderStyleApplierUtil.GetBordersArray(System.Collections.Generic.IDictionary{System.String,System.String},System.Single,System.Single)">
            <summary>Gets the array that defines the borders.</summary>
            <param name="styles">the styles mapping</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <returns>the borders array</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.BorderStyleApplierUtil.GetCertainBorder(System.String,System.String,System.String,System.Single,System.Single)">
            <summary>
            Creates a
            <see cref="T:iText.Layout.Borders.Border"/>
            instance based on specific properties.
            </summary>
            <param name="borderWidth">the border width</param>
            <param name="borderStyle">the border style</param>
            <param name="borderColor">the border color</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <returns>the border</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.BorderStyleApplierUtil.GetBorderRadiiArray(System.Collections.Generic.IDictionary{System.String,System.String},System.Single,System.Single)">
            <summary>Gets the array that defines the borders.</summary>
            <param name="styles">the styles mapping</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <returns>the borders array</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.CounterProcessorUtil">
            <summary>Utilities class to process counters.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.CounterProcessorUtil.ProcessCounters(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Css.Resolve.CssContext)">
            <summary>Processes counters.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.CounterProcessorUtil.StartProcessingCounters(iText.Html2pdf.Css.Resolve.CssContext,iText.StyledXmlParser.Node.IElementNode)">
            <summary>Starts processing counters.</summary>
            <remarks>
            Starts processing counters. Pushes current counter values to counters if necessary.
            Usually it is expected that this method should be called before processing children of the element.
            </remarks>
            <param name="context">the processor context</param>
            <param name="element">the element which counters shall be processed</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.CounterProcessorUtil.EndProcessingCounters(iText.Html2pdf.Css.Resolve.CssContext,iText.StyledXmlParser.Node.IElementNode)">
            <summary>Ends processing counters.</summary>
            <remarks>
            Ends processing counters. Pops values of given counter list from counters if necessary.
            Usually it is expected that this method should be called after processing cheldren of the element.
            </remarks>
            <param name="context">the processor context</param>
            <param name="element">the element which counters shall be processed</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.FlexApplierUtil">
            <summary>Utilities class to apply flex properties.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.FlexApplierUtil.ApplyFlexItemProperties(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies properties to a flex item.</summary>
            <param name="cssProps">the map of the CSS properties</param>
            <param name="context">the context of the converter processor</param>
            <param name="element">the element to set the properties</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.FlexApplierUtil.ApplyFlexContainerProperties(System.Collections.Generic.IDictionary{System.String,System.String},iText.Layout.IPropertyContainer)">
            <summary>Applies properties to a flex container.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="element">the element</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.FloatApplierUtil">
            <summary>Utilities class to apply float values to elements.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.FloatApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.FloatApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.FloatApplierUtil.ApplyFloating(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies a float value (left, right, or both) to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.FontStyleApplierUtil">
            <summary>Utilities class to apply font styles.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.FontStyleApplierUtil.logger">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.FontStyleApplierUtil.#ctor">
            <summary>
            Creates a
            <see cref="T:iText.Html2pdf.Css.Apply.Util.FontStyleApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.FontStyleApplierUtil.ApplyFontStyles(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.StyledXmlParser.Node.IStylesContainer,iText.Layout.IPropertyContainer)">
            <summary>Applies font styles to an element.</summary>
            <param name="cssProps">the CSS props</param>
            <param name="context">the processor context</param>
            <param name="stylesContainer">the styles container</param>
            <param name="element">the element</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.HyphenationApplierUtil">
            <summary>The Class HyphenationApplierUtil.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.HyphenationApplierUtil.HYPHENATE_BEFORE">
            <summary>The Constant HYPHENATE_BEFORE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.HyphenationApplierUtil.HYPHENATE_AFTER">
            <summary>The Constant HYPHENATE_AFTER.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.HyphenationApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.HyphenationApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.HyphenationApplierUtil.ApplyHyphenation(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.StyledXmlParser.Node.IStylesContainer,iText.Layout.IPropertyContainer)">
            <summary>Applies hyphenation to an element.</summary>
            <param name="cssProps">the CSS props</param>
            <param name="context">the processor context</param>
            <param name="stylesContainer">the styles container</param>
            <param name="element">the element</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil">
            <summary>Utilities class to apply list styles to an element.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.LIST_ITEM_MARKER_SIZE_COEFFICIENT">
            <summary>The Constant LIST_ITEM_MARKER_SIZE_COEFFICIENT.</summary>
            <remarks>
            The Constant LIST_ITEM_MARKER_SIZE_COEFFICIENT.
            The coefficient value of 2/5 is chosen in such a way that the result
            of the converting is as similar as possible to the browsers displaying.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.GREEK_ALPHABET_LENGTH">
            <summary>The Constant GREEK_ALPHABET_LENGTH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.GREEK_LOWERCASE">
            <summary>The Constant GREEK_LOWERCASE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.DISC_SYMBOL">
            <summary>The Constant DISC_SYMBOL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.CIRCLE_SYMBOL">
            <summary>The Constant CIRCLE_SYMBOL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.SQUARE_SYMBOL">
            <summary>The Constant SQUARE_SYMBOL.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.ApplyListStyleImageProperty(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies an image list style to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.ApplyListStyleTypeProperty(iText.StyledXmlParser.Node.IStylesContainer,System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies a list style to an element.</summary>
            <param name="stylesContainer">the styles container</param>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.SetDiscStyle(iText.Layout.IPropertyContainer,System.Single)">
            <summary>Applies the "disc" list style to an element.</summary>
            <param name="element">the element</param>
            <param name="em">the em value</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.SetListSymbol(iText.Layout.IPropertyContainer,iText.Layout.Element.Text)">
            <summary>
            Sets the list symbol for a
            <see cref="T:iText.Layout.Element.List"/>
            or
            <see cref="T:iText.Layout.Element.ListItem"/>
            element.
            </summary>
            <param name="container">
            the container element (
            <see cref="T:iText.Layout.Element.List"/>
            or
            <see cref="T:iText.Layout.Element.ListItem"/>
            )
            </param>
            <param name="text">the list symbol</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.SetListSymbol(iText.Layout.IPropertyContainer,iText.Layout.Properties.ListNumberingType)">
            <summary>
            Sets the list symbol for a
            <see cref="T:iText.Layout.Element.List"/>
            or
            <see cref="T:iText.Layout.Element.ListItem"/>
            element.
            </summary>
            <param name="container">
            the container element (
            <see cref="T:iText.Layout.Element.List"/>
            or
            <see cref="T:iText.Layout.Element.ListItem"/>
            )
            </param>
            <param name="listNumberingType">the list numbering type</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.SetSquareStyle(iText.Layout.IPropertyContainer,System.Single)">
            <summary>Applies the "square" list style to an element.</summary>
            <param name="element">the element</param>
            <param name="em">the em value</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.SetCircleStyle(iText.Layout.IPropertyContainer,System.Single)">
            <summary>Applies the "circle" list style to an element.</summary>
            <param name="element">the element</param>
            <param name="em">the em value</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.SetListSymbolIndent(iText.Layout.IPropertyContainer,System.Single)">
            <summary>Sets the list symbol indentation.</summary>
            <param name="element">the element</param>
            <param name="em">the em value</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.HtmlAlphabetSymbolFactory">
            <summary>
            A factory for creating
            <c>HtmlAlphabetSymbol</c>
            objects.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.HtmlAlphabetSymbolFactory.alphabet">
            <summary>The alphabet.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.HtmlAlphabetSymbolFactory.#ctor(System.Char[])">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.HtmlAlphabetSymbolFactory"/>
            instance.
            </summary>
            <param name="alphabet">the alphabet</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.ListStyleApplierUtil.HtmlAlphabetSymbolFactory.GetListItemOrListProperty(iText.Layout.IPropertyContainer,iText.Layout.IPropertyContainer,System.Int32)">
            <summary>
            Gets the a property from a
            <see cref="T:iText.Layout.Element.ListItem"/>
            , or from the
            <see cref="T:iText.Layout.Element.List"/>
            (if the property) isn't declared for the list item.
            </summary>
            <param name="listItem">the list item</param>
            <param name="list">the list</param>
            <param name="propertyId">the property id</param>
            <returns>the property value</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.MarginApplierUtil">
            <summary>Utilities class to apply margins.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.MarginApplierUtil.logger">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.MarginApplierUtil.#ctor">
            <summary>
            Creates a
            <see cref="T:iText.Html2pdf.Css.Apply.Util.MarginApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.MarginApplierUtil.ApplyMargins(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies margins to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.MarginApplierUtil.ApplyMargins(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer,System.Single,System.Single)">
            <summary>Applies margins to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
            <param name="baseValueHorizontal">value used by default for horizontal dimension</param>
            <param name="baseValueVertical">value used by default for vertical dimension</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.MarginApplierUtil.TrySetMarginIfNotAuto(System.Int32,System.String,iText.Layout.IPropertyContainer,System.Single,System.Single,System.Single)">
            <summary>Tries set margin if the value isn't "auto".</summary>
            <param name="marginProperty">the margin property</param>
            <param name="marginValue">the margin value</param>
            <param name="element">the element</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <param name="baseValue">value used by default</param>
            <returns>false if the margin value was "auto"</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.MarginApplierUtil.ParseMarginValue(System.String,System.Single,System.Single,System.Single)">
            <summary>Parses the margin value.</summary>
            <param name="marginValString">
            the margin value as a
            <see cref="T:System.String"/>
            </param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <param name="baseValue">value used my default</param>
            <returns>
            the margin value as a
            <see cref="!:float?"/>
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.OpacityApplierUtil">
            <summary>Utilities class to apply opacity.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.OpacityApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.OpacityApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.OpacityApplierUtil.ApplyOpacity(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies opacity to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="container">the container element</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.OrphansWidowsApplierUtil">
            <summary>Utilities class to apply orphans and widows properties.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.OrphansWidowsApplierUtil.#ctor">
            <summary>
            Creates a
            <see cref="T:iText.Html2pdf.Css.Apply.Util.OrphansWidowsApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.OrphansWidowsApplierUtil.ApplyOrphansAndWidows(System.Collections.Generic.IDictionary{System.String,System.String},iText.Layout.IPropertyContainer)">
            <summary>Applies orphans and widows properties to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="element">to which the property will be applied.</param>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.OutlineApplierUtil.LOGGER">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.OutlineApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.OutlineApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.OutlineApplierUtil.ApplyOutlines(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies outlines to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the Processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.OutlineApplierUtil.GetCertainBorder(System.String,System.String,System.String,System.Single,System.Single)">
            <summary>
            Creates a
            <see cref="T:iText.Layout.Borders.Border"/>
            instance based on specific properties.
            </summary>
            <param name="outlineWidth">the outline width</param>
            <param name="outlineStyle">the outline style</param>
            <param name="outlineColor">the outline color</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <returns>the border</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.OverflowApplierUtil">
            <summary>Utilities class to apply overflow.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.OverflowApplierUtil.#ctor">
            <summary>Creates a new <c>OverflowApplierUtil</c> instance.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.OverflowApplierUtil.ApplyOverflow(System.Collections.Generic.IDictionary{System.String,System.String},iText.Layout.IPropertyContainer)">
            <summary>Applies overflow to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="element">the element</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.PaddingApplierUtil">
            <summary>Utilities class to apply a padding.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.PaddingApplierUtil.logger">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PaddingApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.PaddingApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PaddingApplierUtil.ApplyPaddings(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies paddings to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PaddingApplierUtil.ApplyPaddings(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer,System.Single,System.Single)">
            <summary>Applies paddings to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
            <param name="baseValueHorizontal">value used by default for horizontal dimension</param>
            <param name="baseValueVertical">value used by default for vertical dimension</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil">
            <summary>Utilities class to apply page breaks.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.ApplyPageBreakProperties(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies page break properties.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.AddPageBreakElementBefore(iText.Html2pdf.Attach.ProcessorContext,iText.Html2pdf.Attach.ITagWorker,iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ITagWorker)">
            <summary>Processes a page break "before" property.</summary>
            <param name="context">the processor context</param>
            <param name="parentTagWorker">the parent tag worker</param>
            <param name="childElement">the child element</param>
            <param name="childTagWorker">the child tag worker</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.AddPageBreakElementAfter(iText.Html2pdf.Attach.ProcessorContext,iText.Html2pdf.Attach.ITagWorker,iText.StyledXmlParser.Node.IElementNode,iText.Html2pdf.Attach.ITagWorker)">
            <summary>Processes a page break "after" property.</summary>
            <param name="context">the processor context</param>
            <param name="parentTagWorker">the parent tag worker</param>
            <param name="childElement">the child element</param>
            <param name="childTagWorker">the child tag worker</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.CreateHtmlPageBreak(System.String)">
            <summary>
            Creates an
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreak"/>
            instance.
            </summary>
            <param name="pageBreakVal">the page break value</param>
            <returns>
            the
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreak"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.ApplyKeepWithNext(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies a keep with next property to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.ApplyPageBreakInside(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies a page break inside property.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.HtmlPageBreakWorker">
            <summary>
            A
            <c>TagWorker</c>
            class for HTML page breaks.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.HtmlPageBreakWorker.pageBreak">
            <summary>
            The
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreak"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.HtmlPageBreakWorker.#ctor(iText.Html2pdf.Attach.Impl.Layout.HtmlPageBreak)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.PageBreakApplierUtil.HtmlPageBreakWorker"/>
            instance.
            </summary>
            <param name="pageBreak">the page break</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil">
            <summary>Utilities class to apply a position.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil.logger">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil.ApplyPosition(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies a position to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the propertiescontext</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil.ApplyLeftRightTopBottom(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer,System.String)">
            <summary>Applies left, right, top, and bottom properties.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
            <param name="position">the position</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil.ApplyLeftProperty(System.Collections.Generic.IDictionary{System.String,System.String},iText.Layout.IPropertyContainer,System.Single,System.Single,System.Int32)">
            <summary>Applies the "left" property.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="element">the element</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <param name="layoutPropertyMapping">the layout property mapping</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil.ApplyRightProperty(System.Collections.Generic.IDictionary{System.String,System.String},iText.Layout.IPropertyContainer,System.Single,System.Single,System.Int32)">
            <summary>Applies the "right" property.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="element">the element</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <param name="layoutPropertyMapping">the layout property mapping</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil.ApplyTopProperty(System.Collections.Generic.IDictionary{System.String,System.String},iText.Layout.IPropertyContainer,System.Single,System.Single,System.Int32)">
            <summary>Applies the "top" property.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="element">the element</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <param name="layoutPropertyMapping">the layout property mapping</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.PositionApplierUtil.ApplyBottomProperty(System.Collections.Generic.IDictionary{System.String,System.String},iText.Layout.IPropertyContainer,System.Single,System.Single,System.Int32)">
            <summary>Applies the "bottom" property.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="element">the element</param>
            <param name="em">the em value</param>
            <param name="rem">the root em value</param>
            <param name="layoutPropertyMapping">the layout property mapping</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.SupportedColColgroupPropertiesUtil">
            <summary>
            Utilities class to get widths and mapping related to columns and column groups
            as stated in paragraph 17.3 of https://www.w3.org/TR/CSS21/tables.html#q4.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.SupportedColColgroupPropertiesUtil.CELL_CSS_PROPERTIES">
            <summary>
            These inheritable properties should be transferred from &lt;colgroup&gt;
            to &lt;col&gt; and then to &lt;td&gt; or &lt;th&gt;.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.SupportedColColgroupPropertiesUtil.OWN_CSS_PROPERTIES">
            <summary>These properties don't need to be transferred from &lt;colgroup&gt; to &lt;col&gt;.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.SupportedColColgroupPropertiesUtil.GetWidth(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext)">
            <summary>Gets the width.</summary>
            <param name="resolvedCssProps">the resolved CSS properties</param>
            <param name="context">the processor context</param>
            <returns>the width</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.SupportedColColgroupPropertiesUtil.GetCellProperties(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Gets the cell properties.</summary>
            <param name="resolvedCssProps">the resolved CSS properties</param>
            <returns>the cell properties</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.SupportedColColgroupPropertiesUtil.GetOwnProperties(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Gets the own properties.</summary>
            <param name="resolvedCssProps">the resolved css props</param>
            <returns>the own properties</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.SupportedColColgroupPropertiesUtil.GetFilteredMap(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>Filters a given map so that it only contains supported keys.</summary>
            <param name="map">the map</param>
            <param name="supportedKeys">the supported keys</param>
            <returns>the filtered map</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.TransformationApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.TransformationApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.TransformationApplierUtil.ApplyTransformation(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies a transformation to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the properties context</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.TransformationApplierUtil.ParseAngleToRadians(System.String)">
            <summary>Convert an angle (presented as radians or degrees) to radians</summary>
            <param name="value">the angle (as a CSS string)</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.TransformationApplierUtil.GetSingleTransformTranslate(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>Apply a linear transformation, using a transformation matrix</summary>
            <param name="a">element [0,0] of the transformation matrix</param>
            <param name="b">element [0,1] of the transformation matrix</param>
            <param name="c">element [1,0] of the transformation matrix</param>
            <param name="d">element [1,1] of the transformation matrix</param>
            <param name="tx">translation on x-axis</param>
            <param name="ty">translation on y-axis</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.TransformationApplierUtil.GetSingleTransform(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Apply a linear transformation using a transformation matrix</summary>
            <param name="a">element [0,0] of the transformation matrix</param>
            <param name="b">element [0,1] of the transformation matrix</param>
            <param name="c">element [1,0] of the transformation matrix</param>
            <param name="d">element [1,1] of the transformation matrix</param>
            <param name="tx">translation on x-axis</param>
            <param name="ty">translation on y-axis</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.TransformationApplierUtil.GetSingleTransform(System.Single[])">
            <summary>Apply a linear transformation using a transformation matrix</summary>
            <param name="floats">the transformation matrix (flattened) as array</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil">
            <summary>Utilities class to apply vertical alignment values.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.ASCENDER_COEFFICIENT">
            <summary>The Constant ASCENDER_COEFFICIENT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.DESCENDER_COEFFICIENT">
            <summary>The Constant DESCENDER_COEFFICIENT.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil"/>.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.ApplyVerticalAlignmentForCells(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies vertical alignment to cells.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.ApplyVerticalAlignmentForInlines(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.StyledXmlParser.Node.IStylesContainer,System.Collections.Generic.IList{iText.Layout.IPropertyContainer})">
            <summary>Apply vertical alignment to inline elements.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="stylesContainer">the styles container</param>
            <param name="childElements">the child elements</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.CalcTextRiseForSupSub(iText.StyledXmlParser.Node.IStylesContainer,System.String)">
            <summary>Calculates the text rise value for &lt;sup&gt; and &lt;sub&gt; tags.</summary>
            <param name="stylesContainer">the styles container</param>
            <param name="vAlignVal">the vertical alignment value</param>
            <returns>the calculated text rise</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.CalcTextRiseForMiddle(iText.StyledXmlParser.Node.IStylesContainer)">
            <summary>Calculates the text rise for middle alignment.</summary>
            <param name="stylesContainer">the styles container</param>
            <returns>the calculated text rise</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.CalcTextRiseForTextTop(iText.StyledXmlParser.Node.IStylesContainer,System.Single)">
            <summary>Calculates the text rise for top alignment.</summary>
            <param name="stylesContainer">the styles container</param>
            <param name="rootFontSize">the root font size</param>
            <returns>the calculated text rise</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.CalcTextRiseForTextBottom(iText.StyledXmlParser.Node.IStylesContainer,System.Single)">
            <summary>Calculates the text rise for bottom alignment.</summary>
            <param name="stylesContainer">the styles container</param>
            <param name="rootFontSize">the root font size</param>
            <returns>the calculated text rise</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.CalcTextRiseForPercentageValue(iText.StyledXmlParser.Node.IStylesContainer,System.Single,System.String)">
            <summary>Calculates text rise for percentage value text rise.</summary>
            <param name="stylesContainer">the styles container</param>
            <param name="rootFontSize">the root font size</param>
            <param name="vAlignVal">the vertical alignment value</param>
            <returns>the calculated text rise</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.GetLineHeightActualValue(System.Single,System.Single,System.String)">
            <summary>Gets the actual value of the line height.</summary>
            <param name="fontSize">the font size</param>
            <param name="rootFontSize">the root font size</param>
            <param name="lineHeightStr">
            the line height as a
            <see cref="T:System.String"/>
            </param>
            <returns>
            the actual line height as a
            <c>float</c>
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.VerticalAlignmentApplierUtil.GetParentFontSize(iText.StyledXmlParser.Node.IStylesContainer)">
            <summary>Gets the parent font size.</summary>
            <param name="stylesContainer">the styles container</param>
            <returns>the parent font size</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Apply.Util.WidthHeightApplierUtil">
            <summary>Utilities class to apply a width or a height to an element.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Apply.Util.WidthHeightApplierUtil.logger">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.WidthHeightApplierUtil.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Apply.Util.WidthHeightApplierUtil"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Apply.Util.WidthHeightApplierUtil.ApplyWidthHeight(System.Collections.Generic.IDictionary{System.String,System.String},iText.Html2pdf.Attach.ProcessorContext,iText.Layout.IPropertyContainer)">
            <summary>Applies a width or a height to an element.</summary>
            <param name="cssProps">the CSS properties</param>
            <param name="context">the processor context</param>
            <param name="element">the element</param>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BLEED">
            <summary>The Constant BLEED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BOTH">
            <summary>The Constant BOTH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BOX_SIZING">
            <summary>The Constant BOX_SIZING.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CLEAR">
            <summary>The Constant CLEAR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CONTENT">
            <summary>The Constant CONTENT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.COUNTER_INCREMENT">
            <summary>The Constant COUNTER_INCREMENT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.COUNTER_RESET">
            <summary>The Constant COUNTER_RESET.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.DISPLAY">
            <summary>The Constant DISPLAY.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LIST_ITEM">
            <summary>The Constant LIST_ITEM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MARKS">
            <summary>The Constant MARKS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MAX_HEIGHT">
            <summary>The Constant MAX_HEIGHT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MAX_WIDTH">
            <summary>The Constant MAX_WIDTH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MIN_WIDTH">
            <summary>The Constant MIN_WIDTH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OBJECT_FIT">
            <summary>The Constant OBJECT_FIT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OUTLINE_OFFSET">
            <summary>The Constant OUTLINE_OFFSET.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OVERFLOW_X">
            <summary>The Constant OVERFLOW_X.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OVERFLOW_Y">
            <summary>The Constant OVERFLOW_Y.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PADDING_INLINE_START">
            <summary>The Constant PADDING_INLINE_START.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PLACEHOLDER">
            <summary>The Constant PLACEHOLDER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SIZE">
            <summary>The Constant SIZE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.STYLE">
            <summary>The Constant STYLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TABLE_LAYOUT">
            <summary>The Constant TABLE_LAYOUT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.VERTICAL_ALIGN">
            <summary>The Constant VERTICAL_ALIGN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.ABSOLUTE">
            <summary>The Constant ABSOLUTE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BLINK">
            <summary>The Constant BLINK.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BLOCK">
            <summary>The Constant BLOCK.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CAPITALIZE">
            <summary>The Constant CAPITALIZE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.COLLAPSE">
            <summary>The Constant COLLAPSE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CROP">
            <summary>The Constant CROP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.CROSS">
            <summary>The Constant CROSS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FILL">
            <summary>The Constant FILL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FIRST">
            <summary>The Constant FIRST.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FIRST_EXCEPT">
            <summary>The Constant FIRST_EXCEPT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.INLINE">
            <summary>The Constant INLINE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.INLINE_BLOCK">
            <summary>The Constant INLINE_BLOCK.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.INLINE_TABLE">
            <summary>The Constant INLINE_TABLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.INVERT">
            <summary>The Constant INVERT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.JUSTIFY">
            <summary>The Constant JUSTIFY.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LANDSCAPE">
            <summary>The Constant LANDSCAPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LAST">
            <summary>The Constant LAST.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LINE_THROUGH">
            <summary>The Constant LINE_THROUGH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LOWERCASE">
            <summary>The Constant LOWERCASE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.LTR">
            <summary>The Constant LTR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.MIDDLE">
            <summary>The Constant MIDDLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.NOWRAP">
            <summary>The Constant NOWRAP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OVERLINE">
            <summary>The Constant OVERLINE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PAGE">
            <summary>The Constant PAGE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PAGES">
            <summary>The Constant PAGES.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PORTRAIT">
            <summary>The Constant PORTRAIT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PRE">
            <summary>The Constant PRE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PRE_LINE">
            <summary>The Constant PRE_LINE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.PRE_WRAP">
            <summary>The Constant PRE_WRAP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.RELATIVE">
            <summary>The Constant RELATIVE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.RTL">
            <summary>The Constant RTL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SCALE_DOWN">
            <summary>The Constant SCALE_DOWN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SEPARATE">
            <summary>The Constant SEPARATE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SUB">
            <summary>The Constant SUB.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SUPER">
            <summary>The Constant SUPER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TABLE">
            <summary>The Constant TABLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TABLE_CELL">
            <summary>The Constant TABLE_CELL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TABLE_ROW">
            <summary>The Constant TABLE_ROW.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TEXT_BOTTOM">
            <summary>The Constant TEXT_BOTTOM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TEXT_TOP">
            <summary>The Constant TEXT_TOP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.UNDERLINE">
            <summary>The Constant UNDERLINE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.UPPERCASE">
            <summary>The Constant UPPERCASE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.OVERFLOW_VALUES">
            <summary>The Constant OVERFLOW_VALUES.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.AFTER">
            <summary>The Constant AFTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.BEFORE">
            <summary>The Constant BEFORE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FIRST_LETTER">
            <summary>The Constant FIRST_LETTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.FIRST_LINE">
            <summary>The Constant FIRST_LINE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.SELECTION">
            <summary>The Constant SELECTION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.COUNTER">
            <summary>The Constant COUNTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.COUNTERS">
            <summary>The Constant COUNTERS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.ELEMENT">
            <summary>The Constant RUNNING.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.RUNNING">
            <summary>The Constant RUNNING.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TARGET_COUNTER">
            <summary>The Constant TARGET_COUNTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.TARGET_COUNTERS">
            <summary>The Constant TARGET_COUNTERS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.CssConstants.DPI">
            <summary>The Constant DPI.</summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Page.CssRunningManager">
            <summary>Class that manages running elements.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.CssRunningManager.AddRunningElement(System.String,iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer)">
            <summary>Registers new running element from HTML document.</summary>
            <param name="runningElemName">the name of the new running element.</param>
            <param name="container">a wrapper for the running elements taken out of the normal flow.</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Page.CssRunningManager.GetRunningElement(System.String,System.String,System.Int32)">
            <summary>
            Finds the running element that has particular name and should appear on specific page with given occurrence
            options.
            </summary>
            <remarks>
            Finds the running element that has particular name and should appear on specific page with given occurrence
            options. This would work only if page content was already layouted and flushed (drawn).
            </remarks>
            <param name="runningElemName">the running element name.</param>
            <param name="occurrenceOption">
            an option defining which running element should be chosen in case there are multiple
            running elements with the same name on the given page.
            </param>
            <param name="pageNum">the 1-based index of the page for which running element is requested.</param>
            <returns>
            
            <see cref="T:iText.Html2pdf.Attach.Impl.Layout.RunningElementContainer"/>
            with corresponding running element, or
            <see langword="null"/>
            if no running
            element should be displayed for the given page with the given name or occurrence option.
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Page.PageMarginRunningElementNode">
            <summary>
            Wrapper
            <see cref="T:iText.StyledXmlParser.Node.INode"/>
            serving as a placeholder for running element.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.CssContentPropertyResolver">
            <summary>The Class CssContentPropertyResolver.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentPropertyResolver.ResolveContent(System.Collections.Generic.IDictionary{System.String,System.String},iText.StyledXmlParser.Node.INode,iText.Html2pdf.Css.Resolve.CssContext)">
            <summary>Resolves content.</summary>
            <param name="styles">the styles map</param>
            <param name="contentContainer">the content container</param>
            <param name="context">the CSS context</param>
            <returns>
            a list of
            <see cref="T:iText.StyledXmlParser.Node.INode"/>
            instances
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentPropertyResolver.ErrorFallback(System.String)">
            <summary>Resolves content in case of errors.</summary>
            <param name="contentStr">the content</param>
            <returns>
            the resulting list of
            <see cref="T:iText.StyledXmlParser.Node.INode"/>
            instances
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.CssContentPropertyResolver.ContentTextNode">
            <summary>
            <see cref="T:iText.StyledXmlParser.Node.ITextNode"/>
            implementation for content text.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContentPropertyResolver.ContentTextNode.parent">
            <summary>The parent.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContentPropertyResolver.ContentTextNode.content">
            <summary>The content.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContentPropertyResolver.ContentTextNode.#ctor(iText.StyledXmlParser.Node.INode,System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Resolve.CssContentPropertyResolver.ContentTextNode"/>
            instance.
            </summary>
            <param name="parent">the parent</param>
            <param name="content">the content</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.CssContext">
            <summary>Class that bundles all the CSS context properties.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContext.rootFontSize">
            <summary>The root font size value in pt.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContext.counterManager">
            <summary>The counter manager.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContext.pagesCounterOrTargetCounterPresent">
            <summary>Indicates if a pages counter or page(s) target-counter is present.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContext.nonPagesTargetCounterPresent">
            <summary>Indicates if a non-page(s) target-counter(s) is present.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.CssContext.runningManager">
            <summary>The running elements manager.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContext.GetRootFontSize">
            <summary>Gets the root font size.</summary>
            <returns>the root font size in pt</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContext.SetRootFontSize(System.Single)">
            <summary>Sets the root font size.</summary>
            <param name="fontSize">the new root font size</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContext.SetRootFontSize(System.String)">
            <summary>Sets the root font size.</summary>
            <param name="fontSizeStr">the new root font size</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContext.GetCounterManager">
            <summary>Gets the counter manager.</summary>
            <returns>the counter manager</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContext.SetPagesCounterPresent(System.Boolean)">
            <summary>Sets the presence of a pages counter or page(s) target counter.</summary>
            <param name="pagesCounterOrTargetCounterPresent">the new pages counter or page(s) target-counter present</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContext.IsPagesCounterPresent">
            <summary>Checks if a pages counter or page(s) target-counter is present.</summary>
            <returns>true, if pages counter or page(s) target-counter present</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContext.SetNonPagesTargetCounterPresent(System.Boolean)">
            <summary>Sets the presence of a non-page(s) target-counter(s).</summary>
            <param name="nonPagesTargetCounterPresent">the new non-page(s) target-counter(s) present</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.CssContext.IsNonPagesTargetCounterPresent">
            <summary>Checks if a non-page(s) target-counter(s) is present.</summary>
            <returns>true, if non-page(s) target-counter(s) present</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.DefaultCssResolver">
            <summary>
            Default implementation of the
            <see cref="T:iText.StyledXmlParser.Css.ICssResolver"/>
            interface.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.DefaultCssResolver.cssStyleSheet">
            <summary>The CSS style sheet.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.DefaultCssResolver.deviceDescription">
            <summary>The device description.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.DefaultCssResolver.cssInheritance">
            <summary>Css inheritance checker</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.DefaultCssResolver.fonts">
            <summary>The list of fonts.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.#ctor(iText.StyledXmlParser.Node.INode,iText.StyledXmlParser.Css.Media.MediaDeviceDescription,iText.StyledXmlParser.Resolver.Resource.ResourceResolver)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Resolve.DefaultCssResolver"/>
            instance.
            </summary>
            <param name="treeRoot">the root node</param>
            <param name="mediaDeviceDescription">the media device description</param>
            <param name="resourceResolver">the resource resolver</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.#ctor(iText.StyledXmlParser.Node.INode,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Resolve.DefaultCssResolver"/>
            instance.
            </summary>
            <param name="treeRoot">the root node</param>
            <param name="context">the processor context</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.GetFonts">
            <summary>Gets the list of fonts.</summary>
            <returns>
            the list of
            <see cref="T:iText.StyledXmlParser.Css.CssFontFaceRule"/>
            instances
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.ResolveContentAndCountersStyles(iText.StyledXmlParser.Node.INode,iText.Html2pdf.Css.Resolve.CssContext)">
            <summary>Resolves content and counter(s) styles of a node given the passed context.</summary>
            <param name="node">the node</param>
            <param name="context">the CSS context (RootFontSize, etc.)</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.ResolveStyles(iText.StyledXmlParser.Node.INode,iText.StyledXmlParser.Css.Resolve.AbstractCssContext)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.ResolveContentProperty(System.Collections.Generic.IDictionary{System.String,System.String},iText.StyledXmlParser.Node.INode,iText.Html2pdf.Css.Resolve.CssContext)">
            <summary>Resolves a content property.</summary>
            <param name="styles">the styles map</param>
            <param name="contentContainer">the content container</param>
            <param name="context">the CSS context</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.CollectCssDeclarations(iText.StyledXmlParser.Node.INode,iText.StyledXmlParser.Resolver.Resource.ResourceResolver,iText.Html2pdf.Css.Resolve.CssContext)">
            <summary>Collects CSS declarationss.</summary>
            <param name="rootNode">the root node</param>
            <param name="resourceResolver">the resource resolver</param>
            <param name="cssContext">the CSS context</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.EnableNonPageTargetCounterIfMentioned(iText.StyledXmlParser.Css.CssStyleSheet,iText.Html2pdf.Css.Resolve.CssContext)">
            <summary>Check if a non-page(s) target-counter(s) is mentioned and enables it.</summary>
            <param name="styleSheet">the stylesheet to analyze</param>
            <param name="cssContext">the CSS context</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.EnablePagesCounterIfMentioned(iText.StyledXmlParser.Css.CssStyleSheet,iText.Html2pdf.Css.Resolve.CssContext)">
            <summary>Check if a pages counter is mentioned and enables it.</summary>
            <param name="styleSheet">the stylesheet to analyze</param>
            <param name="cssContext">the CSS context</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.WrapStyleSheetInMediaQueryIfNecessary(iText.StyledXmlParser.Node.IElementNode,iText.StyledXmlParser.Css.CssStyleSheet)">
            <summary>
            Wraps a
            <see cref="T:iText.StyledXmlParser.Css.Media.CssMediaRule"/>
            into the style sheet if the head child element has a media attribute.
            </summary>
            <param name="headChildElement">the head child element</param>
            <param name="styleSheet">the style sheet</param>
            <returns>the css style sheet</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.CollectFonts">
            <summary>Collects fonts from the style sheet.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.DefaultCssResolver.CollectFonts(iText.StyledXmlParser.Css.CssStatement)">
            <summary>
            Collects fonts from a
            <see cref="T:iText.StyledXmlParser.Css.CssStatement"/>.
            </summary>
            <param name="cssStatement">the CSS statement</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Func.Counter.CounterDigitsGlyphStyle">
            <summary>Enumeration of css counter and target-counter digits glyph style.</summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager">
            <summary>Class that manages counters (e.g. for list symbols).</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.DEFAULT_COUNTER_VALUE">
            <summary>The Constant DEFAULT_COUNTER_VALUE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.DEFAULT_INCREMENT_VALUE">
            <summary>The Constant DEFAULT_INCREMENT_VALUE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.targetCounterMap">
            <summary>Map to store target-counter values.</summary>
            <remarks>Map to store target-counter values. First key is target-counter ID. Second key is counter name.</remarks>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.targetCountersMap">
            <summary>Map to store target-counters values.</summary>
            <remarks>Map to store target-counters values. First key is target-counters ID. Second key is counter name.
                </remarks>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.counters">
            <summary>Map to store counters values.</summary>
            <remarks>
            Map to store counters values. The key is the counter name, the value is the
            <see cref="!:System.Collections.Stack&lt;E&gt;"/>
            with counters values.
            </remarks>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.counterValues">
            <summary>Map to store counter values.</summary>
            <remarks>Map to store counter values. The key is the counter name, the value is the current counter value.
                </remarks>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.pushedCountersMap">
            <summary>List of counters that were pushed before processing children of the corresponding element.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.ClearManager">
            <summary>Clears information about counters.</summary>
            <remarks>Clears information about counters. Target-counter(s) information remains.</remarks>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.PushEveryCounterToCounters(iText.StyledXmlParser.Node.IElementNode)">
            <summary>Pushes every current non-null counter to stack of counters.</summary>
            <remarks>
            Pushes every current non-null counter to stack of counters.
            This method should be called when we are about to process child nodes.
            </remarks>
            <param name="element">the element which counters shall be pushed</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.PopEveryCounterFromCounters(iText.StyledXmlParser.Node.IElementNode)">
            <summary>Pops every given counter from stack of counters.</summary>
            <remarks>
            Pops every given counter from stack of counters.
            This method should be called when we have finished processing child nodes.
            </remarks>
            <param name="element">the element which counters shall be popped</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.ResolveTargetCounter(System.String,System.String,iText.Html2pdf.Css.Resolve.Func.Counter.CounterDigitsGlyphStyle)">
            <summary>Gets target-counter value for specified ID and counterName.</summary>
            <remarks>Gets target-counter value for specified ID and counterName. Value is converted according to listSymbolType.
                </remarks>
            <param name="id">
            ID of the element. The first call adds ID to the Map, which means we require its value.
            The second call returns corresponding value if we already encountered corresponding element
            </param>
            <param name="counterName">
            name of the counter. The first call adds counterName to the Map,
            which means we require its value.
            The second call returns corresponding value if we already encountered corresponding element
            </param>
            <param name="listSymbolType">the list symbol type to convert counter's value. null if conversion is not required.
                </param>
            <returns>target-counter value.</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.ResolveTargetCounters(System.String,System.String,System.String,iText.Html2pdf.Css.Resolve.Func.Counter.CounterDigitsGlyphStyle)">
            <summary>Gets target-counter value for specified ID and counterName.</summary>
            <remarks>Gets target-counter value for specified ID and counterName. Value is converted according to listSymbolType.
                </remarks>
            <param name="id">
            ID of the element. The first call adds ID at the Map,
            which means we require its value. The second call returns corresponding value
            if we already encountered this element
            </param>
            <param name="counterName">
            name of the counter. The first call adds name at the Map,
            which means we require its value. The second call returns corresponding value
            if we already encountered this element
            </param>
            <param name="counterSeparatorStr">separator to separate counters values.</param>
            <param name="listSymbolType">the list symbol type to convert counter's value. null if conversion is not required.
                </param>
            <returns>target-counter value.</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.AddTargetCounterIfRequired(iText.StyledXmlParser.Node.IElementNode)">
            <summary>Adds counter value to every counter in the Map corresponding to a node ID.</summary>
            <param name="node">node to take ID and scope from</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.AddTargetCountersIfRequired(iText.StyledXmlParser.Node.IElementNode)">
            <summary>Adds counters value to every counter in the Map corresponding to a node ID.</summary>
            <param name="node">node to take ID and scope from</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.ResolveCounter(System.String,iText.Html2pdf.Css.Resolve.Func.Counter.CounterDigitsGlyphStyle)">
            <summary>Resolves a counter.</summary>
            <param name="counterName">the counter name</param>
            <param name="listSymbolType">the list symbol type</param>
            <returns>
            the counter value as a
            <see cref="T:System.String"/>
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.ResolveCounters(System.String,System.String,iText.Html2pdf.Css.Resolve.Func.Counter.CounterDigitsGlyphStyle)">
            <summary>Resolves counters.</summary>
            <param name="counterName">the counter name</param>
            <param name="counterSeparatorStr">the counter separator</param>
            <param name="listSymbolType">the list symbol type</param>
            <returns>
            the counters as a
            <see cref="T:System.String"/>
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.ResetCounter(System.String)">
            <summary>Resets the counter.</summary>
            <param name="counterName">the counter name</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.ResetCounter(System.String,System.Int32)">
            <summary>Resets the counter.</summary>
            <param name="counterName">the counter name</param>
            <param name="value">the new value</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.IncrementCounter(System.String)">
            <summary>Increments the counter.</summary>
            <param name="counterName">the counter name</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.CssCounterManager.IncrementCounter(System.String,System.Int32)">
            <summary>Increments the counter.</summary>
            <param name="counterName">the counter name</param>
            <param name="incrementValue">the increment value</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Func.Counter.PageCountElementNode">
            <summary>
            <see cref="T:iText.StyledXmlParser.Node.ICustomElementNode"/>
            implementation for a page count element node.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.PageCountElementNode.PAGE_COUNTER_TAG">
            <summary>The Constant PAGE_COUNTER_TAG.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.PageCountElementNode.parent">
            <summary>The parent.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.PageCountElementNode.totalPageCount">
            <summary>Indicates if the node represents the total page count.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.PageCountElementNode.IsTotalPageCount">
            <summary>Checks if the node represents the total page count.</summary>
            <returns>true, if the node represents the total page count</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.PageCountElementNode.GetDigitsGlyphStyle">
            <summary>Gets glyph style for digits.</summary>
            <returns>name of the glyph style</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.PageCountElementNode.SetDigitsGlyphStyle(iText.Html2pdf.Css.Resolve.Func.Counter.CounterDigitsGlyphStyle)">
            <summary>Sets glyph style for digits.</summary>
            <param name="digitsGlyphStyle">name of the glyph style</param>
            <returns>
            this
            <see cref="T:iText.Html2pdf.Css.Resolve.Func.Counter.PageCountElementNode"/>
            instance
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.Func.Counter.PageTargetCountElementNode">
            <summary>
            <see cref="T:iText.StyledXmlParser.Node.Impl.Jsoup.Node.JsoupElementNode"/>
            implementation for page target-counters.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.Func.Counter.PageTargetCountElementNode.target">
            <summary>The target from which page will be taken.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.PageTargetCountElementNode.#ctor(iText.StyledXmlParser.Node.INode,System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Css.Resolve.Func.Counter.PageTargetCountElementNode"/>
            instance.
            </summary>
            <param name="parent">the parent node</param>
            <param name="target">the target from which page will be taken.</param>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.Func.Counter.PageTargetCountElementNode.GetTarget">
            <summary>Checks if the node represents the total page count.</summary>
            <returns>true, if the node represents the total page count</returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter">
            <summary>Utilities class that converts HTML styles to CSS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.htmlAttributeConverters">
            <summary>Maps HTML styles to a specific converter.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.Convert(iText.StyledXmlParser.Node.IElementNode)">
            <summary>
            Converts a the HTML styles of an element to a list of
            <see cref="T:iText.StyledXmlParser.Css.CssDeclaration"/>
            instances.
            </summary>
            <param name="element">the element</param>
            <returns>
            the resulting list of
            <see cref="T:iText.StyledXmlParser.Css.CssDeclaration"/>
            instances.
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter">
            <summary>Interface for all the attribute converter classes.</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter.IsSupportedForElement(System.String)">
            <summary>Checks if the converter is supported for a specific element.</summary>
            <param name="elementName">the element name</param>
            <returns>true, if the converter is supported</returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter.Convert(iText.StyledXmlParser.Node.IElementNode,System.String)">
            <summary>
            Converts a specific HTML style to a
            <see cref="T:iText.StyledXmlParser.Css.CssDeclaration"/>.
            </summary>
            <param name="element">the element</param>
            <param name="value">the value of the HTML style</param>
            <returns>
            a list of
            <see cref="T:iText.StyledXmlParser.Css.CssDeclaration"/>
            instances
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.BorderAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML border styles.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.BorderAttributeConverter.ApplyBordersToTableCells(iText.StyledXmlParser.Node.INode,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Applies borders to the tables and cells.</summary>
            <param name="node">the node</param>
            <param name="borderStyles">the border styles</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.CellPaddingAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for table's cellpadding.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.CellPaddingAttributeConverter.ApplyPaddingsToTableCells(iText.StyledXmlParser.Node.INode,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Applies paddings to the table's cells.</summary>
            <param name="node">the node</param>
            <param name="paddingStyle">cellpadding</param>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.CellSpacingAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for table's cellspacing.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.BgColorAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML background color styles.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.BgColorAttributeConverter.supportedTags">
            <summary>The supported tags.</summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.FontColorAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for font color styles.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.SizeAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for size properties.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.FontFaceAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML font face styles.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.TypeAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML ordered list types.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.DirAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML direction styles (e.g. right to left direction).
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.WidthAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML width values.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.HeightAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML height values.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.AlignAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML horizontal alignment styles.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.NoShadeAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML shade styles.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.NoWrapAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML shade styles.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.VAlignAttributeConverter">
            <summary>
            <see cref="T:iText.Html2pdf.Css.Resolve.HtmlStylesToCssConverter.IAttributeConverter"/>
            implementation for HTML vertical alignment styles.
            </summary>
        </member>
        <member name="T:iText.Html2pdf.Css.Resolve.UserAgentCss">
            <summary>Utilities class to get the styles of a node.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.UserAgentCss.DEFAULT_CSS_PATH">
            <summary>The path to the default CSS file.</summary>
        </member>
        <member name="F:iText.Html2pdf.Css.Resolve.UserAgentCss.defaultCss">
            <summary>
            The default
            <see cref="T:iText.StyledXmlParser.Css.CssStyleSheet"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Resolve.UserAgentCss.GetStyles(iText.StyledXmlParser.Node.INode)">
            <summary>Gets the styles of a node.</summary>
            <param name="node">the node</param>
            <returns>
            a list of
            <see cref="T:iText.StyledXmlParser.Css.CssDeclaration"/>
            values
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Css.Util.CssStyleSheetAnalyzer">
            <summary>Helper class to analyze the CSS stylesheet, e.g. for presence of some constructs</summary>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssStyleSheetAnalyzer.CheckNonPagesTargetCounterPresence(iText.StyledXmlParser.Css.CssStyleSheet)">
            <summary>Helper method to check if non-page(s) target-counter(s) is present anywhere in the CSS.</summary>
            <remarks>
            Helper method to check if non-page(s) target-counter(s) is present anywhere in the CSS.
            If presence is detected, it may require additional treatment
            </remarks>
            <param name="styleSheet">CSS stylesheet to analyze</param>
            <returns>
            <c>true</c> in case any non-page(s) target-counter(s) are present in CSS declarations,
            or <c>false</c> otherwise
            </returns>
        </member>
        <member name="M:iText.Html2pdf.Css.Util.CssStyleSheetAnalyzer.CheckPagesCounterPresence(iText.StyledXmlParser.Css.CssStyleSheet)">
            <summary>Helper method to check if counter(pages) or counters(pages) is present anywhere in the CSS.</summary>
            <remarks>
            Helper method to check if counter(pages) or counters(pages) is present anywhere in the CSS.
            If the presence is detected, it may require additional treatment
            </remarks>
            <param name="styleSheet">CSS stylesheet to analyze</param>
            <returns>
            <c>true</c> in case any "pages" counters are present in CSS declarations,
            or <c>false</c> otherwise
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Exceptions.CssApplierInitializationException">
            <summary>Runtime exception in case a CSS applier can't be initialized.</summary>
        </member>
        <member name="F:iText.Html2pdf.Exceptions.CssApplierInitializationException.REFLECTION_FAILED">
            <summary>The message template in case reflection failed.</summary>
        </member>
        <member name="M:iText.Html2pdf.Exceptions.CssApplierInitializationException.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Exceptions.CssApplierInitializationException"/>
            instance.
            </summary>
            <param name="message">the message</param>
            <param name="className">the class name of the CSS applier</param>
            <param name="tag">the key</param>
        </member>
        <member name="T:iText.Html2pdf.Exceptions.Html2PdfException">
            <summary>Runtime exception that gets thrown if something goes wrong in the HTML to PDF conversion.</summary>
        </member>
        <member name="F:iText.Html2pdf.Exceptions.Html2PdfException.PDF_DOCUMENT_SHOULD_BE_IN_WRITING_MODE">
            <summary>Message in case one tries to write to a PDF document that isn't in writing mode.</summary>
        </member>
        <member name="F:iText.Html2pdf.Exceptions.Html2PdfException.FONT_PROVIDER_CONTAINS_ZERO_FONTS">
            <summary>Message in case the font provider doesn't know about any fonts.</summary>
        </member>
        <member name="F:iText.Html2pdf.Exceptions.Html2PdfException.UNSUPPORTED_ENCODING_EXCEPTION">
            <summary>The Constant UnsupportedEncodingException.</summary>
        </member>
        <member name="M:iText.Html2pdf.Exceptions.Html2PdfException.#ctor(System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Exceptions.Html2PdfException"/>
            instance.
            </summary>
            <param name="message">the message</param>
        </member>
        <member name="T:iText.Html2pdf.Exceptions.TagWorkerInitializationException">
            <summary>Runtime exception that gets thrown if a tag worker can't be initialized.</summary>
        </member>
        <member name="F:iText.Html2pdf.Exceptions.TagWorkerInitializationException.REFLECTION_IN_TAG_WORKER_FACTORY_IMPLEMENTATION_FAILED">
            <summary>Template for the error message in case a tag worker couldn't be instantiated.</summary>
        </member>
        <member name="M:iText.Html2pdf.Exceptions.TagWorkerInitializationException.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a
            <see cref="T:iText.Html2pdf.Exceptions.TagWorkerInitializationException"/>
            instance.
            </summary>
            <param name="message">the message</param>
            <param name="classNames">the class names</param>
            <param name="tag">the tag</param>
        </member>
        <member name="M:iText.Html2pdf.Exceptions.TagWorkerInitializationException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Creates a
            <see cref="T:iText.Html2pdf.Exceptions.TagWorkerInitializationException"/>
            instance.
            </summary>
            <param name="message">the message</param>
            <param name="classNames">the class names</param>
            <param name="tag">the tag</param>
            <param name="cause">the cause</param>
        </member>
        <member name="T:iText.Html2pdf.HtmlConverter">
            <summary>The HtmlConverter is the class you will use most when converting HTML to PDF.</summary>
            <remarks>
            The HtmlConverter is the class you will use most when converting HTML to PDF.
            It contains a series of static methods that accept HTML as a
            <see cref="T:System.String"/>
            ,
            <see cref="T:System.IO.FileInfo"/>
            , or
            <see cref="T:System.IO.Stream"/>
            , and convert it to PDF in the
            form of an
            <see cref="T:System.IO.Stream"/>
            ,
            <see cref="T:System.IO.FileInfo"/>
            , or a series of
            iText elements. It's also possible to write to a
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            or
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            instance.
            </remarks>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.#ctor">
            <summary>Instantiates a new HtmlConverter instance.</summary>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.String,System.IO.Stream)">
            <summary>
            Converts a
            <see cref="T:System.String"/>
            containing HTML to an
            <see cref="T:System.IO.Stream"/>
            containing PDF.
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="pdfStream">
            the PDF as an
            <see cref="T:System.IO.Stream"/>
            </param>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.String,System.IO.Stream,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts a
            <see cref="T:System.String"/>
            containing HTML to an
            <see cref="T:System.IO.Stream"/>
            containing PDF, using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>.
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="pdfStream">
            the PDF as an
            <see cref="T:System.IO.Stream"/>
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.String,iText.Kernel.Pdf.PdfWriter)">
            <summary>
            Converts a
            <see cref="T:System.String"/>
            containing HTML to PDF by writing PDF content
            to a
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            instance.
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="pdfWriter">
            the
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            instance
            </param>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.String,iText.Kernel.Pdf.PdfWriter,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts a
            <see cref="T:System.String"/>
            containing HTML to PDF by writing PDF content
            to a
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            instance, using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>.
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="pdfWriter">
            the
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            instance
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.String,iText.Kernel.Pdf.PdfDocument,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts a
            <see cref="T:System.String"/>
            containing HTML to objects that
            will be added to a
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            , using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>.
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="pdfDocument">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            instance
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Converts HTML stored in a
            <see cref="T:System.IO.FileInfo"/>
            to a PDF
            <see cref="T:System.IO.FileInfo"/>.
            </summary>
            <param name="htmlFile">
            the
            <see cref="T:System.IO.FileInfo"/>
            containing the source HTML
            </param>
            <param name="pdfFile">
            the
            <see cref="T:System.IO.FileInfo"/>
            containing the resulting PDF
            </param>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.IO.FileInfo,System.IO.FileInfo,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts HTML stored in a
            <see cref="T:System.IO.FileInfo"/>
            to a PDF
            <see cref="T:System.IO.FileInfo"/>
            ,
            using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>.
            </summary>
            <param name="htmlFile">
            the
            <see cref="T:System.IO.FileInfo"/>
            containing the source HTML
            </param>
            <param name="pdfFile">
            the
            <see cref="T:System.IO.FileInfo"/>
            containing the resulting PDF
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.IO.Stream,System.IO.Stream)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to a PDF written to
            an
            <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <param name="pdfStream">
            the
            <see cref="T:System.IO.Stream"/>
            for the resulting PDF
            </param>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.IO.Stream,System.IO.Stream,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to a PDF written to
            an
            <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <param name="pdfStream">
            the
            <see cref="T:System.IO.Stream"/>
            for the resulting PDF
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.IO.Stream,iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to objects that
            will be added to a
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>.
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <param name="pdfDocument">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            instance
            </param>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.IO.Stream,iText.Kernel.Pdf.PdfWriter)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to content that
            will be written to a
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>.
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <param name="pdfWriter">
            the
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            containing the resulting PDF
            </param>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.IO.Stream,iText.Kernel.Pdf.PdfWriter,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to content that
            will be written to a
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            , using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>.
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <param name="pdfWriter">
            the
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            containing the resulting PDF
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToPdf(System.IO.Stream,iText.Kernel.Pdf.PdfDocument,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to objects that
            will be added to a
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            , using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>.
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <param name="pdfDocument">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            instance
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToDocument(System.String,iText.Kernel.Pdf.PdfWriter)">
            <summary>
            Converts a
            <see cref="T:System.String"/>
            containing HTML to content that
            will be written to a
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            , returning a
            <see cref="T:iText.Layout.Document"/>
            instance.
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="pdfWriter">
            the
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            containing the resulting PDF
            </param>
            <returns>
            a
            <see cref="T:iText.Layout.Document"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToDocument(System.IO.Stream,iText.Kernel.Pdf.PdfWriter)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to content that
            will be written to a
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            , returning a
            <see cref="T:iText.Layout.Document"/>
            instance.
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <param name="pdfWriter">
            the
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            containing the resulting PDF
            </param>
            <returns>
            a
            <see cref="T:iText.Layout.Document"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToDocument(System.String,iText.Kernel.Pdf.PdfWriter,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts a
            <see cref="T:System.String"/>
            containing HTML to content that
            will be written to a
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            , using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            , returning a
            <see cref="T:iText.Layout.Document"/>
            instance.
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="pdfWriter">the pdf writer</param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <returns>
            a
            <see cref="T:iText.Layout.Document"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToDocument(System.IO.Stream,iText.Kernel.Pdf.PdfWriter,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to content that
            will be written to a
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            , using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            , returning a
            <see cref="T:iText.Layout.Document"/>
            instance.
            </summary>
            <param name="htmlStream">the html stream</param>
            <param name="pdfWriter">the pdf writer</param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <returns>
            a
            <see cref="T:iText.Layout.Document"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToDocument(System.String,iText.Kernel.Pdf.PdfDocument,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts a
            <see cref="T:System.String"/>
            containing HTML to objects that
            will be added to a
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            , using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            ,
            returning a
            <see cref="T:iText.Layout.Document"/>
            instance.
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="pdfDocument">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            instance
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <returns>
            a
            <see cref="T:iText.Layout.Document"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToDocument(System.IO.Stream,iText.Kernel.Pdf.PdfDocument,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to objects that
            will be added to a
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            , using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            ,
            returning a
            <see cref="T:iText.Layout.Document"/>
            instance.
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <param name="pdfDocument">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            instance
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <returns>
            a
            <see cref="T:iText.Layout.Document"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToElements(System.String)">
            <summary>
            Converts a
            <see cref="T:System.String"/>
            containing HTML to a
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            iText objects (
            <see cref="T:iText.Layout.Element.IElement"/>
            instances).
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <returns>a list of iText building blocks</returns>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToElements(System.IO.Stream)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to a
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            iText objects (
            <see cref="T:iText.Layout.Element.IElement"/>
            instances).
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <returns>a list of iText building blocks</returns>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToElements(System.String,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts a
            <see cref="T:System.String"/>
            containing HTML to a
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            iText objects (
            <see cref="T:iText.Layout.Element.IElement"/>
            instances), using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>.
            </summary>
            <param name="html">
            the html in the form of a
            <see cref="T:System.String"/>
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <returns>a list of iText building blocks</returns>
        </member>
        <member name="M:iText.Html2pdf.HtmlConverter.ConvertToElements(System.IO.Stream,iText.Html2pdf.ConverterProperties)">
            <summary>
            Converts HTML obtained from an
            <see cref="T:System.IO.Stream"/>
            to a
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            iText objects (
            <see cref="T:iText.Layout.Element.IElement"/>
            instances), using specific
            <see cref="T:iText.Html2pdf.ConverterProperties"/>.
            </summary>
            <param name="htmlStream">
            the
            <see cref="T:System.IO.Stream"/>
            with the source HTML
            </param>
            <param name="converterProperties">
            a
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance
            </param>
            <returns>a list of iText building blocks</returns>
        </member>
        <member name="T:iText.Html2pdf.Html.AttributeConstants">
            <summary>Class that bundles a series of attribute constants.</summary>
        </member>
        <member name="M:iText.Html2pdf.Html.AttributeConstants.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Html.AttributeConstants"/>
            instance.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.ALIGN">
            <summary>The Constant ALIGN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.ALT">
            <summary>The Constant ALT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.APPLICATION_NAME">
            <summary>The Constant APPLICATION_NAME.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.AUTHOR">
            <summary>The Constant AUTHOR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.BGCOLOR">
            <summary>The Constant BGCOLOR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.BORDER">
            <summary>The Constant BORDER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.CELLPADDING">
            <summary>The Constant CLASS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.CELLSPACING">
            <summary>The Constant CLASS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.COLOR">
            <summary>The Constant COLOR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.COL">
            <summary>The Constant COLS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.COLGROUP">
            <summary>The Constant COLS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.COLS">
            <summary>The Constant COLS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.COLSPAN">
            <summary>The Constant COLSPAN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.CONTENT">
            <summary>The Constant CONTENT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.DATA">
            <summary>The Constant DATA</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.DESCRIPTION">
            <summary>The Constant DESCRIPTION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.DIR">
            <summary>The Constant DIR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.FACE">
            <summary>The Constant FACE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.HEIGHT">
            <summary>The Constant HEIGHT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.HREF">
            <summary>The Constant HREF.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.HSPACE">
            <summary>The Constant HSPACE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.ID">
            <summary>The Constant ID.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.KEYWORDS">
            <summary>The Constant KEYWORDS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.LABEL">
            <summary>The Constant LABEL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.LANG">
            <summary>The Constant LANG.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.MEDIA">
            <summary>The Constant MEDIA.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.MULTIPLE">
            <summary>The Constant MULTIPLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.NAME">
            <summary>The Constant NAME.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.NOSHADE">
            <summary>The Constant NOSHADE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.NOWRAP">
            <summary>The Constant NOWRAP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.NUMBER">
            <summary>The Constant NUMBER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.ROW">
            <summary>The Constant ROWS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.ROWGROUP">
            <summary>The Constant ROWS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.ROWS">
            <summary>The Constant ROWS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.ROWSPAN">
            <summary>The Constant ROWSPAN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.SCOPE">
            <summary>The Constant SCOPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.SELECTED">
            <summary>The Constant SELECTED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.SIZE">
            <summary>The Constant SIZE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.SPAN">
            <summary>The Constant SPAN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.SRC">
            <summary>The Constant SRC.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.STYLE">
            <summary>The Constant STYLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.TYPE">
            <summary>The Constant TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.VALIGN">
            <summary>The Constant VALIGN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.VALUE">
            <summary>The Constant VALUE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.VSPACE">
            <summary>The Constant VSPACE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.WIDTH">
            <summary>The Constant WIDTH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.TITLE">
            <summary>The Constant TITLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants._1">
            <summary>The Constant _1.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.A">
            <summary>The Constant A.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.a">
            <summary>The Constant a.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.BOTTOM">
            <summary>The Constant BOTTOM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.BUTTON">
            <summary>The Constant BUTTON.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.CENTER">
            <summary>The Constant CENTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.CHECKBOX">
            <summary>The Constant CHECKBOX.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.CHECKED">
            <summary>The Constant CHECKED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.DATE">
            <summary>The Constant DATE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.DATETIME">
            <summary>The Constant DATETIME.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.DATETIME_LOCAL">
            <summary>The Constant DATETIME_LOCAL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.EMAIL">
            <summary>The Constant EMAIL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.FILE">
            <summary>The Constant FILE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.HIDDEN">
            <summary>The Constant HIDDEN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.I">
            <summary>The Constant I.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.i">
            <summary>The Constant i.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.IMAGE">
            <summary>The Constant IMAGE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.LEFT">
            <summary>The Constant LEFT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.LTR">
            <summary>The Constant LTR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.MIDDLE">
            <summary>The Constant MIDDLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.MONTH">
            <summary>The Constant MONTH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.PASSWORD">
            <summary>The Constant PASSWORD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.PLACEHOLDER">
            <summary>The Constant PLACEHOLDER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.RADIO">
            <summary>The Constant RADIO.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.RANGE">
            <summary>The Constant RANGE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.RESET">
            <summary>The Constant RESET.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.RIGHT">
            <summary>The Constant RIGHT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.RTL">
            <summary>The Constant RTL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.SEARCH">
            <summary>The Constant SEARCH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.START">
            <summary>The Constant START</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.SUBMIT">
            <summary>The Constant SUBMIT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.TEL">
            <summary>The Constant TEL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.TEXT">
            <summary>The Constant TEXT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.TIME">
            <summary>The Constant TIME.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.TOP">
            <summary>The Constant TOP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.URL">
            <summary>The Constant URL</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.WEEK">
            <summary>The Constant WEEK</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.AttributeConstants.INPUT_TYPE_VALUES">
            <summary>The Constant INPUT_TYPE_VALUES.</summary>
        </member>
        <member name="T:iText.Html2pdf.Html.HtmlUtils">
            <summary>Utilities class with HTML-related functionality.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.HtmlUtils.DISC_SYMBOL">
            <summary>The Constant DISC_SYMBOL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.HtmlUtils.CIRCLE_SYMBOL">
            <summary>The Constant CIRCLE_SYMBOL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.HtmlUtils.SQUARE_SYMBOL">
            <summary>The Constant SQUARE_SYMBOL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.HtmlUtils.LATIN_NUMERALS">
            <summary>Symbols which are used to write numbers in Latin.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.HtmlUtils.GREEK_NUMERALS">
            <summary>Symbols which are used to write numbers in Greek.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.HtmlUtils.ROMAN_NUMERALS">
            <summary>Symbols which are used to write numbers in Roman.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.HtmlUtils.GEORGIAN_NUMERALS">
            <summary>Symbols which are used to write numbers in Georgian.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.HtmlUtils.ARMENIAN_NUMERALS">
            <summary>Symbols which are used to write numbers in Armenian.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.HtmlUtils.DEFAULT_NUMERALS">
            <summary>Symbols which are used to write numbers by default.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.HtmlUtils.MAX_ROMAN_NUMBER">
            <summary>The Constant MAX_ROMAN_NUMBER.</summary>
        </member>
        <member name="M:iText.Html2pdf.Html.HtmlUtils.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Html.HtmlUtils"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Html.HtmlUtils.ConvertNumberAccordingToGlyphStyle(iText.Html2pdf.Css.Resolve.Func.Counter.CounterDigitsGlyphStyle,System.Int32)">
            <summary>Converts number according to given glyph style.</summary>
            <param name="glyphStyle">style of the glyphs</param>
            <param name="number">number to be converted</param>
            <returns>converted number</returns>
        </member>
        <member name="M:iText.Html2pdf.Html.HtmlUtils.GetAllNumberGlyphsForStyle(iText.Html2pdf.Css.Resolve.Func.Counter.CounterDigitsGlyphStyle)">
            <summary>Gets a string which contains all glyphs which can be used in number according to given glyph style.
                </summary>
            <param name="glyphStyle">style of the glyphs</param>
            <returns>string of all number glyphs</returns>
        </member>
        <member name="M:iText.Html2pdf.Html.HtmlUtils.ConvertStringCounterGlyphStyleToEnum(System.String)">
            <summary>Gets enum representation of given digits glyph style.</summary>
            <param name="glyphStyle">style of the glyphs</param>
            <returns>
            
            <see cref="T:iText.Html2pdf.Css.Resolve.Func.Counter.CounterDigitsGlyphStyle"/>
            equivalent of given glyph style
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Html.TagConstants">
            <summary>Class that bundles a series of tag constants.</summary>
        </member>
        <member name="M:iText.Html2pdf.Html.TagConstants.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Html.TagConstants"/>
            instance.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.A">
            <summary>The Constant A.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.ABBR">
            <summary>The Constant ABBR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.ADDRESS">
            <summary>The Constant ADDRESS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.ARTICLE">
            <summary>The Constant ARTICLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.ASIDE">
            <summary>The Constant ASIDE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.B">
            <summary>The Constant B.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.BDI">
            <summary>The Constant BDI.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.BDO">
            <summary>The Constant BDO.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.BIG">
            <summary>The Constant BIG.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.BLOCKQUOTE">
            <summary>The Constant BLOCKQUOTE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.BODY">
            <summary>The Constant BODY.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.BR">
            <summary>The Constant BR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.BUTTON">
            <summary>The Constant BUTTON.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.CAPTION">
            <summary>The Constant CAPTION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.CENTER">
            <summary>The Constant CENTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.CITE">
            <summary>The Constant CITE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.CODE">
            <summary>The Constant CODE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.COL">
            <summary>The Constant COL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.COLGROUP">
            <summary>The Constant COLGROUP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.DD">
            <summary>The Constant DD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.DEL">
            <summary>The Constant DEL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.DFN">
            <summary>The Constant DFN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.DL">
            <summary>The Constant DL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.DT">
            <summary>The Constant DT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.DIV">
            <summary>The Constant DIV.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.EM">
            <summary>The Constant EM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.FIELDSET">
            <summary>The Constant FIELDSET.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.FIGCAPTION">
            <summary>The Constant FIGCAPTION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.FIGURE">
            <summary>The Constant FIGURE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.FONT">
            <summary>The Constant FONT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.FOOTER">
            <summary>The Constant FOOTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.FORM">
            <summary>The Constant FORM.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.H1">
            <summary>The Constant H1.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.H2">
            <summary>The Constant H2.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.H3">
            <summary>The Constant H3.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.H4">
            <summary>The Constant H4.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.H5">
            <summary>The Constant H5.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.H6">
            <summary>The Constant H6.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.HR">
            <summary>The Constant HR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.HEAD">
            <summary>The Constant HEAD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.HEADER">
            <summary>The Constant HEADER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.HTML">
            <summary>The Constant HTML.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.I">
            <summary>The Constant I.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.IMG">
            <summary>The Constant IMG.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.INPUT">
            <summary>The Constant INPUT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.INS">
            <summary>The Constant INS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.KBD">
            <summary>The Constant KBD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.LABEL">
            <summary>The Constant LABEL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.LEGEND">
            <summary>The Constant LEGEND.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.LI">
            <summary>The Constant LI.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.LINK">
            <summary>The Constant LINK.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.MAIN">
            <summary>The Constant MAIN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.MARK">
            <summary>The Constant MARK.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.MARQUEE">
            <summary>The Constant MARQUEE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.META">
            <summary>The Constant META.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.NAV">
            <summary>The Constant NAV.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.OBJECT">
            <summary>The Constant OBJECT</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.OL">
            <summary>The Constant OL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.OPTGROUP">
            <summary>The Constant OPTION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.OPTION">
            <summary>The Constant OPTION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.P">
            <summary>The Constant P.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.PRE">
            <summary>The Constant PRE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.Q">
            <summary>The Constant Q.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.S">
            <summary>The Constant S.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.SVG">
            <summary>The Constant SVG.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.SAMP">
            <summary>The Constant SAMP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.SCRIPT">
            <summary>The Constant SCRIPT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.SECTION">
            <summary>The Constant SECTION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.SELECT">
            <summary>The Constant SELECT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.SMALL">
            <summary>The Constant SMALL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.SPAN">
            <summary>The Constant SPAN.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.STRIKE">
            <summary>The Constant STRIKE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.STRONG">
            <summary>The Constant STRONG.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.STYLE">
            <summary>The Constant STYLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.SUB">
            <summary>The Constant SUB.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.SUP">
            <summary>The Constant SUP.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TABLE">
            <summary>The Constant TABLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TBODY">
            <summary>The Constant TBODY.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TEXTAREA">
            <summary>The Constant TEXTAREA.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TD">
            <summary>The Constant TD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TFOOT">
            <summary>The Constant TFOOT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TH">
            <summary>The Constant TH.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.THEAD">
            <summary>The Constant THEAD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TIME">
            <summary>The Constant TIME.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TITLE">
            <summary>The Constant TITLE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TR">
            <summary>The Constant TR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.TT">
            <summary>The Constant TT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.U">
            <summary>The Constant U.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.UL">
            <summary>The Constant UL.</summary>
        </member>
        <member name="F:iText.Html2pdf.Html.TagConstants.VAR">
            <summary>The Constant VAR.</summary>
        </member>
        <member name="T:iText.Html2pdf.Logs.Html2PdfLogMessageConstant">
            <summary>Class that bundles all the error message templates as constants.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.CANNOT_RESOLVE_TARGET_COUNTER_VALUE">
            <summary>The Constant CANNOT_RESOLVE_TARGET_COUNTER_VALUE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.CUSTOM_RENDERER_IS_SET_FOR_HTML_DOCUMENT">
            <summary>The Constant CUSTOM_RENDERER_IS_SET_FOR_HTML_DOCUMENT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.ACROFORM_NOT_SUPPORTED_FOR_SELECT">
            <summary>The Constant ACROFORM_NOT_SUPPORTED_FOR_SELECT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.CONTENT_PROPERTY_INVALID">
            <summary>The Constant CONTENT_PROPERTY_INVALID.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.CSS_PROPERTY_IN_PERCENTS_NOT_SUPPORTED">
            <summary>The Constant CSS_PROPERTY_IN_PERCENTS_NOT_SUPPORTED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.ERROR_LOADING_FONT">
            <summary>The Constant ERROR_LOADING_FONT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.ERROR_PARSING_CSS_SELECTOR">
            <summary>The Constant ERROR_PARSING_CSS_SELECTOR.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.ERROR_RESOLVING_PARENT_STYLES">
            <summary>The Constant ERROR_RESOLVING_PARENT_STYLES.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.ERROR_WHILE_LAYOUT_OF_FORM_FIELD">
            <summary>The Constant ERROR_WHILE_LAYOUT_OF_FORM_FIELD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.EXCEEDED_THE_MAXIMUM_NUMBER_OF_RELAYOUTS">
            <summary>The Constant EXCEEDED_THE_MAXIMUM_NUMBER_OF_RELAYOUTS.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.FLEX_PROPERTY_IS_NOT_SUPPORTED_YET">
            <summary>The constant FLEX_PROPERTY_IS_NOT_SUPPORTED_YET.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.ERROR_WHILE_LAYOUT_OF_FORM_FIELD_WITH_TYPE">
            <summary>The Constant ERROR_WHILE_LAYOUT_OF_FORM_FIELD_WITH_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.INPUT_FIELD_DOES_NOT_FIT">
            <summary>The Constant INPUT_FIELD_DOES_NOT_FIT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.INPUT_TYPE_IS_INVALID">
            <summary>The Constant INPUT_TYPE_IS_INVALID.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.INPUT_TYPE_IS_NOT_SUPPORTED">
            <summary>The Constant INPUT_TYPE_IS_NOT_SUPPORTED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.INVALID_CSS_PROPERTY_DECLARATION">
            <summary>The Constant INVALID_CSS_PROPERTY_DECLARATION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.INVALID_GRADIENT_DECLARATION">
            <summary>The Constant INVALID_CSS_PROPERTY_DECLARATION.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.MARGIN_VALUE_IN_PERCENT_NOT_SUPPORTED">
            <summary>The Constant MARGIN_VALUE_IN_PERCENT_NOT_SUPPORTED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.NOT_SUPPORTED_LIST_STYLE_TYPE">
            <summary>The Constant NOT_SUPPORTED_LIST_STYLE_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.NOT_SUPPORTED_TH_SCOPE_TYPE">
            <summary>The Constant NOT_SUPPORTED_TH_SCOPE_TYPE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.NO_CONSUMER_FOUND_FOR_CONTENT">
            <summary>The Constant NO_CONSUMER_FOUND_FOR_CONTENT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.NO_CSS_APPLIER_FOUND_FOR_TAG">
            <summary>The Constant NO_CSS_APPLIER_FOUND_FOR_TAG.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.NO_IPROPERTYCONTAINER_RESULT_FOR_THE_TAG">
            <summary>The Constant NO_IPROPERTYCONTAINER_RESULT_FOR_THE_TAG.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.NO_WORKER_FOUND_FOR_TAG">
            <summary>The Constant NO_WORKER_FOUND_FOR_TAG.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.PADDING_VALUE_IN_PERCENT_NOT_SUPPORTED">
            <summary>The Constant PADDING_VALUE_IN_PERCENT_NOT_SUPPORTED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.PAGE_SIZE_VALUE_IS_INVALID">
            <summary>The Constant PAGE_SIZE_VALUE_IS_INVALID.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.PDF_DOCUMENT_NOT_PRESENT">
            <summary>The Constant PDF_DOCUMENT_NOT_PRESENT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.QUOTES_PROPERTY_INVALID">
            <summary>The Constant QUOTES_PROPERTY_INVALID.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.TEXT_DECORATION_BLINK_NOT_SUPPORTED">
            <summary>The Constant TEXT_DECORATION_BLINK_NOT_SUPPORTED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.HSL_COLOR_NOT_SUPPORTED">
            <summary>The Constant HSL_COLOR_NOT_SUPPORTED.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.UNABLE_TO_PROCESS_EXTERNAL_CSS_FILE">
            <summary>The Constant UNABLE_TO_PROCESS_EXTERNAL_CSS_FILE.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.UNABLE_TO_PROCESS_SVG_ELEMENT">
            <summary>The Constant UNABLE_TO_PROCESS_SVG.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.UNABLE_TO_RESOLVE_COUNTER">
            <summary>The Constant UNABLE_TO_RESOLVE_COUNTER.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.UNABLE_TO_RETRIEVE_FONT">
            <summary>The Constant UNABLE_TO_RETRIEVE_FONT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.UNABLE_TO_RETRIEVE_IMAGE_WITH_GIVEN_BASE_URI">
            <summary>The Constant UNABLE_TO_RETRIEVE_IMAGE_WITH_GIVEN_BASE_URI.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.UNABLE_TO_RETRIEVE_STREAM_WITH_GIVEN_BASE_URI">
            <summary>The Constant UNABLE_TO_RETRIEVE_STREAM_WITH_GIVEN_BASE_URI.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.UNEXPECTED_VALUE_OF_OBJECT_FIT">
            <summary>The Constant UNEXPECTED_VALUE_OF_OBJECT_FIT_PROPERTY.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.UNKNOWN_MARGIN_BOX_CHILD">
            <summary>The Constant UNKNOWN_MARGIN_BOX_CHILD.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.WORKER_UNABLE_TO_PROCESS_IT_S_TEXT_CONTENT">
            <summary>The Constant WORKER_UNABLE_TO_PROCESS_IT_S_TEXT_CONTENT.</summary>
        </member>
        <member name="F:iText.Html2pdf.Logs.Html2PdfLogMessageConstant.WORKER_UNABLE_TO_PROCESS_OTHER_WORKER">
            <summary>The Constant WORKER_UNABLE_TO_PROCESS_OTHER_WORKER.</summary>
        </member>
        <member name="T:iText.Html2pdf.ProcessorContextCreator">
            <summary>Class that creates ProcessorContext with IMetaInfo.</summary>
        </member>
        <member name="M:iText.Html2pdf.ProcessorContextCreator.CreateProcessorContext(iText.Html2pdf.ConverterProperties)">
            <summary>Crates ProcessorContext instances with IMetaInfo.</summary>
            <param name="converterProperties">
            the
            <see cref="T:iText.Html2pdf.ConverterProperties"/>
            instance with IMetaInfo.
            </param>
            <returns>
            a new
            <see cref="T:iText.Html2pdf.Attach.ProcessorContext"/>
            instance with IMetaInfo.
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Resolver.Font.DefaultFontProvider">
            <summary>
            The default
            <see cref="T:iText.StyledXmlParser.Resolver.Font.BasicFontProvider"/>
            for pdfHTML, that, as opposed to
            the font provider in iText 7's styled-xml-parser, also includes a
            series of fonts that are shipped with the add-on.
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Font.DefaultFontProvider.SHIPPED_FONT_RESOURCE_PATH">
            <summary>The path to the shipped fonts.</summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Font.DefaultFontProvider.SHIPPED_FONT_NAMES">
            <summary>The file names of the shipped fonts.</summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Font.DefaultFontProvider.LOGGER">
            <summary>The logger.</summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Font.DefaultFontProvider.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Resolver.Font.DefaultFontProvider"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Font.DefaultFontProvider.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Resolver.Font.DefaultFontProvider"/>
            instance.
            </summary>
            <param name="registerStandardPdfFonts">use true if you want to register the standard Type 1 fonts (can't be embedded)
                </param>
            <param name="registerShippedFonts">use true if you want to register the shipped fonts (can be embedded)</param>
            <param name="registerSystemFonts">use true if you want to register the system fonts (can require quite some resources)
                </param>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Font.DefaultFontProvider.#ctor(System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Resolver.Font.DefaultFontProvider"/>
            instance.
            </summary>
            <param name="registerStandardPdfFonts">use true if you want to register the standard Type 1 fonts (can't be embedded)
                </param>
            <param name="registerShippedFonts">use true if you want to register the shipped fonts (can be embedded)</param>
            <param name="registerSystemFonts">use true if you want to register the system fonts (can require quite some resources)
                </param>
            <param name="defaultFontFamily">default font family</param>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Font.DefaultFontProvider.AddShippedFonts(iText.Layout.Font.Range)">
            <summary>Adds the shipped fonts.</summary>
            <param name="rangeToLoad">
            a unicode
            <see cref="T:iText.Layout.Font.Range"/>
            to load characters
            </param>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Font.DefaultFontProvider.AddCalligraphFonts">
            <summary>This method loads a list of noto fonts from pdfCalligraph (if present in the classpath!) into FontProvider.
                </summary>
            <remarks>
            This method loads a list of noto fonts from pdfCalligraph (if present in the classpath!) into FontProvider.
            The list is the following (each font is represented in regular and bold types): NotoSansArabic, NotoSansGurmukhi,
            NotoSansOriya, NotoSerifBengali, NotoSerifDevanagari, NotoSerifGujarati, NotoSerifHebrew, NotoSerifKannada,
            NotoSerifKhmer, NotoSerifMalayalam, NotoSerifTamil, NotoSerifTelugu, NotoSerifThai.
            If it's needed to have a DefaultFontProvider without typography fonts loaded,
            create an extension of DefaultFontProvider and override this method so it does nothing and only returns null.
            </remarks>
            <returns>
            a unicode
            <see cref="T:iText.Layout.Font.Range"/>
            that excludes the loaded from pdfCalligraph fonts,
            i.e. the unicode range that is to be rendered with any other font contained in this FontProvider
            </returns>
        </member>
        <member name="T:iText.Html2pdf.Resolver.Form.FormFieldNameResolver">
            <summary>Utilities class that resolves form field names.</summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Form.FormFieldNameResolver.DEFAULT_NAME">
            <summary>The default base name of a field: "Field".</summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Form.FormFieldNameResolver.NAME_COUNT_SEPARATOR">
            <summary>The separator between a field name and an index.</summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Form.FormFieldNameResolver.names">
            <summary>A map containing all the base field names, mapped to the current index.</summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Form.FormFieldNameResolver.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Resolver.Form.FormFieldNameResolver"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Form.FormFieldNameResolver.ResolveFormName(System.String)">
            <summary>Resolves a proposed field name to a valid field name.</summary>
            <param name="name">the proposed name</param>
            <returns>the valid name</returns>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Form.FormFieldNameResolver.Reset">
            <summary>Resets the map containing all the field names.</summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Form.FormFieldNameResolver.NormalizeString(System.String)">
            <summary>Normalizes a field name.</summary>
            <param name="s">the proposed field name</param>
            <returns>the normalized name</returns>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Form.FormFieldNameResolver.ResolveNormalizedFormName(System.String)">
            <summary>Resolves a normalized form name.</summary>
            <param name="name">the proposed name</param>
            <returns>the resolved name</returns>
        </member>
        <member name="T:iText.Html2pdf.Resolver.Form.RadioCheckResolver">
            <summary>Utilities class that resolves radio's checked property value.</summary>
        </member>
        <member name="F:iText.Html2pdf.Resolver.Form.RadioCheckResolver.checked">
            <summary>A map containing all the radio group names, mapped to the corresponded checked radio field.</summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Form.RadioCheckResolver.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Resolver.Form.RadioCheckResolver"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Form.RadioCheckResolver.CheckField(System.String,iText.Html2pdf.Attach.Impl.Layout.Form.Element.Radio)">
            <summary>Checks the radio field.</summary>
            <param name="radioGroupName">the name of the radio group the radio field belongs to</param>
            <param name="checkedField">the radio field to be checked</param>
        </member>
        <member name="T:iText.Html2pdf.Resolver.Resource.HtmlResourceResolver">
            <summary>
            Extends
            <see cref="T:iText.StyledXmlParser.Resolver.Resource.ResourceResolver"/>
            to also support SVG images
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.HtmlResourceResolver.#ctor(System.String,iText.Html2pdf.Attach.ProcessorContext)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Resolver.Resource.HtmlResourceResolver"/>
            instance.
            </summary>
            <remarks>
            Creates a new
            <see cref="T:iText.Html2pdf.Resolver.Resource.HtmlResourceResolver"/>
            instance.
            If
            <paramref name="baseUri"/>
            is a string that represents an absolute URI with any schema
            except "file" - resources url values will be resolved exactly as "new URL(baseUrl, uriString)". Otherwise base URI
            will be handled as path in local file system.
            <para />
            If empty string or relative URI string is passed as base URI, then it will be resolved against current working
            directory of this application instance.
            </remarks>
            <param name="baseUri">base URI against which all relative resource URIs will be resolved</param>
            <param name="context">
            
            <see cref="T:iText.Html2pdf.Attach.ProcessorContext"/>
            instance for the current HTML to PDF conversion process
            </param>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.HtmlResourceResolver.#ctor(System.String,iText.Html2pdf.Attach.ProcessorContext,iText.StyledXmlParser.Resolver.Resource.IResourceRetriever)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Resolver.Resource.HtmlResourceResolver"/>
            instance.
            </summary>
            <remarks>
            Creates a new
            <see cref="T:iText.Html2pdf.Resolver.Resource.HtmlResourceResolver"/>
            instance.
            If
            <paramref name="baseUri"/>
            is a string that represents an absolute URI with any schema
            except "file" - resources url values will be resolved exactly as "new URL(baseUrl, uriString)". Otherwise base URI
            will be handled as path in local file system.
            <para />
            If empty string or relative URI string is passed as base URI, then it will be resolved against current working
            directory of this application instance.
            </remarks>
            <param name="baseUri">base URI against which all relative resource URIs will be resolved</param>
            <param name="context">
            
            <see cref="T:iText.Html2pdf.Attach.ProcessorContext"/>
            instance for the current HTML to PDF conversion process
            </param>
            <param name="retriever">the resource retriever with the help of which data from resources will be retrieved
                </param>
        </member>
        <member name="M:iText.Html2pdf.Resolver.Resource.HtmlResourceResolver.TryResolveBase64ImageSource(System.String)">
            <summary>
            Retrieve image as either
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfImageXObject"/>
            , or
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfFormXObject"/>.
            </summary>
            <param name="src">either link to file or base64 encoded stream</param>
            <returns>PdfXObject on success, otherwise null</returns>
        </member>
        <member name="T:iText.Html2pdf.Util.SvgProcessingUtil">
            <summary>Utility class for handling operations related to SVG</summary>
        </member>
        <member name="M:iText.Html2pdf.Util.SvgProcessingUtil.#ctor(iText.StyledXmlParser.Resolver.Resource.ResourceResolver)">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Util.SvgProcessingUtil"/>
            instance based on
            <see cref="T:iText.StyledXmlParser.Resolver.Resource.ResourceResolver"/>
            which is used to resolve a variety of resources.
            </summary>
            <param name="resourceResolver">the resource resolver</param>
        </member>
        <member name="M:iText.Html2pdf.Util.SvgProcessingUtil.CreateImageFromProcessingResult(iText.Svg.Processors.ISvgProcessorResult,iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Create an
            <c>Image</c>
            layout object tied to the passed
            <c>PdfDocument</c>
            using the SVG processing result.
            </summary>
            <param name="result">Processing result containing the SVG information</param>
            <param name="pdfDocument">pdf that shall contain the image</param>
            <returns>image layout object</returns>
        </member>
        <member name="M:iText.Html2pdf.Util.SvgProcessingUtil.CreateXObjectFromProcessingResult(iText.Svg.Processors.ISvgProcessorResult,iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Create an
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfFormXObject"/>
            tied to the passed
            <c>PdfDocument</c>
            using the SVG processing result.
            </summary>
            <param name="result">Processing result containing the SVG information</param>
            <param name="pdfDocument">pdf that shall contain the image</param>
            <returns>PdfFormXObject instance</returns>
        </member>
        <member name="T:iText.Html2pdf.Util.TagProcessorMapping`1">
            <summary>
            Class that allows to map keys (html tags, css attributes) to the
            corresponding tag processors (a tag worker or a CSS applier).
            </summary>
        </member>
        <member name="F:iText.Html2pdf.Util.TagProcessorMapping`1.DEFAULT_DISPLAY_KEY">
            <summary>The default display key.</summary>
        </member>
        <member name="F:iText.Html2pdf.Util.TagProcessorMapping`1.mapping">
            <summary>The actual mapping.</summary>
        </member>
        <member name="M:iText.Html2pdf.Util.TagProcessorMapping`1.#ctor">
            <summary>
            Creates a new
            <see cref="T:iText.Html2pdf.Util.TagProcessorMapping`1"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Html2pdf.Util.TagProcessorMapping`1.PutMapping(System.String,`0)">
            <summary>Add a new tag to the map.</summary>
            <param name="tag">the key</param>
            <param name="mapping">the class instance that maps to the tag</param>
        </member>
        <member name="M:iText.Html2pdf.Util.TagProcessorMapping`1.PutMapping(System.String,System.String,`0)">
            <summary>Add a new tag to the map.</summary>
            <param name="tag">the key</param>
            <param name="display">the display value</param>
            <param name="mapping">the class instance that maps to the tag</param>
        </member>
        <member name="M:iText.Html2pdf.Util.TagProcessorMapping`1.GetMapping(System.String)">
            <summary>Gets the class that maps to a specific tag.</summary>
            <param name="tag">the key</param>
            <returns>the class that maps to the tag</returns>
        </member>
        <member name="M:iText.Html2pdf.Util.TagProcessorMapping`1.GetMapping(System.String,System.String)">
            <summary>Gets the class that maps to a specific tag.</summary>
            <param name="tag">the key</param>
            <param name="display">the display value</param>
            <returns>the class that maps to the tag</returns>
        </member>
        <member name="M:iText.Html2pdf.Util.TagProcessorMapping`1.EnsureMappingExists(System.String)">
            <summary>Ensure that a mapping for a specific key exists.</summary>
            <param name="tag">the key</param>
            <returns>the map</returns>
        </member>
    </members>
</doc>
